(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{651:function(v,_,t){"use strict";t.r(_);var n=t(41),i=Object(n.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"什么是持续集成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是持续集成"}},[v._v("#")]),v._v(" 什么是持续集成")]),v._v(" "),t("p",[v._v("持续集成（ Continuous integration ， 简称 CI ）指的是，频繁地（一天多次）将代码集成到主干。")]),v._v(" "),t("p",[t("strong",[v._v("持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量")]),v._v("。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。")]),v._v(" "),t("p",[v._v("通过持续集成， 团队可以快速的从一个功能到另一个功能，简而言之，敏捷软件开发很大一部分都要归功于持续集成。")]),v._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/jenkins/500/img.png",alt:""}})]),v._v(" "),t("p",[v._v("根据持续集成的设计，代码从提交到生产，整个过程有以下几步。")]),v._v(" "),t("ul",[t("li",[v._v("提交"),t("br"),v._v("\n流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交（commit）。")]),v._v(" "),t("li",[v._v("测试（第一轮）"),t("br"),v._v("\n代码仓库对 commit 操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。")]),v._v(" "),t("li",[v._v("构建"),t("br"),v._v("\n通过第一轮测试，代码就可以合并进主干，就算可以交付了。"),t("br"),v._v("\n交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS 脚本、图片）等等。")]),v._v(" "),t("li",[v._v("测试（第二轮）"),t("br"),v._v("\n构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。")]),v._v(" "),t("li",[v._v("部署"),t("br"),v._v("\n过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（tar filename.tar * ）存档，发到生产服务器。")]),v._v(" "),t("li",[v._v("回滚"),t("br"),v._v("\n一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指向上一个版本的目录。")])]),v._v(" "),t("h3",{attrs:{id:"持续集成的组成要素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#持续集成的组成要素"}},[v._v("#")]),v._v(" 持续集成的组成要素")]),v._v(" "),t("ul",[t("li",[v._v("一个自动构建过程， 从检出代码、 编译构建、 运行测试、 结果记录、 测试统计等都是自动完成的， 无需人工干预。")]),v._v(" "),t("li",[v._v("一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用 SVN 或 Git。")]),v._v(" "),t("li",[v._v("一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/jenkins/500/img_1.png",alt:""}})]),v._v(" "),t("h3",{attrs:{id:"持续集成的好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#持续集成的好处"}},[v._v("#")]),v._v(" 持续集成的好处")]),v._v(" "),t("p",[v._v("1、降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；"),t("br"),v._v("\n2、对系统健康持续检查，减少发布风险带来的问题；"),t("br"),v._v("\n3、减少重复性工作；"),t("br"),v._v("\n4、持续部署，提供可部署单元包；"),t("br"),v._v("\n5、持续交付可供使用的版本；"),t("br"),v._v("\n6、增强团队信心；")]),v._v(" "),t("h2",{attrs:{id:"jenkins介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jenkins介绍"}},[v._v("#")]),v._v(" Jenkins 介绍")]),v._v(" "),t("p",[v._v("Jenkins 是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。官网： http://jenkins-ci.org/。")]),v._v(" "),t("p",[v._v("Jenkins 的特征：")]),v._v(" "),t("ul",[t("li",[v._v("开源的 Java 语言开发持续集成工具，支持持续集成，持续部署。")]),v._v(" "),t("li",[v._v("易于安装部署配置：可通过 yum 安装，或下载 war 包以及通过 docker 容器等快速实现安装部署，可方便 web 界面配置管理。")]),v._v(" "),t("li",[v._v("消息通知及测试报告：集成 RSS/E-mail 通过 RSS 发布构建结果或当构建完成时通过 e-mail 通知，生成 JUnit/TestNG 测试报告。")]),v._v(" "),t("li",[v._v("分布式构建：支持 Jenkins 能够让多台计算机一起构建 / 测试。")]),v._v(" "),t("li",[v._v("文件识别：Jenkins 能够跟踪哪次构建生成哪些 jar，哪次构建使用哪个版本的 jar 等。")]),v._v(" "),t("li",[v._v("丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如 git，svn，maven，docker 等。")])])])}),[],!1,null,null,null);_.default=i.exports}}]);