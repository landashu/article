(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{602:function(e,s,a){"use strict";a.r(s);var t=a(41),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("blockquote",[a("p",[e._v("本文及后续所有文章都以 21.7.3.14-2 做为版本讲解和入门学习")])]),e._v(" "),a("h2",{attrs:{id:"单表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单表查询"}},[e._v("#")]),e._v(" 单表查询")]),e._v(" "),a("h3",{attrs:{id:"prewhere-替代-where"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prewhere-替代-where"}},[e._v("#")]),e._v(" Prewhere 替代 where")]),e._v(" "),a("p",[e._v("Prewhere 和 where 语句的作用相同，用来过滤数据。不同之处在于 prewhere 只支持 *MergeTree 族系列引擎的表，首先会读取指定的列数据，来判断数据过滤，等待数据过滤之后再读取 select 声明的列字段来补全其余属性。")]),e._v(" "),a("p",[e._v("当查询列明显多于筛选列时使用 Prewhere 可十倍提升查询性能，Prewhere 会自动优化执行过滤阶段的数据读取方式，降低 io 操作。")]),e._v(" "),a("p",[e._v("在某些场合下，prewhere 语句比 where 语句处理的数据量更少性能更高。")]),e._v(" "),a("div",{staticClass:"language-clickhouse line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#关闭 where 自动转 prewhere(默认情况下， where 条件会自动优化成 prewhere)\nset optimize_move_to_prewhere=0;\n\n# 使用 where\nselect WatchID,JavaEnable, Title,GoodEvent,EventTime,EventDate,CounterID,ClientIP,ClientIP6,RegionID,UserID,\nCounterClass,OS,UserAgent, URL,Referer,URLDomain,RefererDomain,Refresh,IsRobot,RefererCategories,URLCategories,\nURLRegions,RefererRegions,ResolutionWidth,ResolutionHeight,ResolutionDepth,FlashMajor,FlashMinor,FlashMinor2\nfrom datasets.hits_v1 where UserID='3198390223272470366';\n\n# 使用 prewhere 关键字\nselect WatchID,JavaEnable, Title,GoodEvent,EventTime,EventDate,CounterID,ClientIP,ClientIP6,RegionID,UserID,\nCounterClass,OS,UserAgent, URL,Referer,URLDomain,RefererDomain,Refresh,IsRobot,RefererCategories,URLCategories,\nURLRegions,RefererRegions,ResolutionWidth,ResolutionHeight,ResolutionDepth,FlashMajor,FlashMinor,FlashMinor2\nfrom datasets.hits_v1 prewhere UserID='3198390223272470366';\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br")])]),a("p",[e._v("默认情况，我们肯定不会关闭 where 自动优化成 prewhere，但是某些场景即使开启优化，也不会自动转换成 prewhere，需要手动指定 prewhere：")]),e._v(" "),a("ul",[a("li",[e._v("使用常量表达式")]),e._v(" "),a("li",[e._v("使用默认值为 alias 类型的字段")]),e._v(" "),a("li",[e._v("包含了 arrayJOIN，globalIn，globalNotIn 或者 indexHint 的查询")]),e._v(" "),a("li",[e._v("select 查询的列字段和 where 的谓词相同")]),e._v(" "),a("li",[e._v("使用了主键字段")])]),e._v(" "),a("h3",{attrs:{id:"数据采样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据采样"}},[e._v("#")]),e._v(" 数据采样")]),e._v(" "),a("p",[e._v("通过采样运算可极大提升数据分析的性能")]),e._v(" "),a("div",{staticClass:"language-clickhouse line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SELECT Title,count(*) AS PageViews FROM hits_v1\n#代表采样 10%的数据,也可以是具体的条数\nSAMPLE 0.1  \nWHERE CounterID =57 GROUP BY Title\nORDER BY PageViews DESC LIMIT 1000\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("采样修饰符只有在 MergeTree engine 表中才有效，且在创建表时需要指定采样策略。")]),e._v(" "),a("h3",{attrs:{id:"列裁剪与分区裁剪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列裁剪与分区裁剪"}},[e._v("#")]),e._v(" 列裁剪与分区裁剪")]),e._v(" "),a("p",[e._v("数据量太大时应避免使用 select * 操作，查询的性能会与查询的字段大小和数量成线性表，换字段越少，消耗的 io 资源越少，性能就会越高。")]),e._v(" "),a("div",{staticClass:"language-clickhouse line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("反例：\nselect * from datasets.hits_v1;\n\n正例：\nselect WatchID, JavaEnable, Title, GoodEvent, EventTime, EventDate, CounterID, ClientIP, ClientIP6, RegionID, UserID\nfrom datasets.hits_v1;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("分区裁剪就是只读取需要的分区，在过滤条件中指定。")]),e._v(" "),a("div",{staticClass:"language-clickhouse line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("select WatchID, JavaEnable, Title, GoodEvent, EventTime, EventDate, CounterID, ClientIP, ClientIP6, RegionID, UserID\nfrom datasets.hits_v1\nwhere EventDate='2014-03-23';\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h3",{attrs:{id:"orderby-结合-where、limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orderby-结合-where、limit"}},[e._v("#")]),e._v(" orderby 结合 where、limit")]),e._v(" "),a("p",[e._v("千万以上数据集进行 order by 查询时需要搭配 where 条件和 limit 语句一起使用。")]),e._v(" "),a("div",{staticClass:"language-clickhouse line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#正例：\nSELECT UserID,Age FROM hits_v1 WHERE CounterID=57 ORDER BY Age DESC LIMIT 1000\n\n#反例：\nSELECT UserID,Age FROM hits_v1 ORDER BY Age DESC\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("h3",{attrs:{id:"避免构建虚拟列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#避免构建虚拟列"}},[e._v("#")]),e._v(" 避免构建虚拟列")]),e._v(" "),a("p",[e._v("如非必须，不要在结果集上构建虚拟列，虚拟列非常消耗资源浪费性能，可以考虑在前端进行处理，或者在表中构造实际字段进行额外存储。")]),e._v(" "),a("div",{staticClass:"language-clickhouse line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("反例：\nSELECT Income,Age,Income/Age as IncRate FROM datasets.hits_v1;\n\n正例：拿到 Income 和 Age 后，考虑在前端进行处理，或者在表中构造实际字段进行额外存储\nSELECT Income,Age FROM datasets.hits_v1;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("h3",{attrs:{id:"uniqcombined-替代-distinct"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uniqcombined-替代-distinct"}},[e._v("#")]),e._v(" uniqCombined 替代 distinct")]),e._v(" "),a("p",[e._v("性能可提升 10 倍以上，uniqCombined 底层采用类似 HyperLogLog 算法实现，能接受 2% 左右的数据误差，可直接使用这种去重方式提升查询性能。Count (distinct) 会使用 uniqExact 精确去重。")]),e._v(" "),a("p",[e._v("不建议在千万级不同数据上执行 distinct 去重查询，改为近似去重 uniqCombine")]),e._v(" "),a("div",{staticClass:"language-clickhouse line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("反例：\nselect count(distinct UserID) from hits_v1;\n\n正例：\nSELECT uniqCombined(UserID) from datasets.hits_v1\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("h3",{attrs:{id:"其他注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他注意事项"}},[e._v("#")]),e._v(" 其他注意事项")]),e._v(" "),a("h4",{attrs:{id:"查询熔断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询熔断"}},[e._v("#")]),e._v(" 查询熔断")]),e._v(" "),a("p",[e._v("为了避免因个别慢查询引起的服务雪崩的问题，除了可以为单个查询设置超时以外，还可以配置周期熔断，在一个查询周期内，如果用户频繁进行慢查询操作超出规定阈值后将无法继续进行查询操作。")]),e._v(" "),a("h4",{attrs:{id:"关闭虚拟内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关闭虚拟内存"}},[e._v("#")]),e._v(" 关闭虚拟内存")]),e._v(" "),a("p",[e._v("物理内存和虚拟内存的数据交换，会导致查询变慢，资源允许的情况下关闭虚拟内存。")]),e._v(" "),a("h4",{attrs:{id:"配置-join-use-nulls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-join-use-nulls"}},[e._v("#")]),e._v(" 配置 join_use_nulls")]),e._v(" "),a("p",[e._v("为每一个账户添加 join_use_nulls 配置，左表中的一条记录在右表中不存在，右表的相应字段会返回该字段相应数据类型的默认值，而不是标准 SQL 中的 Null 值。")]),e._v(" "),a("h4",{attrs:{id:"批量写入时先排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#批量写入时先排序"}},[e._v("#")]),e._v(" 批量写入时先排序")]),e._v(" "),a("p",[e._v("批量写入数据时，必须控制每个批次的数据中涉及到的分区的数量，在写入之前最好对需要导入的数据进行排序。无序的数据或者涉及的分区太多，会导致 ClickHouse 无法及时对新导入的数据进行合并，从而影响查询性能。")]),e._v(" "),a("h4",{attrs:{id:"关注-cpu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关注-cpu"}},[e._v("#")]),e._v(" 关注 CPU")]),e._v(" "),a("p",[e._v("cpu 一般在 50% 左右会出现查询波动，达到 70% 会出现大范围的查询超时，cpu 是最关键的指标，要非常关注。")]),e._v(" "),a("h2",{attrs:{id:"多表关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多表关联"}},[e._v("#")]),e._v(" 多表关联")]),e._v(" "),a("p",[e._v("clickhouse 的多表关联会把有表的数据全部加入到内存中，然后左表每条去和内存中的数据做对比。一旦左表数据量过大，容易导致内存不够。")]),e._v(" "),a("h3",{attrs:{id:"用-in-代替-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-in-代替-join"}},[e._v("#")]),e._v(" 用 in 代替 join")]),e._v(" "),a("p",[e._v("当多表联查时，查询的数据仅从其中一张表出时，可以考虑用 IN 操作而不是 join。")]),e._v(" "),a("div",{staticClass:"language-clickhouse line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# 原始语法\nselect a.* from A a\nleft join B b on a.id = b.aid\nwhere b.id = 1\n\n# 改进语法\nselect a.* from A a where a.id in ( select b.aid from B b where b.id = 1 )\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("h3",{attrs:{id:"大小表join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大小表join"}},[e._v("#")]),e._v(" 大小表 join")]),e._v(" "),a("p",[e._v("多表 join 时要满足"),a("strong",[e._v("小表在右")]),e._v("的原则，右表关联时被加载到内存中与左表进行比较，ClickHouse 中无论是 Left join 、Right join 还是 Inner join 永远都是拿着右表中的每一条记录到左表中查找该记录是否存在，所以右表必须是小表。")]),e._v(" "),a("h3",{attrs:{id:"注意谓词下推-版本差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意谓词下推-版本差异"}},[e._v("#")]),e._v(" 注意谓词下推（版本差异）")]),e._v(" "),a("p",[e._v("ClickHouse 在 join 查询时不会主动发起谓词下推的操作，需要每个子查询提前完成过滤操作，需要注意的是，是否执行谓词下推，对性能影响差别很大（新版本中已经不存在此问题，但是需要注意谓词的位置的不同依然有性能的差异）")]),e._v(" "),a("h3",{attrs:{id:"分布式表使用-global"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式表使用-global"}},[e._v("#")]),e._v(" 分布式表使用 GLOBAL")]),e._v(" "),a("p",[e._v("两张分布式表上的 IN 和 JOIN 之前"),a("strong",[e._v("必须加上 GLOBAL 关键字")]),e._v("，右表只会在接收查询请求的那个节点查询一次，并将其分发到其他节点上。如果不加 GLOBAL 关键字的话，左分布式表的每个节点都会单独发起一次对右表的查询，而右表又是分布式表，就导致右表一共会被查询 N² 次（N 是该分布式表的分片数量），这就是查询放大，会带来很大开销。")]),e._v(" "),a("h3",{attrs:{id:"使用字典表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用字典表"}},[e._v("#")]),e._v(" 使用字典表")]),e._v(" "),a("p",[e._v("将一些需要关联分析的业务创建成字典表进行 join 操作，前提是字典表不宜太大，因为字典表会常驻内存，"),a("a",{attrs:{href:"https://clickhouse.com/docs/en/sql-reference/dictionaries/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方地址"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"提前过滤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提前过滤"}},[e._v("#")]),e._v(" 提前过滤")]),e._v(" "),a("p",[e._v("通过增加逻辑过滤可以减少数据扫描，达到提高执行速度及降低内存消耗的目的")])])}),[],!1,null,null,null);s.default=n.exports}}]);