(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{494:function(s,a,e){"use strict";e.r(a);var n=e(41),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"_1-docker的感念-docker是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker的感念-docker是什么"}},[s._v("#")]),s._v(" 1.docker 的感念，docker 是什么")]),s._v(" "),e("p",[s._v("docker 分为三种感念：镜像 容器  仓库"),e("br"),s._v("\n镜像：类似于一个模板，里面包含了一些内容"),e("br"),s._v("\n容器：容器是一个镜像的实例，如果理解镜像为一个 class，那么容器就被理解为是 new class (); 是镜像的实例"),e("br"),s._v("\n仓库：就是下载镜像资源的地方。"),e("br"),s._v("\ndocker 容器不是虚拟机，容器可以说是一个进程，我们可以给容器分配内存。就像 windows 安装了虚拟机，可以给虚拟机分配内存大小，磁盘空间。")]),s._v(" "),e("h3",{attrs:{id:"_2-docker基础命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-docker基础命令"}},[s._v("#")]),s._v(" 2.docker 基础命令")]),s._v(" "),e("p",[s._v("搜索镜像，从 maven 仓库中查询")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker search mysql\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("列出当前系统存在的镜像")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker images\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("给镜像更换名称")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker tag imageId repository:tag\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("删除镜像 (-f 强制) 必须知道镜像的 imageId")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker rmi -f imageId\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("repository:tag (镜像的仓库源：镜像的标签) 拉取")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker pull repository:tag\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("运行一个容器")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('docker run -it  -d --name "xxx" -p port1:port2 -p port3:port4 repository:tag -v home/data:/data\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("run：运行容器命令")]),s._v(" "),e("li",[s._v("-it：运行后直接与终端交互，比如运行 jar 或其他应用的时候 查看他们的启动信息")]),s._v(" "),e("li",[s._v("-d：后台运行")]),s._v(" "),e("li",[s._v("-p port1:port2：端口映射 port1 (宿主机) port2 (容器) 容器的端口是可以重复的，所以容器和物理机的端口可以一致。rabbitmq 有两个端口 5672 和 15672 所以会用到双 -p repository:tag -> 如果不指定 tag，默认使用最新的")]),s._v(" "),e("li",[s._v('--name "xxx"：指定容器名称')]),s._v(" "),e("li",[s._v("-v /home/data:/data：/home/data (宿主机):/data (容器) 本地地址和容器地址产生挂载关系， 在容器内部该目录下，或者宿主机内部该目录下，修改文件、创建文件，彼此都会同步修改")]),s._v(" "),e("li",[s._v("--restart=always：总是运行，当重启 docker 后会自动运行起来")])]),s._v(" "),e("p",[s._v("查看运行的容器")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker ps \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("查看所有状态的容器")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker ps -a\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("检查容器内部信息")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker inspect 容器名称|容器前12位id\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("停止容器")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker stop 容器名称|容器前12位id\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("开启容器运行")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker start 容器名称\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("删除容器之前必须先停止容器运行")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker rm 容器名称\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("查看容器日志")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("dokcer logs -f 容器id\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("进入容器内部")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker exec -it mysql bash # 进入mysql内部\nmysql -uroot -p123456 # 登录mysql服务 注意这里mysql -uroot -p123456 是连起来的\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("把一个容器制作为一个新的镜像")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('docker commit \n -m="提交信息" \n -a="作者" \n 容器id\n 自定义镜像名称:[自定义标签名]\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("查看容器的信息")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker inspect 容器ID\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("对于没有私有仓库的要使服务器间共享一个 docker 镜像，可以先把某台机器上的进行先导出，然后其他服务器在导入即可")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 导出\ndocker save \n 镜像ID\n -o /本地路径/文件.tar  这句话意思导出到你宿主机的一个地址，文件名随便起后缀为tar，路径要提前建好\n\n# 导入\ndocker load < /上传文件的地址/导出的文件名.tar\n\n# 查看导入的镜像\ndocker images\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("容器之间共享，容器 2 共用 容器 1")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker tun -it \n  -- name 容器2\n  --volumes-from 容器1(容器1必须已启动)\n  镜像名称\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("查看制作镜像时叠加其他镜像的操作")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker history 镜像ID\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"_3-修改已经存在容器的端口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-修改已经存在容器的端口"}},[s._v("#")]),s._v(" 3. 修改已经存在容器的端口")]),s._v(" "),e("p",[s._v("1、停止容器 (docker stop d00254ce3af7)"),e("br"),s._v("\n 2、停止 docker 服务 (systemctl stop docker)"),e("br"),s._v("\n 3、修改这个容器的 hostconfig.json 文件中的端口（原帖有人提到，如果 config.v2.json 里面也记录了端口，也要修改）")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('cd /var/lib/docker/containers/d00254ce3af7*     #这里是CONTAINER ID\n\nvim hostconfig.json\n如果之前没有端口映射, 应该有这样的一段:\n"PortBindings":{}\n\n增加一个映射, 这样写:\n"PortBindings":{"8080/tcp":[{"HostIp":"","HostPort":"60000"}]}\n前一个数字是容器端口, 后一个是宿主机端口。将宿主机的60000端口映射到容器的8080端口\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("4、启动 docker 服务 (systemctl start docker)"),e("br"),s._v("\n 5、启动容器 (docker start d00254ce3af7)")]),s._v(" "),e("h3",{attrs:{id:"_4-制作镜像的基本命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-制作镜像的基本命令"}},[s._v("#")]),s._v(" 4. 制作镜像的基本命令")]),s._v(" "),e("h5",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),e("p",[e("img",{attrs:{src:"/assets/img/docker/img.png",alt:""}})]),s._v(" "),e("p",[s._v("Dockerfile 默认会把当前所在文件的上下问都发送给 Docker Server，最终制作成一个镜像，比如你得 DockerFile 在 linux 的根 (/) 目录，那么就会递归根目录下的所有文件，发送到 Docker Server 制作镜像，所以制作 Dockerfile 最好是在某一个地方新建文件夹去制作。制作过程都是依赖于一个个的镜像，所以会有缓存加速下次制作，如果不需要依赖缓存 可以在命令制作的最后面加  "),e("code",[s._v("--no-cache")])]),s._v(" "),e("p",[s._v(".dockerIgnore 是用来忽略哪些文件或目录不参与到制作镜像中")]),s._v(" "),e("p",[s._v("制作命令： "),e("code",[s._v("docker build -f /home/docker/nginx/Dockerfile .")]),s._v("  -f 用来指定 Dockerfile 所在的位置，一般会使用  "),e("code",[s._v("docker build -t nginx2 .")]),s._v("  -t 在当前目录制作镜像， "),e("code",[s._v("nginx2")]),s._v("  镜像的名字， "),e("code",[s._v(".")]),s._v("  代表 Dockerfile 就在当前目录")]),s._v(" "),e("h5",{attrs:{id:"命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[s._v("#")]),s._v(" 命令")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("指令")]),s._v(" "),e("th",[s._v("描述")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("FROM")]),s._v(" "),e("td",[s._v("构建的新镜像是基于哪个镜像。例如：FROM centos:6，第一个指令必须是 FROM")])]),s._v(" "),e("tr",[e("td",[s._v("MAINTAINER")]),s._v(" "),e("td",[s._v("镜像维护者姓名或邮箱地址。例如：MAINTAINER Mr.chen")])]),s._v(" "),e("tr",[e("td",[s._v("RUN")]),s._v(" "),e("td",[s._v('构建镜像时运行的 Shell 命令。例如：RUN ["yum","install","httpd"] 也可以直接 RUN yum install httpd  或者 RUN yum install httpd')])]),s._v(" "),e("tr",[e("td",[s._v("CMD")]),s._v(" "),e("td",[e("code",[s._v("容器运行时执行的Shell命令")]),s._v(' （编写的 dockerfile 中多个 cmd 都会执行，但默认保留最后一个命令，如果 docker run 运行时传递 command，会覆盖 cmd 的保留命令），启动容器会执行 CMD 的保留命令。例如：CMD ["-c","/start.sh"] 也可以是 CMD echo \'hello docker\'')])]),s._v(" "),e("tr",[e("td",[s._v("EXPOSE")]),s._v(" "),e("td",[s._v("声明容器运行的服务端口。例如：EXPOSE 80 443，但是默认都是 tcp 协议，如果想要暴漏 udp 协议，则是  EXPOSE 80/udp ，注意只能是 tcp 或 udp")])]),s._v(" "),e("tr",[e("td",[s._v("ENV")]),s._v(" "),e("td",[s._v("设置容器内的环境变量。例如：ENV MYSQL_ROOT_PASSWORD 123456")])]),s._v(" "),e("tr",[e("td",[s._v("ADD")]),s._v(" "),e("td",[s._v('将宿主机目录下的文件拷贝进镜像且 ADD 命令会自动处理 URL 和解压 tar 包 例如：ADD ["src","dest"] 或者 ADD '),e("a",{attrs:{href:"https://xxx.com/html.tar.gz",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://xxx.com/html.tar.gz"),e("OutboundLink")],1),s._v(" /var/www/html  或者：ADD html.tar.gz/var/www/html")])]),s._v(" "),e("tr",[e("td",[s._v("COPY")]),s._v(" "),e("td",[s._v("拷贝文件或目录到镜像（不能自动解压缩）。例如：COPY ./start.sh/start.sh")])]),s._v(" "),e("tr",[e("td",[s._v("ENTRYPOINT")]),s._v(" "),e("td",[s._v('运行容器时执行的 Shell 命令（不能被运行时传递的参数覆盖)，比 CMD 牛皮一些。例如：ENTRYPOINT ["/bin/bash","-c","/start.sh"] 或者 ENTRYPOINT /bin/bash -c "/start.sh"')])]),s._v(" "),e("tr",[e("td",[s._v("VOLUME")]),s._v(" "),e("td",[s._v('指定容器挂载点到宿主机自动生成的目录或其他容器 例如：VOLUME ["/var/lib/mysql"]')])]),s._v(" "),e("tr",[e("td",[s._v("USER")]),s._v(" "),e("td",[s._v("为 RUN，CMD 和 ENTRYPOINT 执行命令指定运行用户  例如：USER Mr_chen")])]),s._v(" "),e("tr",[e("td",[s._v("WORKDIR")]),s._v(" "),e("td",[s._v("指定在创建容器后，终端默认登录进来的工作目录，一个落脚点  例如：WORKDIR /data")])]),s._v(" "),e("tr",[e("td",[s._v("HEALTHCHECK")]),s._v(" "),e("td",[s._v("健康检查。例如：HEALTHCHECK --interval=5m --timeout=3s --retries=3 CMD curl -f "),e("a",{attrs:{href:"http://localhost/",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://localhost/"),e("OutboundLink")],1),s._v("  exit 1")])]),s._v(" "),e("tr",[e("td",[s._v("ARG")]),s._v(" "),e("td",[s._v("在构建镜像时指定一些参数。例如：ARG user")])]),s._v(" "),e("tr",[e("td",[s._v("ONBUILD")]),s._v(" "),e("td",[s._v("当镜像被继承后触发在 ONBUILD 里写的命令，继承者直接使用 FROM 命令继承当前镜像的名称即可，在 build 的时候触发")])])])]),s._v(" "),e("h3",{attrs:{id:"简单镜像制作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简单镜像制作"}},[s._v("#")]),s._v(" 简单镜像制作")]),s._v(" "),e("p",[s._v("编写 dockerfile")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('#volume test\n# FROM 下载\nFROM centos\n# 在根目录下新建两个目录，该文件会默挂载到宿主机的某个目录下，对此的创建文件删除等都会同步，\n# 可以通过 docker inspect 容器ID 来查看对应的文件地址\nVOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]\n# 输出一句成功\nCMD echo "finished,-------------success1"\nCMD /bin/bash\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("编译")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker build\n -f dockerfile的文件路径 \n -t 命名空间/镜像名称(如：test/centos)，整体也可以理解为镜像名称\n . 点代表当前目录\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("运行")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker run -it 镜像名称\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("blockquote",[e("p",[s._v("如果出现 cannot open directory .: Permission denied 在运行的时候 --Privileged=true"),e("br"),s._v("\ndocker run -it 镜像名称  --Privileged=true")])]),s._v(" "),e("h3",{attrs:{id:"docker-构建nginx镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-构建nginx镜像"}},[s._v("#")]),s._v(" docker 构建 nginx 镜像")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('#首先开启ipv4转发\necho "net.ipv4.ip_forward=1" >> /etc/sysctl.conf \nsysctl -p\nnet.ipv4.ip_forward = 1\n\n#创建nginx的镜像目录\nmkdir -p dockerfile/lib/centos/nginx\ncd dockerfile/lib/centos/nginx\n\n#准备Dockerfile文件\nvim Dockerfile\nFROM centos:7       #构建的新镜像是基于哪个镜像(构建的nginx是基于centos7构建的,依赖centos7的系统支持,如果没有镜像自动下载)\nMAINTAINER wk       #镜像制作人     \nRUN yum install -y gcc gcc-c++ make openssl-devel pcre-devel      #构建镜像时运行shell命令,yum安装nginx的依赖包\nADD nginx-1.12.1.tar.gz /tmp          #拷贝文件或目录到镜像下,遇到压缩文件自动解压缩\nRUN cd /tmp/nginx-1.12.1 && \\         #运行shell命令编译安装nginx,make -j 给与2个线程编译 \n    ./configure --prefix=/usr/local/nginx && \\\n    make -j 2 && \\\n    make install\nRUN rm -rf /tmp/nginx-1.12.1* && yum clean all　　　　　　#删除nginx源码包和清空yum缓存,使容器最轻量化\nCOPY nginx.conf /usr/local/nginx/conf                   #拷贝文件或目录到镜像 \nWORKDIR /usr/local/nginx　　　　　　　　　　　　　　　　　　　#为RUN，CMD，ENTRYPOINT，COPY和ADD设置工作目录（指定进入容器中默认被切换的目录）。\nEXPOSE 80　　　　　　　　　　　　　　　　　　　　　　　　　　　　#声明容器的端口号\nCMD ["./sbin/nginx", "-g", "daemon off;"]　　　　　　　　　#运行容器时执行的shell命令　-g daemon off 不以守护进程的方式开启nginx,即不以后台运行的方式开启nginx\n\n#将事先准备好的nginx-1.12.1.tar.gz和nginx.conf配置文件拷贝到当前目录下\nls\nDockerfile  nginx-1.12.1.tar.gz  nginx.conf\n\n#build基于nginx的docker镜像\ndocker build -t nginx:1 .\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br")])]),e("h3",{attrs:{id:"docker-构建java环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-构建java环境"}},[s._v("#")]),s._v(" docker 构建 java 环境")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('#创建java镜像构建存储目录\nmkdir -p dockerfile/lib/centos/tomcat\ncd dockerfile/lib/centos/tomcat\n\n#将所需软件包拷贝到当前目录下\nls\napache-tomcat-8.0.46.tar.gz  Dockerfile  jdk-8u45-linux-x64.tar.gz  server.xml\n\n#筹备Dockerfile\nvim Dockerfile\nFROM centos:7           \nMAINTAINER wk\n\nADD jdk-8u45-linux-x64.tar.gz /usr/local        #创建javaJDK环境\nENV JAVA_HOME /usr/local/jdk1.8.0_45　　　　　　　#强行生成一个环境变量\n\nADD apache-tomcat-8.0.46.tar.gz /usr/local　　　　#解压tomcat\nCOPY server.xml /usr/local/apache-tomcat-8.0.46/conf　　　#复制配置文件\n\nRUN rm -f /usr/local/*.tar.gz　　　　　　　　　　　　#删除安装包 容器轻量化\n\nWORKDIR /usr/local/apache-tomcat-8.0.46　　　　　　#工作目录  进入容器所在的目录\nEXPOSE 8080　　　　　　　　　　　　　　　　　　　　　　 #映射端口\nENTRYPOINT ["./bin/catalina.sh", "run"]　　　　　　#用catalina。sh run前台启动tomcat\n\n#build基于tomcat的镜像\ndocker build -t tomcat:1 .\n\n#创建网页挂载目录\nmkdir -p /app\n\n#启动tomcat的容器进程\ndocker run -dit --name=tomcat -p 8080:8080 --network lnmp --mount type=bind,src=/app/,dst=/usr/local/apache-tomcat-8.0.46/webapps tomcat:1\n\ndocker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n15eca19688ca        tomcat:1            "./bin/catalina.sh r…"   17 seconds ago      Up 16 seconds       0.0.0.0:8080->8080/tcp   tomcat\n7ce4d14cf756        nginx:1             "./sbin/nginx -g \'da…"   2 hours ago         Up About an hour    0.0.0.0:8888->80/tcp     lnmp-nginx\n5b49fc160f9e        php:1               "./sbin/php-fpm -c /…"   2 hours ago         Up About an hour    9000/tcp                 lnmp_php\n\n#创建网站测试页\nmkdir /app/ROOT\nvim /app/ROOT/index.html \nddddddddddddddddddd\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br")])]),e("h1",{attrs:{id:"docker-使用阿里云仓库或自建仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-使用阿里云仓库或自建仓库"}},[s._v("#")]),s._v(" Docker 使用阿里云仓库或自建仓库")]),s._v(" "),e("h3",{attrs:{id:"阿里云仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阿里云仓库"}},[s._v("#")]),s._v(" 阿里云仓库")]),s._v(" "),e("ol",[e("li",[s._v("先登录阿里云镜像服务，"),e("a",{attrs:{href:"https://cr.console.aliyun.com/cn-shanghai/instances",target:"_blank",rel:"noopener noreferrer"}},[s._v("地址"),e("OutboundLink")],1)]),s._v(" "),e("li",[s._v("创建个人或企业实例")]),s._v(" "),e("li",[s._v("创建镜像仓库，这个仓库可以建多个，看自己")]),s._v(" "),e("li",[s._v("创建完毕之后可以根据阿里云提供的步骤进行推送或拉取")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13859779-d9ca5be947376d88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),s._v(" "),e("p",[s._v("如果我们只是想用阿里云的镜像加速器，可以找到如下图操作即可。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13859779-c106e7324d2a901b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),s._v(" "),e("h3",{attrs:{id:"自建仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自建仓库"}},[s._v("#")]),s._v(" 自建仓库")]),s._v(" "),e("ol",[e("li",[s._v("拉取仓库镜像")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker pull registry\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("运行镜像")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker run -d -v /edc/images/registry:/var/lib/registry \n-p 5000:5000 \n--restart=always \n--name xdp-registry registry\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ol",{attrs:{start:"3"}},[e("li",[s._v("查看镜像信息")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("curl http://127.0.0.1:5000/v2/_catalog\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);