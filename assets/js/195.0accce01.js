(window.webpackJsonp=window.webpackJsonp||[]).push([[195],{671:function(s,t,a){"use strict";a.r(t);var r=a(41),n=Object(r.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[s._v("#")]),s._v(" 背景")]),s._v(" "),a("p",[s._v("规定要求要显示 6 张图，1 长图的数据量在 "),a("code",[s._v("200*50")]),s._v(" ，需要很流畅，在 "),a("code",[s._v("100ms")]),s._v("  以内一帧，比较丝滑的那种，但是实际使用下来发现一帧渲染会在 "),a("code",[s._v("200-500ms")]),s._v(" ，实际做不到很丝滑，于是项目现在每张图定位 1s 一帧，但是最终发现，6 张图若同时展示数据，页面其他动画会很卡。"),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/1/img.png",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"调研"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调研"}},[s._v("#")]),s._v(" 调研")]),s._v(" "),a("p",[s._v("我是用的是 echarts 内置的图，曾怀疑 echarts 因为其他兼容或 API，所以没有原生的快，于是我调研了 canvas 以及 threejs，发现其实效果是一样的，依然很卡顿。所以我就不打算换了，继续使用 echarts 想办法优化。")]),s._v(" "),a("h3",{attrs:{id:"检查性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查性能"}},[s._v("#")]),s._v(" 检查性能")]),s._v(" "),a("p",[s._v("使用 edge 检查工具，查看 20s 内数据渲染过程中的性能")]),s._v(" "),a("h3",{attrs:{id:"总体分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总体分析"}},[s._v("#")]),s._v(" 总体分析")]),s._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/front/2/img_1.png",alt:""}}),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_2.png",alt:""}}),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_3.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"一帧分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一帧分析"}},[s._v("#")]),s._v(" 一帧分析")]),s._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/front/2/img_5.png",alt:""}}),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_6.png",alt:""}}),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_4.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"无数据分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无数据分析"}},[s._v("#")]),s._v(" 无数据分析")]),s._v(" "),a("p",[s._v("我把 echarts 的数据渲染关闭，但但只看 echarts 的图渲染的性能")]),s._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/front/2/img_7.png",alt:""}}),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_8.png",alt:""}}),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_9.png",alt:""}}),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_10.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"少数据分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#少数据分析"}},[s._v("#")]),s._v(" 少数据分析")]),s._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/front/2/img_11.png",alt:""}}),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_12.png",alt:""}}),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_13.png",alt:""}}),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_14.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"分析结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分析结果"}},[s._v("#")]),s._v(" 分析结果")]),s._v(" "),a("p",[s._v("再显示一张有数据的图时，可以看出 GPU 并不耗时，主要是 js 脚本执行耗时，js 脚本应该包括了柱子的生成，数据的处理等。但不渲染数据只渲染图的时候可以发现，只有 echarts 初次渲染，以及定时器会消耗 js 耗时，那么基本可以断定还是数据量的问题导致")]),s._v(" "),a("h2",{attrs:{id:"方案及测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方案及测试"}},[s._v("#")]),s._v(" 方案及测试")]),s._v(" "),a("h3",{attrs:{id:"修改echarts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改echarts"}},[s._v("#")]),s._v(" 修改 echarts")]),s._v(" "),a("ul",[a("li",[s._v("setOption 更改，跟性能无关，单纯的规范优化"),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不推荐写法，目前用于测试，getOption 获取的是已经合并过默认值了的，所以在修改了某些配置项后会导致原本是根据这些配置项值去设置的默认值失效")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" oldOption "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" chart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getOption")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// oldOption.series[0].data = nv.prps")]),s._v("\nchart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setOption")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldOption"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 推荐")]),s._v("\nchart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setOption")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("series")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("data")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" nv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prps\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])])]),s._v(" "),a("li",[s._v("有效数据替换：后端检查两个二维数组，在 [x,y,z] 中，过滤 x y 相同，z+-5 的数据，也就是找相同坐标差异过大的数据，推送前端替换已有二维数组里的相同 x,y 数据并渲染。测试结果并不理想，脚本时间反而变的更长，也对应了那句，不要在前端做数据处理。"),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_16.png",alt:""}}),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_15.png",alt:""}})]),s._v(" "),a("li",[s._v("定向定位推送数据合理规划数据结构：6 张图我都是用 websocket 推送的，除了所看到的一个 websocket 负责 6 张图的数据，其中一帧数据的结构包含多种类型的图，为的是切换后能立即看到效果。"),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/front/2/img_17.png",alt:""}}),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("后端方案：\n  1. websocket改为sse\n  2. 6张图6个id，各自请求sse接口\n  3. 根据事件推送对应显示图的数据\n  4. 增加帧率减少数据，从左往右顺时针推送，前端使用append追加，达到容量后替换数据\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),s._v("结论：改为 sse 还没 ws 稳定，但各自一个 id 开一个 ws 会话，虽然对服务器造成一定负担，但明显 ws 并没有并发错误，可渲染依然慢，所以跟后端关系不大 纯前端问题。但又有个新问题就是，后端推的块，前端处理慢，会造成浏览器缓存数据，直到因浏览器缓存饱满 ws 报错，所以需要注意后端推送频次。(想改为前端消费一帧，请求 ws，然后 ws 推，但效率会更慢，最好的方案测好前端帧率，固定推，但各个机器性能不一样依然会有问题)")])])])}),[],!1,null,null,null);t.default=n.exports}}]);