(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{636:function(s,a,t){"use strict";t.r(a);var n=t(41),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("blockquote",[t("p",[s._v("本文及后续所有文章都以 1.8.0 做为版本讲解和入门学习")])]),s._v(" "),t("h2",{attrs:{id:"failover-sink-processor-故障恢复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#failover-sink-processor-故障恢复"}},[s._v("#")]),s._v(" Failover Sink Processor 故障恢复")]),s._v(" "),t("p",[s._v("Sink Group 允许用户将多个 Sink 组合成一个实体。Flume Sink Process 可以通过切换组内 Sink 用来实现负载均衡的效果，或在一个 Sink 故障时切换到另一个 Sink。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/flume/7/img.png",alt:""}})]),s._v(" "),t("p",[s._v("Failover Sink Processor 维护一个 sink 们的优先表。确保只要一个可用的，事件就可以被处理。失败处理原则是，为失效的 sink 指定一个冷却时间，在冷却时间达到后再重新使用，这里会有个问题就是重新启动的 flume 和备用的 flume 都会接收到信息。当 node104 宕机不在工作，node113 就会被执行工作。")]),s._v(" "),t("p",[s._v("sink 们可以被配置一个优先级，数字越大优先级越高。")]),s._v(" "),t("p",[s._v("如果 sink 们发送时间失败，则下一个最高优先级的 sink 奖会尝试接着发送事件。")]),s._v(" "),t("p",[s._v("如果没有指定优先级，则优先级顺序取决于 sink 们的配置顺序，先配置的默认优先级高于后配置的。")]),s._v(" "),t("p",[s._v("在配置过程中，设置一个 group processor，并且为每个 sink 指定一个优先级，优先级必须是唯一的。")]),s._v(" "),t("h3",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),t("div",{staticClass:"language-properties line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a1 代表一个flume 给每个组件匿名")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sources")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("r1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.channels")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("c1 c2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("s1 s2")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置故障恢复")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinkgroups")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("g1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinkgroups.g1.sinks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("s1 s2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinkgroups.g1.processor.type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("failover")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinkgroups.g1.processor.priority.s1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinkgroups.g1.processor.priority.s2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("10")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定source 的数据来源以及堆外开放的端口")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sources.r1.type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("netcat")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sources.r1.bind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("node113")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sources.r1.port")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("8888")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定a1的channels基于内存")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.channels.c1.type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("memory")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.channels.c2.type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("memory")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定a1的sinks 输出到控制台")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s1.type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("avro")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s1.hostname")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("node103")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s1.port")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("8888")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s2.type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("avro")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s2.hostname")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("node104")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s2.port")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("8888")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 绑定a1 sources和channle 的关系")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sources.r1.channels")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("c1 c2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 绑定a1 sinks 和 channel 的关系")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s1.channel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("c1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s2.channel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("c2")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br")])]),t("h2",{attrs:{id:"load-balancing-sink-processor-负载均衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#load-balancing-sink-processor-负载均衡"}},[s._v("#")]),s._v(" Load balancing Sink Processor 负载均衡")]),s._v(" "),t("p",[s._v("Load balancing Sink Processor 提供了再多个 sink 之间实现负载均衡的能力。他维护了一个活动 sink 的索引列表。它支持轮询或所及方式的负载均衡，默认值是轮询方式，可以通过篇日志指定，也可以通过实现 AbstractSinkSelector 接口实现自定义的选择机制。")]),s._v(" "),t("p",[s._v("负载均衡的机制是通过 单个 channel 轮询或随机发送给某个 sink。")]),s._v(" "),t("h3",{attrs:{id:"配置-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-2"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),t("div",{staticClass:"language-properties line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a1 代表一个flume 给每个组件匿名")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sources")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("r1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.channels")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("c1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("s1 s2")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置负载")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinkgroups")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("g1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinkgroups.g1.sinks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("s1 s2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinkgroups.g1.processor.type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("load_balance")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinkgroups.g1.processor.selector")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("round_robin")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定source 的数据来源以及堆外开放的端口")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sources.r1.type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("netcat")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sources.r1.bind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("node113")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sources.r1.port")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("8888")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定a1的channels基于内存")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.channels.c1.type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("memory")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定a1的sinks 输出到控制台")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s1.type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("avro")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s1.hostname")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("node103")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s1.port")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("8888")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s2.type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("avro")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s2.hostname")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("node104")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s2.port")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("8888")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 绑定a1 sources和channle 的关系")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sources.r1.channels")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("c1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 绑定a1 sinks 和 channel 的关系")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s1.channel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("c1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("a1.sinks.s2.channel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("c1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br")])]),t("h2",{attrs:{id:"flume-内存通道事务机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flume-内存通道事务机制"}},[s._v("#")]),s._v(" flume 内存通道事务机制")]),s._v(" "),t("p",[s._v("flume 的事务机制与可靠性保证的实现，最核心的组件是 channel，如果没有 channel 组件，而仅靠 source 与 sink 组件是无从谈起的。")]),s._v(" "),t("h3",{attrs:{id:"put事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#put事务"}},[s._v("#")]),s._v(" put 事务")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/flume/7/img_1.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"put事务流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#put事务流程"}},[s._v("#")]),s._v(" put 事务流程")]),s._v(" "),t("ul",[t("li",[s._v("doput 将批数据先写入临时缓冲区 putList（LinkedBlockingDequeue）链表结构组成的双向阻塞队列。")]),s._v(" "),t("li",[s._v("doCommit 检查 memoryChannel 内存队列是否足够合并")]),s._v(" "),t("li",[s._v("doRollback memoryChannel 内存队列空间不足，回滚，等待内存通道容量满足合并")])]),s._v(" "),t("p",[s._v("putList 就是一个临时的缓冲区，数据会先 put 到 putList，最后由 commit 方法检查 memoryChannel 是否有足够的缓冲区，有则合并到 memoryChannel  的队列。")]),s._v(" "),t("h3",{attrs:{id:"take事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#take事务"}},[s._v("#")]),s._v(" take 事务")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/flume/7/img_2.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"take-事务流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#take-事务流程"}},[s._v("#")]),s._v(" take 事务流程")]),s._v(" "),t("ul",[t("li",[s._v("doTake 先将数据发往临时缓冲区 takeList（LinkedBlockingDequeue）将输出发送到下一个节点")]),s._v(" "),t("li",[s._v("doCimmit 如果数据全部发送成功，则清除临时缓冲区 takeList")]),s._v(" "),t("li",[s._v("doRollback 数据发送过程中出现异常，rollback 将临时缓冲区 takeList 中的数据归还给 memoryChannel")]),s._v(" "),t("li",[s._v("bucketWriter 类 会监听数据的发送成功或失败，并响应给 takeList")])])])}),[],!1,null,null,null);a.default=e.exports}}]);