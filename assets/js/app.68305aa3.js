(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[]]);!function(n){function e(e){for(var r,i,s=e[0],c=e[1],l=e[2],p=0,d=[];p<s.length;p++)i=s[p],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&d.push(a[i][0]),a[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(n[r]=c[r]);for(u&&u(e);d.length;)d.shift()();return o.push.apply(o,l||[]),t()}function t(){for(var n,e=0;e<o.length;e++){for(var t=o[e],r=!0,s=1;s<t.length;s++){var c=t[s];0!==a[c]&&(r=!1)}r&&(o.splice(e--,1),n=i(i.s=t[0]))}return n}var r={},a={2:0},o=[];function i(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.e=function(n){var e=[],t=a[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=a[n]=[e,r]}));e.push(t[2]=r);var o,s=document.createElement("script");s.charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.src=function(n){return i.p+"assets/js/"+({3:"vendors~aplayer",4:"vendors~artplayer",5:"vendors~dash",6:"vendors~dplayer",7:"vendors~hls",8:"vendors~mpegts",9:"vendors~shaka-player",10:"vendors~webtorrent"}[n]||n)+"."+{0:"e0c47f53",3:"e8507ad6",4:"66bb087d",5:"0bbb404d",6:"78936917",7:"1bdfaf9f",8:"97ee1f4b",9:"301276db",10:"5c2abfbd",11:"5871899e",12:"e08d9769",13:"fb76bc65",14:"53b53f71",15:"738c619e",16:"b7269f07",17:"358fbd0d",18:"56612b72",19:"90fea329",20:"02702658",21:"072b1546",22:"244801d1",23:"ac26616b",24:"107cc536",25:"e581e078",26:"79644b08",27:"257350d2",28:"158ce3cc",29:"e48e3167",30:"d92a193a",31:"28966785",32:"822c907a",33:"9c50b5ad",34:"22fbdb31",35:"e55a335e",36:"3e06ce4e",37:"8fe50a6c",38:"964add04",39:"bc898e3d"}[n]+".js"}(n);var c=new Error;o=function(e){s.onerror=s.onload=null,clearTimeout(l);var t=a[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;c.message="Loading chunk "+n+" failed.\n("+r+": "+o+")",c.name="ChunkLoadError",c.type=r,c.request=o,t[1](c)}a[n]=void 0}};var l=setTimeout((function(){o({type:"timeout",target:s})}),12e4);s.onerror=s.onload=o,document.head.appendChild(s)}return Promise.all(e)},i.m=n,i.c=r,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)i.d(t,r,function(e){return n[e]}.bind(null,r));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="/",i.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=e,s=s.slice();for(var l=0;l<s.length;l++)e(s[l]);var u=c;o.push([240,1]),t()}([function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e,t){var r=t(68),a=Function.prototype,o=a.bind,i=a.call,s=r&&o.bind(i,i);n.exports=r?function(n){return n&&s(n)}:function(n){return n&&function(){return i.apply(n,arguments)}}},function(n,e,t){var r=t(0),a=t(39).f,o=t(32),i=t(15),s=t(118),c=t(125),l=t(93);n.exports=function(n,e){var t,u,p,d,f,m=n.target,h=n.global,v=n.stat;if(t=h?r:v?r[m]||s(m,{}):(r[m]||{}).prototype)for(u in e){if(d=e[u],p=n.noTargetGet?(f=a(t,u))&&f.value:t[u],!l(h?u:m+(v?".":"#")+u,n.forced)&&void 0!==p){if(typeof d==typeof p)continue;c(d,p)}(n.sham||p&&p.sham)&&o(d,"sham",!0),i(t,u,d,n)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(5);function r(n,e,t,r,a,o,i){try{var s=n[o](i),c=s.value}catch(n){return void t(n)}s.done?e(c):Promise.resolve(c).then(r,a)}function a(n){return function(){var e=this,t=arguments;return new Promise((function(a,o){var i=n.apply(e,t);function s(n){r(i,a,o,s,c,"next",n)}function c(n){r(i,a,o,s,c,"throw",n)}s(void 0)}))}}},function(n,e,t){var r=t(128),a=t(15),o=t(256);r||a(Object.prototype,"toString",o,{unsafe:!0})},function(n,e,t){var r=t(0),a=t(84),o=t(12),i=t(85),s=t(119),c=t(159),l=a("wks"),u=r.Symbol,p=u&&u.for,d=c?u:u&&u.withoutSetter||i;n.exports=function(n){if(!o(l,n)||!s&&"string"!=typeof l[n]){var e="Symbol."+n;s&&o(u,n)?l[n]=u[n]:l[n]=c&&p?p(e):d(e)}return l[n]}},function(n,e){n.exports=function(n){return"function"==typeof n}},function(n,e,t){var r=t(3);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var r=t(0),a=t(10),o=r.String,i=r.TypeError;n.exports=function(n){if(a(n))return n;throw i(o(n)+" is not an object")}},function(n,e,t){var r=t(7);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(0),a=t(82),o=r.String;n.exports=function(n){if("Symbol"===a(n))throw TypeError("Cannot convert a Symbol value to a string");return o(n)}},function(n,e,t){var r=t(1),a=t(21),o=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return o(a(n),e)}},function(n,e,t){var r=t(0),a=t(8),o=t(161),i=t(160),s=t(9),c=t(87),l=r.TypeError,u=Object.defineProperty,p=Object.getOwnPropertyDescriptor;e.f=a?i?function(n,e,t){if(s(n),e=c(e),s(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=p(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return u(n,e,t)}:u:function(n,e,t){if(s(n),e=c(e),s(t),o)try{return u(n,e,t)}catch(n){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(68),a=Function.prototype.call;n.exports=r?a.bind(a):function(){return a.apply(a,arguments)}},function(n,e,t){var r=t(0),a=t(7),o=t(12),i=t(32),s=t(118),c=t(92),l=t(35),u=t(81).CONFIGURABLE,p=l.get,d=l.enforce,f=String(String).split("String");(n.exports=function(n,e,t,c){var l,p=!!c&&!!c.unsafe,m=!!c&&!!c.enumerable,h=!!c&&!!c.noTargetGet,v=c&&void 0!==c.name?c.name:e;a(t)&&("Symbol("===String(v).slice(0,7)&&(v="["+String(v).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!o(t,"name")||u&&t.name!==v)&&i(t,"name",v),(l=d(t)).source||(l.source=f.join("string"==typeof v?v:""))),n!==r?(p?!h&&n[e]&&(m=!0):delete n[e],m?n[e]=t:i(n,e,t)):m?n[e]=t:s(e,t)})(Function.prototype,"toString",(function(){return a(this)&&p(this).source||c(this)}))},function(n,e,t){"use strict";var r=t(179).charAt,a=t(11),o=t(35),i=t(165),s=o.set,c=o.getterFor("String Iterator");i(String,"String",(function(n){s(this,{type:"String Iterator",string:a(n),index:0})}),(function(){var n,e=c(this),t=e.string,a=e.index;return a>=t.length?{value:void 0,done:!0}:(n=r(t,a),e.index+=n.length,{value:n,done:!1})}))},function(n,e,t){"use strict";t.d(e,"a",(function(){return r}));t(105);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}},function(n,e,t){var r=t(0),a=t(180),o=t(181),i=t(152),s=t(32),c=t(6),l=c("iterator"),u=c("toStringTag"),p=i.values,d=function(n,e){if(n){if(n[l]!==p)try{s(n,l,p)}catch(e){n[l]=p}if(n[u]||s(n,u,e),a[e])for(var t in i)if(n[t]!==i[t])try{s(n,t,i[t])}catch(e){n[t]=i[t]}}};for(var f in a)d(r[f]&&r[f].prototype,f);d(o,"DOMTokenList")},function(n,e,t){var r=t(0).TypeError;n.exports=function(n){if(null==n)throw r("Can't call method on "+n);return n}},function(n,e,t){var r=function(n){"use strict";var e=Object.prototype,t=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",i=r.toStringTag||"@@toStringTag";function s(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(n){s=function(n,e,t){return n[e]=t}}function c(n,e,t,r){var a=e&&e.prototype instanceof p?e:p,o=Object.create(a.prototype),i=new j(r||[]);return o._invoke=function(n,e,t){var r="suspendedStart";return function(a,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw o;return O()}for(t.method=a,t.arg=o;;){var i=t.delegate;if(i){var s=x(i,t);if(s){if(s===u)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var c=l(n,e,t);if("normal"===c.type){if(r=t.done?"completed":"suspendedYield",c.arg===u)continue;return{value:c.arg,done:t.done}}"throw"===c.type&&(r="completed",t.method="throw",t.arg=c.arg)}}}(n,t,i),o}function l(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=c;var u={};function p(){}function d(){}function f(){}var m={};s(m,a,(function(){return this}));var h=Object.getPrototypeOf,v=h&&h(h(S([])));v&&v!==e&&t.call(v,a)&&(m=v);var g=f.prototype=p.prototype=Object.create(m);function b(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function y(n,e){var r;this._invoke=function(a,o){function i(){return new e((function(r,i){!function r(a,o,i,s){var c=l(n[a],n,o);if("throw"!==c.type){var u=c.arg,p=u.value;return p&&"object"==typeof p&&t.call(p,"__await")?e.resolve(p.__await).then((function(n){r("next",n,i,s)}),(function(n){r("throw",n,i,s)})):e.resolve(p).then((function(n){u.value=n,i(u)}),(function(n){return r("throw",n,i,s)}))}s(c.arg)}(a,o,r,i)}))}return r=r?r.then(i,i):i()}}function x(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,x(n,e),"throw"===e.method))return u;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=l(t,n.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,u;var a=r.arg;return a?a.done?(e[n.resultName]=a.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,u):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,u)}function w(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function k(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function j(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(w,this),this.reset(!0)}function S(n){if(n){var e=n[a];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,o=function e(){for(;++r<n.length;)if(t.call(n,r))return e.value=n[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return d.prototype=f,s(g,"constructor",f),s(f,"constructor",d),d.displayName=s(f,i,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===d||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,f):(n.__proto__=f,s(n,i,"GeneratorFunction")),n.prototype=Object.create(g),n},n.awrap=function(n){return{__await:n}},b(y.prototype),s(y.prototype,o,(function(){return this})),n.AsyncIterator=y,n.async=function(e,t,r,a,o){void 0===o&&(o=Promise);var i=new y(c(e,t,r,a),o);return n.isGeneratorFunction(t)?i:i.next().then((function(n){return n.done?n.value:i.next()}))},b(g),s(g,i,"Generator"),s(g,a,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=S,j.prototype={constructor:j,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function r(t,r){return i.type="throw",i.arg=n,e.next=t,r&&(e.method="next",e.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],i=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var s=t.call(o,"catchLoc"),c=t.call(o,"finallyLoc");if(s&&c){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(n,e){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&t.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===n||"continue"===n)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=n,i.arg=e,o?(this.method="next",this.next=o.finallyLoc,u):this.complete(i)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),u},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),k(t),u}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var r=t.completion;if("throw"===r.type){var a=r.arg;k(t)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:S(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),u}},n}(n.exports);try{regeneratorRuntime=r}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(n,e,t){var r=t(0),a=t(19),o=r.Object;n.exports=function(n){return o(a(n))}},function(n,e,t){var r=t(0),a=t(7),o=function(n){return a(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?o(r[n]):r[n]&&r[n][e]}},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(46),t(74),t(34),t(5),t(383),t(26),t(27),t(182),t(384),t(105);var r=t(17);function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){Object(r.a)(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}},function(n,e,t){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(n){for(var e,t=1,r=arguments.length;t<r;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n}).apply(this,arguments)},a=this&&this.__read||function(n,e){var t="function"==typeof Symbol&&n[Symbol.iterator];if(!t)return n;var r,a,o=t.call(n),i=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(n){a={error:n}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(n,e,t){if(t||2===arguments.length)for(var r,a=0,o=e.length;a<o;a++)!r&&a in e||(r||(r=Array.prototype.slice.call(e,0,a)),r[a]=e[a]);return n.concat(r||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});var i=function(n){if("object"==typeof n&&null!==n){if("function"==typeof Object.getPrototypeOf){var e=Object.getPrototypeOf(n);return e===Object.prototype||null===e}return"[object Object]"===Object.prototype.toString.call(n)}return!1},s=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return n.reduce((function(n,e){return Object.keys(e).forEach((function(t){Array.isArray(n[t])&&Array.isArray(e[t])?n[t]=s.options.mergeArrays?Array.from(new Set(n[t].concat(e[t]))):e[t]:i(n[t])&&i(e[t])?n[t]=s(n[t],e[t]):n[t]=e[t]})),n}),{})},c={mergeArrays:!0};s.options=c,s.withOptions=function(n){for(var e=[],t=1;t<arguments.length;t++)e[t-1]=arguments[t];s.options=r({mergeArrays:!0},n);var i=s.apply(void 0,o([],a(e),!1));return s.options=c,i},e.default=s},function(n,e,t){var r=t(67),a=t(19);n.exports=function(n){return r(a(n))}},function(n,e,t){"use strict";var r=t(2),a=t(184);r({target:"Array",proto:!0,forced:[].forEach!=a},{forEach:a})},function(n,e,t){var r=t(0),a=t(180),o=t(181),i=t(184),s=t(32),c=function(n){if(n&&n.forEach!==i)try{s(n,"forEach",i)}catch(e){n.forEach=i}};for(var l in a)a[l]&&c(r[l]&&r[l].prototype);c(o)},function(n,e,t){"use strict";var r=t(2),a=t(98);r({target:"RegExp",proto:!0,forced:/./.exec!==a},{exec:a})},function(n,e){n.exports=!1},function(n,e,t){var r=t(15),a=t(272),o=Error.prototype;o.toString!==a&&r(o,"toString",a)},function(n,e,t){var r=t(1),a=r({}.toString),o=r("".slice);n.exports=function(n){return o(a(n),8,-1)}},function(n,e,t){var r=t(8),a=t(13),o=t(56);n.exports=r?function(n,e,t){return a.f(n,e,o(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(47);n.exports=function(n){return r(n.length)}},function(n,e,t){"use strict";var r=t(2),a=t(57).filter;r({target:"Array",proto:!0,forced:!t(96)("filter")},{filter:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r,a,o,i=t(242),s=t(0),c=t(1),l=t(10),u=t(32),p=t(12),d=t(117),f=t(91),m=t(69),h=s.TypeError,v=s.WeakMap;if(i||d.state){var g=d.state||(d.state=new v),b=c(g.get),y=c(g.has),x=c(g.set);r=function(n,e){if(y(g,n))throw new h("Object already initialized");return e.facade=n,x(g,n,e),e},a=function(n){return b(g,n)||{}},o=function(n){return y(g,n)}}else{var w=f("state");m[w]=!0,r=function(n,e){if(p(n,w))throw new h("Object already initialized");return e.facade=n,u(n,w,e),e},a=function(n){return p(n,w)?n[w]:{}},o=function(n){return p(n,w)}}n.exports={set:r,get:a,has:o,enforce:function(n){return o(n)?a(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=a(e)).type!==n)throw h("Incompatible receiver, "+n+" required");return t}}}},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(22);n.exports=r("navigator","userAgent")||""},function(n,e,t){var r=t(1);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r=t(8),a=t(14),o=t(124),i=t(56),s=t(25),c=t(87),l=t(12),u=t(161),p=Object.getOwnPropertyDescriptor;e.f=r?p:function(n,e){if(n=s(n),e=c(e),u)try{return p(n,e)}catch(n){}if(l(n,e))return i(!a(o.f,n,e),n[e])}},function(n,e,t){var r=t(194),a="object"==typeof self&&self&&self.Object===Object&&self,o=r||a||Function("return this")();n.exports=o},function(n,e,t){"use strict";function r(n,e,t,r,a,o,i,s){var c,l="function"==typeof n?n.options:n;if(e&&(l.render=e,l.staticRenderFns=t,l._compiled=!0),r&&(l.functional=!0),o&&(l._scopeId="data-v-"+o),i?(c=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),a&&a.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(i)},l._ssrRegister=c):a&&(c=s?function(){a.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:a),c)if(l.functional){l._injectStyles=c;var u=l.render;l.render=function(n,e){return c.call(e),u(n,e)}}else{var p=l.beforeCreate;l.beforeCreate=p?[].concat(p,c):[c]}return{exports:n,options:l}}t.d(e,"a",(function(){return r}))},function(n,e,t){var r,a=t(9),o=t(120),i=t(123),s=t(69),c=t(164),l=t(86),u=t(91),p=u("IE_PROTO"),d=function(){},f=function(n){return"<script>"+n+"<\/script>"},m=function(n){n.write(f("")),n.close();var e=n.parentWindow.Object;return n=null,e},h=function(){try{r=new ActiveXObject("htmlfile")}catch(n){}var n,e;h="undefined"!=typeof document?document.domain&&r?m(r):((e=l("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(n=e.contentWindow.document).open(),n.write(f("document.F=Object")),n.close(),n.F):m(r);for(var t=i.length;t--;)delete h.prototype[i[t]];return h()};s[p]=!0,n.exports=Object.create||function(n,e){var t;return null!==n?(d.prototype=a(n),t=new d,d.prototype=null,t[p]=n):t=h(),void 0===e?t:o.f(t,e)}},function(n,e,t){var r=t(68),a=Function.prototype,o=a.apply,i=a.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?i.bind(o):function(){return i.apply(o,arguments)})},function(n,e,t){var r=t(0),a=t(7),o=t(89),i=r.TypeError;n.exports=function(n){if(a(n))return n;throw i(o(n)+" is not a function")}},function(n,e,t){"use strict";var r=t(2),a=t(57).map;r({target:"Array",proto:!0,forced:!t(96)("map")},{map:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(2),a=t(21),o=t(90);r({target:"Object",stat:!0,forced:t(3)((function(){o(1)}))},{keys:function(n){return o(a(n))}})},function(n,e,t){var r=t(62),a=Math.min;n.exports=function(n){return n>0?a(r(n),9007199254740991):0}},function(n,e,t){var r=t(2),a=t(0),o=t(43),i=t(268),s=a.WebAssembly,c=7!==Error("e",{cause:7}).cause,l=function(n,e){var t={};t[n]=i(n,e,c),r({global:!0,forced:c},t)},u=function(n,e){if(s&&s[n]){var t={};t[n]=i("WebAssembly."+n,e,c),r({target:"WebAssembly",stat:!0,forced:c},t)}};l("Error",(function(n){return function(e){return o(n,this,arguments)}})),l("EvalError",(function(n){return function(e){return o(n,this,arguments)}})),l("RangeError",(function(n){return function(e){return o(n,this,arguments)}})),l("ReferenceError",(function(n){return function(e){return o(n,this,arguments)}})),l("SyntaxError",(function(n){return function(e){return o(n,this,arguments)}})),l("TypeError",(function(n){return function(e){return o(n,this,arguments)}})),l("URIError",(function(n){return function(e){return o(n,this,arguments)}})),u("CompileError",(function(n){return function(e){return o(n,this,arguments)}})),u("LinkError",(function(n){return function(e){return o(n,this,arguments)}})),u("RuntimeError",(function(n){return function(e){return o(n,this,arguments)}}))},function(n,e,t){var r=t(293),a=t(296);n.exports=function(n,e){var t=a(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(83);t(74),t(97),t(5),t(134),t(16),t(18);var r=t(108);t(48),t(30);function a(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,a,o=[],i=!0,s=!1;try{for(t=t.call(n);!(i=(r=t.next()).done)&&(o.push(r.value),!e||o.length!==e);i=!0);}catch(n){s=!0,a=n}finally{try{i||null==t.return||t.return()}finally{if(s)throw a}}return o}}(n,e)||Object(r.a)(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";var r=t(2),a=t(0),o=t(3),i=t(65),s=t(10),c=t(21),l=t(33),u=t(73),p=t(155),d=t(96),f=t(6),m=t(60),h=f("isConcatSpreadable"),v=a.TypeError,g=m>=51||!o((function(){var n=[];return n[h]=!1,n.concat()[0]!==n})),b=d("concat"),y=function(n){if(!s(n))return!1;var e=n[h];return void 0!==e?!!e:i(n)};r({target:"Array",proto:!0,forced:!g||!b},{concat:function(n){var e,t,r,a,o,i=c(this),s=p(i,0),d=0;for(e=-1,r=arguments.length;e<r;e++)if(y(o=-1===e?i:arguments[e])){if(d+(a=l(o))>9007199254740991)throw v("Maximum allowed index exceeded");for(t=0;t<a;t++,d++)t in o&&u(s,d,o[t])}else{if(d>=9007199254740991)throw v("Maximum allowed index exceeded");u(s,d++,o)}return s.length=d,s}})},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return o})),t.d(e,"j",(function(){return i})),t.d(e,"g",(function(){return c})),t.d(e,"h",(function(){return l})),t.d(e,"i",(function(){return u})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return f})),t.d(e,"m",(function(){return m})),t.d(e,"d",(function(){return v})),t.d(e,"k",(function(){return g})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return x}));t(28),t(53),t(226),t(80),t(225),t(156),t(45),t(26),t(5),t(27),t(34),t(83),t(148),t(116),t(51),t(213),t(30),t(111);var r=/#.*$/,a=/\.(md|html)$/,o=/\/$/,i=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(a,"")}function c(n){return i.test(n)}function l(n){return/^mailto:/.test(n)}function u(n){return/^tel:/.test(n)}function p(n){if(c(n))return n;if(!n)return"404";var e=n.match(r),t=e?e[0]:"",a=s(n);return o.test(a)?n:a+".html"+t}function d(n,e){var t=n.hash,a=function(n){var e=n&&n.match(r);if(e)return e[0]}(e);return(!a||t===a)&&s(n.path)===s(e)}function f(n,e,t){if(c(e))return{type:"external",path:e};t&&(e=function(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var o=n.replace(/^\//,"").split("/"),i=0;i<o.length;i++){var s=o[i];".."===s?a.pop():"."!==s&&a.push(s)}""!==a[0]&&a.unshift("");return a.join("/")}(e,t));for(var r=s(e),a=0;a<n.length;a++)if(s(n[a].regularPath)===r)return Object.assign({},n[a],{type:"page",path:p(n[a].path)});return console.error('[vuepress] No matching page found for sidebar item "'.concat(e,'"')),{}}function m(n,e,t,r){var a=t.pages,o=t.themeConfig,i=r&&o.locales&&o.locales[r]||o;if("auto"===(n.frontmatter.sidebar||i.sidebar||o.sidebar))return h(n);var s=i.sidebar||o.sidebar;if(s){var c=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(var t in e)if(0===(r=n,/(\.html|\/)$/.test(r)?r:r+"/").indexOf(encodeURI(t)))return{base:t,config:e[t]};var r;return{}}(e,s),l=c.base,u=c.config;return"auto"===u?h(n):u?u.map((function(n){return function n(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if("string"==typeof e)return f(t,e,r);if(Array.isArray(e))return Object.assign(f(t,e[0],r),{title:e[1]});a>3&&console.error("[vuepress] detected a too deep nested sidebar group.");var o=e.children||[];return 0===o.length&&e.path?Object.assign(f(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:o.map((function(e){return n(e,t,r,a+1)})),collapsable:!1!==e.collapsable}}(n,a,l)})):[]}return[]}function h(n){var e=v(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map((function(e){return{type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}}))}]}function v(n){var e;return(n=n.map((function(n){return Object.assign({},n)}))).forEach((function(n){2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)})),n.filter((function(n){return 2===n.level}))}function g(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){var e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return y(e)-y(n)}},function(n,e,t){"use strict";var r=t(43),a=t(14),o=t(1),i=t(114),s=t(3),c=t(9),l=t(7),u=t(62),p=t(47),d=t(11),f=t(19),m=t(138),h=t(55),v=t(273),g=t(115),b=t(6)("replace"),y=Math.max,x=Math.min,w=o([].concat),k=o([].push),j=o("".indexOf),S=o("".slice),O="$0"==="a".replace(/./,"$0"),C=!!/./[b]&&""===/./[b]("a","$0");i("replace",(function(n,e,t){var o=C?"$":"$0";return[function(n,t){var r=f(this),o=null==n?void 0:h(n,b);return o?a(o,n,r,t):a(e,d(r),n,t)},function(n,a){var i=c(this),s=d(n);if("string"==typeof a&&-1===j(a,o)&&-1===j(a,"$<")){var f=t(e,i,s,a);if(f.done)return f.value}var h=l(a);h||(a=d(a));var b=i.global;if(b){var O=i.unicode;i.lastIndex=0}for(var C=[];;){var E=g(i,s);if(null===E)break;if(k(C,E),!b)break;""===d(E[0])&&(i.lastIndex=m(s,p(i.lastIndex),O))}for(var A,_="",B=0,P=0;P<C.length;P++){for(var T=d((E=C[P])[0]),I=y(x(u(E.index),s.length),0),M=[],D=1;D<E.length;D++)k(M,void 0===(A=E[D])?A:String(A));var L=E.groups;if(h){var q=w([T],M,I,s);void 0!==L&&k(q,L);var R=d(r(a,void 0,q))}else R=v(T,s,I,M,L,a);I>=B&&(_+=S(s,B,I)+R,B=I+T.length)}return _+S(s,B)}]}),!!s((function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:"7"},n},"7"!=="".replace(n,"$<a>")}))||!O||C)},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var r=t(44);n.exports=function(n,e){var t=n[e];return null==t?void 0:r(t)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var r=t(63),a=t(1),o=t(67),i=t(21),s=t(33),c=t(155),l=a([].push),u=function(n){var e=1==n,t=2==n,a=3==n,u=4==n,p=6==n,d=7==n,f=5==n||p;return function(m,h,v,g){for(var b,y,x=i(m),w=o(x),k=r(h,v),j=s(w),S=0,O=g||c,C=e?O(m,j):t||d?O(m,0):void 0;j>S;S++)if((f||S in w)&&(y=k(b=w[S],S,x),n))if(e)C[S]=y;else if(y)switch(n){case 3:return!0;case 5:return b;case 6:return S;case 2:l(C,b)}else switch(n){case 4:return!1;case 7:l(C,b)}return p?-1:a||u?u:C}};n.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterReject:u(7)}},function(n,e,t){var r=t(8),a=t(81).EXISTS,o=t(1),i=t(13).f,s=Function.prototype,c=o(s.toString),l=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,u=o(l.exec);r&&!a&&i(s,"name",{configurable:!0,get:function(){try{return u(l,c(this))[1]}catch(n){return""}}})},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r,a,o=t(0),i=t(37),s=o.process,c=o.Deno,l=s&&s.versions||c&&c.version,u=l&&l.v8;u&&(a=(r=u.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!a&&i&&(!(r=i.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\/(\d+)/))&&(a=+r[1]),n.exports=a},function(n,e,t){var r=t(163),a=t(123).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,a)}},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=function(n){var e=+n;return e!=e||0===e?0:(e>0?r:t)(e)}},function(n,e,t){var r=t(1),a=t(44),o=t(68),i=r(r.bind);n.exports=function(n,e){return a(n),void 0===e?n:o?i(n,e):function(){return n.apply(e,arguments)}}},function(n,e,t){var r=t(13).f,a=t(12),o=t(6)("toStringTag");n.exports=function(n,e,t){n&&!t&&(n=n.prototype),n&&!a(n,o)&&r(n,o,{configurable:!0,value:e})}},function(n,e,t){var r=t(31);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e,t){var r=t(75),a=t(278),o=t(279),i=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":i&&i in Object(n)?a(n):o(n)}},function(n,e,t){var r=t(0),a=t(1),o=t(3),i=t(31),s=r.Object,c=a("".split);n.exports=o((function(){return!s("z").propertyIsEnumerable(0)}))?function(n){return"String"==i(n)?c(n,""):s(n)}:s},function(n,e,t){var r=t(3);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e){n.exports={}},function(n,e){n.exports={}},function(n,e,t){var r=t(1),a=t(9),o=t(243);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return a(t),o(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e,t){var r=t(1);n.exports=r([].slice)},function(n,e,t){"use strict";var r=t(87),a=t(13),o=t(56);n.exports=function(n,e,t){var i=r(e);i in n?a.f(n,i,o(0,t)):n[i]=t}},function(n,e,t){"use strict";var r=t(2),a=t(0),o=t(22),i=t(43),s=t(14),c=t(1),l=t(29),u=t(8),p=t(119),d=t(3),f=t(12),m=t(65),h=t(7),v=t(10),g=t(38),b=t(88),y=t(9),x=t(21),w=t(25),k=t(87),j=t(11),S=t(56),O=t(42),C=t(90),E=t(61),A=t(186),_=t(126),B=t(39),P=t(13),T=t(120),I=t(124),M=t(72),D=t(15),L=t(84),q=t(91),R=t(69),N=t(85),z=t(6),$=t(187),F=t(188),U=t(64),V=t(35),H=t(57).forEach,W=q("hidden"),G=z("toPrimitive"),K=V.set,X=V.getterFor("Symbol"),J=Object.prototype,Q=a.Symbol,Y=Q&&Q.prototype,Z=a.TypeError,nn=a.QObject,en=o("JSON","stringify"),tn=B.f,rn=P.f,an=A.f,on=I.f,sn=c([].push),cn=L("symbols"),ln=L("op-symbols"),un=L("string-to-symbol-registry"),pn=L("symbol-to-string-registry"),dn=L("wks"),fn=!nn||!nn.prototype||!nn.prototype.findChild,mn=u&&d((function(){return 7!=O(rn({},"a",{get:function(){return rn(this,"a",{value:7}).a}})).a}))?function(n,e,t){var r=tn(J,e);r&&delete J[e],rn(n,e,t),r&&n!==J&&rn(J,e,r)}:rn,hn=function(n,e){var t=cn[n]=O(Y);return K(t,{type:"Symbol",tag:n,description:e}),u||(t.description=e),t},vn=function(n,e,t){n===J&&vn(ln,e,t),y(n);var r=k(e);return y(t),f(cn,r)?(t.enumerable?(f(n,W)&&n[W][r]&&(n[W][r]=!1),t=O(t,{enumerable:S(0,!1)})):(f(n,W)||rn(n,W,S(1,{})),n[W][r]=!0),mn(n,r,t)):rn(n,r,t)},gn=function(n,e){y(n);var t=w(e),r=C(t).concat(wn(t));return H(r,(function(e){u&&!s(bn,t,e)||vn(n,e,t[e])})),n},bn=function(n){var e=k(n),t=s(on,this,e);return!(this===J&&f(cn,e)&&!f(ln,e))&&(!(t||!f(this,e)||!f(cn,e)||f(this,W)&&this[W][e])||t)},yn=function(n,e){var t=w(n),r=k(e);if(t!==J||!f(cn,r)||f(ln,r)){var a=tn(t,r);return!a||!f(cn,r)||f(t,W)&&t[W][r]||(a.enumerable=!0),a}},xn=function(n){var e=an(w(n)),t=[];return H(e,(function(n){f(cn,n)||f(R,n)||sn(t,n)})),t},wn=function(n){var e=n===J,t=an(e?ln:w(n)),r=[];return H(t,(function(n){!f(cn,n)||e&&!f(J,n)||sn(r,cn[n])})),r};(p||(D(Y=(Q=function(){if(g(Y,this))throw Z("Symbol is not a constructor");var n=arguments.length&&void 0!==arguments[0]?j(arguments[0]):void 0,e=N(n),t=function(n){this===J&&s(t,ln,n),f(this,W)&&f(this[W],e)&&(this[W][e]=!1),mn(this,e,S(1,n))};return u&&fn&&mn(J,e,{configurable:!0,set:t}),hn(e,n)}).prototype,"toString",(function(){return X(this).tag})),D(Q,"withoutSetter",(function(n){return hn(N(n),n)})),I.f=bn,P.f=vn,T.f=gn,B.f=yn,E.f=A.f=xn,_.f=wn,$.f=function(n){return hn(z(n),n)},u&&(rn(Y,"description",{configurable:!0,get:function(){return X(this).description}}),l||D(J,"propertyIsEnumerable",bn,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!p,sham:!p},{Symbol:Q}),H(C(dn),(function(n){F(n)})),r({target:"Symbol",stat:!0,forced:!p},{for:function(n){var e=j(n);if(f(un,e))return un[e];var t=Q(e);return un[e]=t,pn[t]=e,t},keyFor:function(n){if(!b(n))throw Z(n+" is not a symbol");if(f(pn,n))return pn[n]},useSetter:function(){fn=!0},useSimple:function(){fn=!1}}),r({target:"Object",stat:!0,forced:!p,sham:!u},{create:function(n,e){return void 0===e?O(n):gn(O(n),e)},defineProperty:vn,defineProperties:gn,getOwnPropertyDescriptor:yn}),r({target:"Object",stat:!0,forced:!p},{getOwnPropertyNames:xn,getOwnPropertySymbols:wn}),r({target:"Object",stat:!0,forced:d((function(){_.f(1)}))},{getOwnPropertySymbols:function(n){return _.f(x(n))}}),en)&&r({target:"JSON",stat:!0,forced:!p||d((function(){var n=Q();return"[null]"!=en([n])||"{}"!=en({a:n})||"{}"!=en(Object(n))}))},{stringify:function(n,e,t){var r=M(arguments),a=e;if((v(e)||void 0!==n)&&!b(n))return m(e)||(e=function(n,e){if(h(a)&&(e=s(a,this,n,e)),!b(e))return e}),r[1]=e,i(en,null,r)}});if(!Y[G]){var kn=Y.valueOf;D(Y,G,(function(n){return s(kn,this)}))}U(Q,"Symbol"),R[W]=!0},function(n,e,t){var r=t(40).Symbol;n.exports=r},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(83);var r=t(77);t(74),t(97),t(5),t(134),t(16),t(18),t(189);var a=t(108);t(48),t(30);function o(n){return function(n){if(Array.isArray(n))return Object(r.a)(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(a.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";function r(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(2),a=t(0),o=t(65),i=t(94),s=t(10),c=t(122),l=t(33),u=t(25),p=t(73),d=t(6),f=t(96),m=t(72),h=f("slice"),v=d("species"),g=a.Array,b=Math.max;r({target:"Array",proto:!0,forced:!h},{slice:function(n,e){var t,r,a,d=u(this),f=l(d),h=c(n,f),y=c(void 0===e?f:e,f);if(o(d)&&(t=d.constructor,(i(t)&&(t===g||o(t.prototype))||s(t)&&null===(t=t[v]))&&(t=void 0),t===g||void 0===t))return m(d,h,y);for(r=new(void 0===t?g:t)(b(y-h,0)),a=0;h<y;h++,a++)h in d&&p(r,a,d[h]);return r.length=a,r}})},function(n,e,t){"use strict";var r=t(8),a=t(0),o=t(1),i=t(93),s=t(15),c=t(12),l=t(137),u=t(38),p=t(88),d=t(162),f=t(3),m=t(61).f,h=t(39).f,v=t(13).f,g=t(371),b=t(227).trim,y=a.Number,x=y.prototype,w=a.TypeError,k=o("".slice),j=o("".charCodeAt),S=function(n){var e=d(n,"number");return"bigint"==typeof e?e:O(e)},O=function(n){var e,t,r,a,o,i,s,c,l=d(n,"number");if(p(l))throw w("Cannot convert a Symbol value to a number");if("string"==typeof l&&l.length>2)if(l=b(l),43===(e=j(l,0))||45===e){if(88===(t=j(l,2))||120===t)return NaN}else if(48===e){switch(j(l,1)){case 66:case 98:r=2,a=49;break;case 79:case 111:r=8,a=55;break;default:return+l}for(i=(o=k(l,2)).length,s=0;s<i;s++)if((c=j(o,s))<48||c>a)return NaN;return parseInt(o,r)}return+l};if(i("Number",!y(" 0o1")||!y("0b1")||y("+0x1"))){for(var C,E=function(n){var e=arguments.length<1?0:y(S(n)),t=this;return u(x,t)&&f((function(){g(t)}))?l(Object(e),t,E):e},A=r?m(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),_=0;A.length>_;_++)c(y,C=A[_])&&!c(E,C)&&v(E,C,h(y,C));E.prototype=x,x.constructor=E,s(a,"Number",E)}},function(n,e,t){"use strict";t(28);var r,a,o=t(2),i=t(0),s=t(14),c=t(1),l=t(7),u=t(10),p=(r=!1,(a=/[ac]/).exec=function(){return r=!0,/./.exec.apply(this,arguments)},!0===a.test("abc")&&r),d=i.Error,f=c(/./.test);o({target:"RegExp",proto:!0,forced:!p},{test:function(n){var e=this.exec;if(!l(e))return f(this,n);var t=s(e,this,n);if(null!==t&&!u(t))throw new d("RegExp exec method returned something other than an Object or null");return!!t}})},function(n,e,t){var r=t(8),a=t(12),o=Function.prototype,i=r&&Object.getOwnPropertyDescriptor,s=a(o,"name"),c=s&&"something"===function(){}.name,l=s&&(!r||r&&i(o,"name").configurable);n.exports={EXISTS:s,PROPER:c,CONFIGURABLE:l}},function(n,e,t){var r=t(0),a=t(128),o=t(7),i=t(31),s=t(6)("toStringTag"),c=r.Object,l="Arguments"==i(function(){return arguments}());n.exports=a?i:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=c(n),s))?t:l?i(e):"Object"==(r=i(e))&&o(e.callee)?"Arguments":r}},function(n,e,t){t(2)({target:"Array",stat:!0},{isArray:t(65)})},function(n,e,t){var r=t(29),a=t(117);(n.exports=function(n,e){return a[n]||(a[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.21.1",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){var r=t(1),a=0,o=Math.random(),i=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+i(++a+o,36)}},function(n,e,t){var r=t(0),a=t(10),o=r.document,i=a(o)&&a(o.createElement);n.exports=function(n){return i?o.createElement(n):{}}},function(n,e,t){var r=t(162),a=t(88);n.exports=function(n){var e=r(n,"string");return a(e)?e:e+""}},function(n,e,t){var r=t(0),a=t(22),o=t(7),i=t(38),s=t(159),c=r.Object;n.exports=s?function(n){return"symbol"==typeof n}:function(n){var e=a("Symbol");return o(e)&&i(e.prototype,c(n))}},function(n,e,t){var r=t(0).String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){var r=t(163),a=t(123);n.exports=Object.keys||function(n){return r(n,a)}},function(n,e,t){var r=t(84),a=t(85),o=r("keys");n.exports=function(n){return o[n]||(o[n]=a(n))}},function(n,e,t){var r=t(1),a=t(7),o=t(117),i=r(Function.toString);a(o.inspectSource)||(o.inspectSource=function(n){return i(n)}),n.exports=o.inspectSource},function(n,e,t){var r=t(3),a=t(7),o=/#|\.prototype\./,i=function(n,e){var t=c[s(n)];return t==u||t!=l&&(a(e)?r(e):!!e)},s=i.normalize=function(n){return String(n).replace(o,".").toLowerCase()},c=i.data={},l=i.NATIVE="N",u=i.POLYFILL="P";n.exports=i},function(n,e,t){var r=t(1),a=t(3),o=t(7),i=t(82),s=t(22),c=t(92),l=function(){},u=[],p=s("Reflect","construct"),d=/^\s*(?:class|function)\b/,f=r(d.exec),m=!d.exec(l),h=function(n){if(!o(n))return!1;try{return p(l,u,n),!0}catch(n){return!1}},v=function(n){if(!o(n))return!1;switch(i(n)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return m||!!f(d,c(n))}catch(n){return!0}};v.sham=!0,n.exports=!p||a((function(){var n;return h(h.call)||!h(Object)||!h((function(){n=!0}))||n}))?v:h},function(n,e,t){var r=t(31),a=t(0);n.exports="process"==r(a.process)},function(n,e,t){var r=t(3),a=t(6),o=t(60),i=a("species");n.exports=function(n){return o>=51||!r((function(){var e=[];return(e.constructor={})[i]=function(){return{foo:1}},1!==e[n](Boolean).foo}))}},function(n,e,t){"use strict";var r=t(2),a=t(8),o=t(0),i=t(1),s=t(12),c=t(7),l=t(38),u=t(11),p=t(13).f,d=t(125),f=o.Symbol,m=f&&f.prototype;if(a&&c(f)&&(!("description"in m)||void 0!==f().description)){var h={},v=function(){var n=arguments.length<1||void 0===arguments[0]?void 0:u(arguments[0]),e=l(m,this)?new f(n):void 0===n?f():f(n);return""===n&&(h[e]=!0),e};d(v,f),v.prototype=m,m.constructor=v;var g="Symbol(test)"==String(f("test")),b=i(m.toString),y=i(m.valueOf),x=/^Symbol\((.*)\)[^)]+$/,w=i("".replace),k=i("".slice);p(m,"description",{configurable:!0,get:function(){var n=y(this),e=b(n);if(s(h,n))return"";var t=g?k(e,7,-1):w(e,x,"$1");return""===t?void 0:t}}),r({global:!0,forced:!0},{Symbol:v})}},function(n,e,t){"use strict";var r,a,o=t(14),i=t(1),s=t(11),c=t(135),l=t(99),u=t(84),p=t(42),d=t(35).get,f=t(136),m=t(190),h=u("native-string-replace",String.prototype.replace),v=RegExp.prototype.exec,g=v,b=i("".charAt),y=i("".indexOf),x=i("".replace),w=i("".slice),k=(a=/b*/g,o(v,r=/a/,"a"),o(v,a,"a"),0!==r.lastIndex||0!==a.lastIndex),j=l.BROKEN_CARET,S=void 0!==/()??/.exec("")[1];(k||S||j||f||m)&&(g=function(n){var e,t,r,a,i,l,u,f=this,m=d(f),O=s(n),C=m.raw;if(C)return C.lastIndex=f.lastIndex,e=o(g,C,O),f.lastIndex=C.lastIndex,e;var E=m.groups,A=j&&f.sticky,_=o(c,f),B=f.source,P=0,T=O;if(A&&(_=x(_,"y",""),-1===y(_,"g")&&(_+="g"),T=w(O,f.lastIndex),f.lastIndex>0&&(!f.multiline||f.multiline&&"\n"!==b(O,f.lastIndex-1))&&(B="(?: "+B+")",T=" "+T,P++),t=new RegExp("^(?:"+B+")",_)),S&&(t=new RegExp("^"+B+"$(?!\\s)",_)),k&&(r=f.lastIndex),a=o(v,A?t:f,T),A?a?(a.input=w(a.input,P),a[0]=w(a[0],P),a.index=f.lastIndex,f.lastIndex+=a[0].length):f.lastIndex=0:k&&a&&(f.lastIndex=f.global?a.index+a[0].length:r),S&&a&&a.length>1&&o(h,a[0],t,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(a[i]=void 0)})),a&&E)for(a.groups=l=p(null),i=0;i<E.length;i++)l[(u=E[i])[0]]=a[u[1]];return a}),n.exports=g},function(n,e,t){var r=t(3),a=t(0).RegExp,o=r((function(){var n=a("a","y");return n.lastIndex=2,null!=n.exec("abcd")})),i=o||r((function(){return!a("a","y").sticky})),s=o||r((function(){var n=a("^r","gy");return n.lastIndex=2,null!=n.exec("str")}));n.exports={BROKEN_CARET:s,MISSED_STICKY:i,UNSUPPORTED_Y:o}},function(n,e,t){var r=t(283),a=t(284),o=t(285),i=t(286),s=t(287);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=o,c.prototype.has=i,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(196);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(49)(Object,"create");n.exports=r},function(n,e,t){var r=t(305);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(146);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r=t(2),a=t(8),o=t(13).f;r({target:"Object",stat:!0,forced:Object.defineProperty!==o,sham:!a},{defineProperty:o})},function(n,e,t){"use strict";var r,a=t(2),o=t(1),i=t(39).f,s=t(47),c=t(11),l=t(130),u=t(19),p=t(132),d=t(29),f=o("".endsWith),m=o("".slice),h=Math.min,v=p("endsWith");a({target:"String",proto:!0,forced:!!(d||v||(r=i(String.prototype,"endsWith"),!r||r.writable))&&!v},{endsWith:function(n){var e=c(u(this));l(n);var t=arguments.length>1?arguments[1]:void 0,r=e.length,a=void 0===t?r:h(s(t),r),o=c(n);return f?f(e,o,a):m(e,a-o.length,a)===o}})},function(n,e,t){"use strict";var r=t(2),a=t(236);r({target:"String",proto:!0,forced:t(237)("fixed")},{fixed:function(){return a(this,"tt","","")}})},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(78),t(5),t(58),t(189),t(16),t(28),t(80);var r=t(77);function a(n,e){if(n){if("string"==typeof n)return Object(r.a)(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r.a)(n,e):void 0}}},function(n,e,t){var r,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(n,e,t){return n<e?e:n>t?t:n}function o(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=a(n,r.minimum,1),t.status=1===n?null:n;var c=t.render(!e),l=c.querySelector(r.barSelector),u=r.speed,p=r.easing;return c.offsetWidth,i((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(l,function(n,e,t){var a;return(a="translate3d"===r.positionUsing?{transform:"translate3d("+o(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+o(n)+"%,0)"}:{"margin-left":o(n)+"%"}).transition="all "+e+"ms "+t,a}(n,u,p)),1===n?(s(c,{transition:"none",opacity:1}),c.offsetWidth,setTimeout((function(){s(c,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),u)}),u)):setTimeout(e,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*a(Math.random()*e,.1,.95)),e=a(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");l(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var a,i=e.querySelector(r.barSelector),c=n?"-100":o(t.status||0),u=document.querySelector(r.parent);return s(i,{transition:"all 0 linear",transform:"translate3d("+c+"%,0,0)"}),r.showSpinner||(a=e.querySelector(r.spinnerSelector))&&d(a),u!=document.body&&l(u,"nprogress-custom-parent"),u.appendChild(e),e},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var i=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,a=n.length,o=e.charAt(0).toUpperCase()+e.slice(1);a--;)if((r=n[a]+o)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,a,o=arguments;if(2==o.length)for(t in e)void 0!==(a=e[t])&&e.hasOwnProperty(t)&&r(n,t,a);else r(n,o[1],o[2])}}();function c(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function l(n,e){var t=p(n),r=t+e;c(t,e)||(n.className=r.substring(1))}function u(n,e){var t,r=p(n);c(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=a)},function(n,e,t){var r=t(2),a=t(0),o=t(43),i=t(7),s=t(37),c=t(72),l=t(154),u=/MSIE .\./.test(s),p=a.Function,d=function(n){return function(e,t){var r=l(arguments.length,1)>2,a=i(e)?e:p(e),s=r?c(arguments,2):void 0;return n(r?function(){o(a,this,s)}:a,t)}};r({global:!0,bind:!0,forced:u},{setTimeout:d(a.setTimeout),setInterval:d(a.setInterval)})},function(n,e,t){"use strict";var r=t(1),a=t(81).PROPER,o=t(15),i=t(9),s=t(38),c=t(11),l=t(3),u=t(135),p=RegExp.prototype,d=p.toString,f=r(u),m=l((function(){return"/a/b"!=d.call({source:"a",flags:"b"})})),h=a&&"toString"!=d.name;(m||h)&&o(RegExp.prototype,"toString",(function(){var n=i(this),e=c(n.source),t=n.flags;return"/"+e+"/"+c(void 0===t&&s(p,n)&&!("flags"in p)?f(n):t)}),{unsafe:!0})},function(n,e,t){var r=t(6),a=t(42),o=t(13),i=r("unscopables"),s=Array.prototype;null==s[i]&&o.f(s,i,{configurable:!0,value:a(null)}),n.exports=function(n){s[i][n]=!0}},function(n,e,t){var r=t(82),a=t(55),o=t(70),i=t(6)("iterator");n.exports=function(n){if(null!=n)return a(n,i)||a(n,"@@iterator")||o[r(n)]}},function(n,e,t){"use strict";t(28);var r=t(1),a=t(15),o=t(98),i=t(3),s=t(6),c=t(32),l=s("species"),u=RegExp.prototype;n.exports=function(n,e,t,p){var d=s(n),f=!i((function(){var e={};return e[d]=function(){return 7},7!=""[n](e)})),m=f&&!i((function(){var e=!1,t=/a/;return"split"===n&&((t={}).constructor={},t.constructor[l]=function(){return t},t.flags="",t[d]=/./[d]),t.exec=function(){return e=!0,null},t[d](""),!e}));if(!f||!m||t){var h=r(/./[d]),v=e(d,""[n],(function(n,e,t,a,i){var s=r(n),c=e.exec;return c===o||c===u.exec?f&&!i?{done:!0,value:h(e,t,a)}:{done:!0,value:s(t,e,a)}:{done:!1}}));a(String.prototype,n,v[0]),a(u,d,v[1])}p&&c(u[d],"sham",!0)}},function(n,e,t){var r=t(0),a=t(14),o=t(9),i=t(7),s=t(31),c=t(98),l=r.TypeError;n.exports=function(n,e){var t=n.exec;if(i(t)){var r=a(t,n,e);return null!==r&&o(r),r}if("RegExp"===s(n))return a(c,n,e);throw l("RegExp#exec called on incompatible receiver")}},function(n,e,t){var r=t(1),a=t(15),o=Date.prototype,i=r(o.toString),s=r(o.getTime);"Invalid Date"!=String(new Date(NaN))&&a(o,"toString",(function(){var n=s(this);return n==n?i(this):"Invalid Date"}))},function(n,e,t){var r=t(0),a=t(118),o=r["__core-js_shared__"]||a("__core-js_shared__",{});n.exports=o},function(n,e,t){var r=t(0),a=Object.defineProperty;n.exports=function(n,e){try{a(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(60),a=t(3);n.exports=!!Object.getOwnPropertySymbols&&!a((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r=t(8),a=t(160),o=t(13),i=t(9),s=t(25),c=t(90);e.f=r&&!a?Object.defineProperties:function(n,e){i(n);for(var t,r=s(e),a=c(e),l=a.length,u=0;l>u;)o.f(n,t=a[u++],r[t]);return n}},function(n,e,t){var r=t(25),a=t(122),o=t(33),i=function(n){return function(e,t,i){var s,c=r(e),l=o(c),u=a(i,l);if(n&&t!=t){for(;l>u;)if((s=c[u++])!=s)return!0}else for(;l>u;u++)if((n||u in c)&&c[u]===t)return n||u||0;return!n&&-1}};n.exports={includes:i(!0),indexOf:i(!1)}},function(n,e,t){var r=t(62),a=Math.max,o=Math.min;n.exports=function(n,e){var t=r(n);return t<0?a(t+e,0):o(t,e)}},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,o=a&&!r.call({1:2},1);e.f=o?function(n){var e=a(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(12),a=t(166),o=t(39),i=t(13);n.exports=function(n,e,t){for(var s=a(e),c=i.f,l=o.f,u=0;u<s.length;u++){var p=s[u];r(n,p)||t&&r(t,p)||c(n,p,l(e,p))}}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(0),a=t(12),o=t(7),i=t(21),s=t(91),c=t(168),l=s("IE_PROTO"),u=r.Object,p=u.prototype;n.exports=c?u.getPrototypeOf:function(n){var e=i(n);if(a(e,l))return e[l];var t=e.constructor;return o(t)&&e instanceof t?t.prototype:e instanceof u?p:null}},function(n,e,t){var r={};r[t(6)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(9),a=t(174),o=t(6)("species");n.exports=function(n,e){var t,i=r(n).constructor;return void 0===i||null==(t=r(i)[o])?e:a(t)}},function(n,e,t){var r=t(0),a=t(131),o=r.TypeError;n.exports=function(n){if(a(n))throw o("The method doesn't accept regular expressions");return n}},function(n,e,t){var r=t(10),a=t(31),o=t(6)("match");n.exports=function(n){var e;return r(n)&&(void 0!==(e=n[o])?!!e:"RegExp"==a(n))}},function(n,e,t){var r=t(6)("match");n.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[r]=!1,"/./"[n](e)}catch(n){}}return!1}},function(n,e,t){var r=t(0),a=t(122),o=t(33),i=t(73),s=r.Array,c=Math.max;n.exports=function(n,e,t){for(var r=o(n),l=a(e,r),u=a(void 0===t?r:t,r),p=s(c(u-l,0)),d=0;l<u;l++,d++)i(p,d,n[l]);return p.length=d,p}},function(n,e,t){t(188)("iterator")},function(n,e,t){"use strict";var r=t(9);n.exports=function(){var n=r(this),e="";return n.global&&(e+="g"),n.ignoreCase&&(e+="i"),n.multiline&&(e+="m"),n.dotAll&&(e+="s"),n.unicode&&(e+="u"),n.sticky&&(e+="y"),e}},function(n,e,t){var r=t(3),a=t(0).RegExp;n.exports=r((function(){var n=a(".","s");return!(n.dotAll&&n.exec("\n")&&"s"===n.flags)}))},function(n,e,t){var r=t(7),a=t(10),o=t(71);n.exports=function(n,e,t){var i,s;return o&&r(i=e.constructor)&&i!==t&&a(s=i.prototype)&&s!==t.prototype&&o(n,s),n}},function(n,e,t){"use strict";var r=t(179).charAt;n.exports=function(n,e,t){return e+(t?r(n,e).length:1)}},function(n,e,t){var r=t(277),a=t(59),o=Object.prototype,i=o.hasOwnProperty,s=o.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(n){return a(n)&&i.call(n,"callee")&&!s.call(n,"callee")};n.exports=c},function(n,e,t){var r=t(49)(t(40),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(297),a=t(304),o=t(306),i=t(307),s=t(308);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=o,c.prototype.has=i,c.prototype.set=s,n.exports=c},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(36),a=t(146),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!a(n))||(i.test(n)||!o.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(66),a=t(59);n.exports=function(n){return"symbol"==typeof n||a(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";var r=t(2),a=t(1),o=t(121).indexOf,i=t(54),s=a([].indexOf),c=!!s&&1/s([1],1,-0)<0,l=i("indexOf");r({target:"Array",proto:!0,forced:c||!l},{indexOf:function(n){var e=arguments.length>1?arguments[1]:void 0;return c?s(this,n,e)||0:o(this,n,e)}})},function(n,e,t){"use strict";var r=t(2),a=t(57).some;r({target:"Array",proto:!0,forced:!t(54)("some")},{some:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e,t){"use strict";var r=t(2),a=t(57).find,o=t(112),i=!0;"find"in[]&&Array(1).find((function(){i=!1})),r({target:"Array",proto:!0,forced:i},{find:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}}),o("find")},function(n,e,t){"use strict";var r=t(25),a=t(112),o=t(70),i=t(35),s=t(13).f,c=t(165),l=t(29),u=t(8),p=i.set,d=i.getterFor("Array Iterator");n.exports=c(Array,"Array",(function(n,e){p(this,{type:"Array Iterator",target:r(n),index:0,kind:e})}),(function(){var n=d(this),e=n.target,t=n.kind,r=n.index++;return!e||r>=e.length?(n.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:r,done:!1}:"values"==t?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values");var f=o.Arguments=o.Array;if(a("keys"),a("values"),a("entries"),!l&&u&&"values"!==f.name)try{s(f,"name",{value:"values"})}catch(n){}},function(n,e,t){var r=t(0),a=t(14),o=t(44),i=t(9),s=t(89),c=t(113),l=r.TypeError;n.exports=function(n,e){var t=arguments.length<2?c(n):e;if(o(t))return i(a(t,n));throw l(s(n)+" is not iterable")}},function(n,e,t){var r=t(0).TypeError;n.exports=function(n,e){if(n<e)throw r("Not enough arguments");return n}},function(n,e,t){var r=t(257);n.exports=function(n,e){return new(r(n))(0===e?0:e)}},function(n,e,t){"use strict";var r=t(2),a=t(1),o=t(67),i=t(25),s=t(54),c=a([].join),l=o!=Object,u=s("join",",");r({target:"Array",proto:!0,forced:l||!u},{join:function(n){return c(i(this),void 0===n?",":n)}})},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,o=/^0o[0-7]+$/i,i=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,c="object"==typeof self&&self&&self.Object===Object&&self,l=s||c||Function("return this")(),u=Object.prototype.toString,p=Math.max,d=Math.min,f=function(){return l.Date.now()};function m(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function h(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==u.call(n)}(n))return NaN;if(m(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=m(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=a.test(n);return s||o.test(n)?i(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,a,o,i,s,c,l=0,u=!1,v=!1,g=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,o=a;return r=a=void 0,l=e,i=n.apply(o,t)}function y(n){return l=n,s=setTimeout(w,e),u?b(n):i}function x(n){var t=n-c;return void 0===c||t>=e||t<0||v&&n-l>=o}function w(){var n=f();if(x(n))return k(n);s=setTimeout(w,function(n){var t=e-(n-c);return v?d(t,o-(n-l)):t}(n))}function k(n){return s=void 0,g&&r?b(n):(r=a=void 0,i)}function j(){var n=f(),t=x(n);if(r=arguments,a=this,c=n,t){if(void 0===s)return y(c);if(v)return s=setTimeout(w,e),b(c)}return void 0===s&&(s=setTimeout(w,e)),i}return e=h(e)||0,m(t)&&(u=!!t.leading,o=(v="maxWait"in t)?p(h(t.maxWait)||0,e):o,g="trailing"in t?!!t.trailing:g),j.cancel=function(){void 0!==s&&clearTimeout(s),l=0,r=c=a=s=void 0},j.flush=function(){return void 0===s?i:k(f())},j}},function(n,e,t){var r=t(0),a=t(8),o=t(99).MISSED_STICKY,i=t(31),s=t(13).f,c=t(35).get,l=RegExp.prototype,u=r.TypeError;a&&o&&s(l,"sticky",{configurable:!0,get:function(){if(this!==l){if("RegExp"===i(this))return!!c(this).sticky;throw u("Incompatible receiver, RegExp required")}}})},function(n,e,t){var r=t(119);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(8),a=t(3);n.exports=r&&a((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(8),a=t(3),o=t(86);n.exports=!r&&!a((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(0),a=t(14),o=t(10),i=t(88),s=t(55),c=t(241),l=t(6),u=r.TypeError,p=l("toPrimitive");n.exports=function(n,e){if(!o(n)||i(n))return n;var t,r=s(n,p);if(r){if(void 0===e&&(e="default"),t=a(r,n,e),!o(t)||i(t))return t;throw u("Can't convert object to primitive value")}return void 0===e&&(e="number"),c(n,e)}},function(n,e,t){var r=t(1),a=t(12),o=t(25),i=t(121).indexOf,s=t(69),c=r([].push);n.exports=function(n,e){var t,r=o(n),l=0,u=[];for(t in r)!a(s,t)&&a(r,t)&&c(u,t);for(;e.length>l;)a(r,t=e[l++])&&(~i(u,t)||c(u,t));return u}},function(n,e,t){var r=t(22);n.exports=r("document","documentElement")},function(n,e,t){"use strict";var r=t(2),a=t(14),o=t(29),i=t(81),s=t(7),c=t(229),l=t(127),u=t(71),p=t(64),d=t(32),f=t(15),m=t(6),h=t(70),v=t(167),g=i.PROPER,b=i.CONFIGURABLE,y=v.IteratorPrototype,x=v.BUGGY_SAFARI_ITERATORS,w=m("iterator"),k=function(){return this};n.exports=function(n,e,t,i,m,v,j){c(t,e,i);var S,O,C,E=function(n){if(n===m&&T)return T;if(!x&&n in B)return B[n];switch(n){case"keys":case"values":case"entries":return function(){return new t(this,n)}}return function(){return new t(this)}},A=e+" Iterator",_=!1,B=n.prototype,P=B[w]||B["@@iterator"]||m&&B[m],T=!x&&P||E(m),I="Array"==e&&B.entries||P;if(I&&(S=l(I.call(new n)))!==Object.prototype&&S.next&&(o||l(S)===y||(u?u(S,y):s(S[w])||f(S,w,k)),p(S,A,!0,!0),o&&(h[A]=k)),g&&"values"==m&&P&&"values"!==P.name&&(!o&&b?d(B,"name","values"):(_=!0,T=function(){return a(P,this)})),m)if(O={values:E("values"),keys:v?T:E("keys"),entries:E("entries")},j)for(C in O)(x||_||!(C in B))&&f(B,C,O[C]);else r({target:e,proto:!0,forced:x||_},O);return o&&!j||B[w]===T||f(B,w,T,{name:m}),h[e]=T,O}},function(n,e,t){var r=t(22),a=t(1),o=t(61),i=t(126),s=t(9),c=a([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=o.f(s(n)),t=i.f;return t?c(e,t(n)):e}},function(n,e,t){"use strict";var r,a,o,i=t(3),s=t(7),c=t(42),l=t(127),u=t(15),p=t(6),d=t(29),f=p("iterator"),m=!1;[].keys&&("next"in(o=[].keys())?(a=l(l(o)))!==Object.prototype&&(r=a):m=!0),null==r||i((function(){var n={};return r[f].call(n)!==n}))?r={}:d&&(r=c(r)),s(r[f])||u(r,f,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:m}},function(n,e,t){var r=t(3);n.exports=!r((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,e,t){var r=t(0);n.exports=r.Promise},function(n,e,t){"use strict";var r=t(22),a=t(13),o=t(6),i=t(8),s=o("species");n.exports=function(n){var e=r(n),t=a.f;i&&e&&!e[s]&&t(e,s,{configurable:!0,get:function(){return this}})}},function(n,e,t){var r=t(6),a=t(70),o=r("iterator"),i=Array.prototype;n.exports=function(n){return void 0!==n&&(a.Array===n||i[o]===n)}},function(n,e,t){var r=t(14),a=t(9),o=t(55);n.exports=function(n,e,t){var i,s;a(n);try{if(!(i=o(n,"return"))){if("throw"===e)throw t;return t}i=r(i,n)}catch(n){s=!0,i=n}if("throw"===e)throw t;if(s)throw i;return a(i),t}},function(n,e,t){var r=t(6)("iterator"),a=!1;try{var o=0,i={next:function(){return{done:!!o++}},return:function(){a=!0}};i[r]=function(){return this},Array.from(i,(function(){throw 2}))}catch(n){}n.exports=function(n,e){if(!e&&!a)return!1;var t=!1;try{var o={};o[r]=function(){return{next:function(){return{done:t=!0}}}},n(o)}catch(n){}return t}},function(n,e,t){var r=t(0),a=t(94),o=t(89),i=r.TypeError;n.exports=function(n){if(a(n))return n;throw i(o(n)+" is not a constructor")}},function(n,e,t){var r,a,o,i,s=t(0),c=t(43),l=t(63),u=t(7),p=t(12),d=t(3),f=t(164),m=t(72),h=t(86),v=t(154),g=t(176),b=t(95),y=s.setImmediate,x=s.clearImmediate,w=s.process,k=s.Dispatch,j=s.Function,S=s.MessageChannel,O=s.String,C=0,E={};try{r=s.location}catch(n){}var A=function(n){if(p(E,n)){var e=E[n];delete E[n],e()}},_=function(n){return function(){A(n)}},B=function(n){A(n.data)},P=function(n){s.postMessage(O(n),r.protocol+"//"+r.host)};y&&x||(y=function(n){v(arguments.length,1);var e=u(n)?n:j(n),t=m(arguments,1);return E[++C]=function(){c(e,void 0,t)},a(C),C},x=function(n){delete E[n]},b?a=function(n){w.nextTick(_(n))}:k&&k.now?a=function(n){k.now(_(n))}:S&&!g?(i=(o=new S).port2,o.port1.onmessage=B,a=l(i.postMessage,i)):s.addEventListener&&u(s.postMessage)&&!s.importScripts&&r&&"file:"!==r.protocol&&!d(P)?(a=P,s.addEventListener("message",B,!1)):a="onreadystatechange"in h("script")?function(n){f.appendChild(h("script")).onreadystatechange=function(){f.removeChild(this),A(n)}}:function(n){setTimeout(_(n),0)}),n.exports={set:y,clear:x}},function(n,e,t){var r=t(37);n.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},function(n,e,t){var r=t(9),a=t(10),o=t(178);n.exports=function(n,e){if(r(n),a(e)&&e.constructor===n)return e;var t=o.f(n);return(0,t.resolve)(e),t.promise}},function(n,e,t){"use strict";var r=t(44),a=function(n){var e,t;this.promise=new n((function(n,r){if(void 0!==e||void 0!==t)throw TypeError("Bad Promise constructor");e=n,t=r})),this.resolve=r(e),this.reject=r(t)};n.exports.f=function(n){return new a(n)}},function(n,e,t){var r=t(1),a=t(62),o=t(11),i=t(19),s=r("".charAt),c=r("".charCodeAt),l=r("".slice),u=function(n){return function(e,t){var r,u,p=o(i(e)),d=a(t),f=p.length;return d<0||d>=f?n?"":void 0:(r=c(p,d))<55296||r>56319||d+1===f||(u=c(p,d+1))<56320||u>57343?n?s(p,d):r:n?l(p,d,d+2):u-56320+(r-55296<<10)+65536}};n.exports={codeAt:u(!1),charAt:u(!0)}},function(n,e){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(n,e,t){var r=t(86)("span").classList,a=r&&r.constructor&&r.constructor.prototype;n.exports=a===Object.prototype?void 0:a},function(n,e,t){var r=t(2),a=t(8),o=t(166),i=t(25),s=t(39),c=t(73);r({target:"Object",stat:!0,sham:!a},{getOwnPropertyDescriptors:function(n){for(var e,t,r=i(n),a=s.f,l=o(r),u={},p=0;l.length>p;)void 0!==(t=a(r,e=l[p++]))&&c(u,e,t);return u}})},function(n,e,t){var r=t(2),a=t(3),o=t(21),i=t(127),s=t(168);r({target:"Object",stat:!0,forced:a((function(){i(1)})),sham:!s},{getPrototypeOf:function(n){return i(o(n))}})},function(n,e,t){"use strict";var r=t(57).forEach,a=t(54)("forEach");n.exports=a?[].forEach:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}},function(n,e,t){var r=t(3);n.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(n,e,t){var r=t(31),a=t(25),o=t(61).f,i=t(133),s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return s&&"Window"==r(n)?function(n){try{return o(n)}catch(n){return i(s)}}(n):o(a(n))}},function(n,e,t){var r=t(6);e.f=r},function(n,e,t){var r=t(265),a=t(12),o=t(187),i=t(13).f;n.exports=function(n){var e=r.Symbol||(r.Symbol={});a(e,n)||i(e,n,{value:o.f(n)})}},function(n,e,t){var r=t(2),a=t(266);r({target:"Array",stat:!0,forced:!t(173)((function(n){Array.from(n)}))},{from:a})},function(n,e,t){var r=t(3),a=t(0).RegExp;n.exports=r((function(){var n=a("(?<a>b)","g");return"b"!==n.exec("b").groups.a||"bc"!=="b".replace(n,"$<a>c")}))},function(n,e,t){var r=t(11);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){t(2)({target:"Object",stat:!0,sham:!t(8)},{create:t(42)})},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,a=n.length;++t<r;)n[a+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(100),a=t(288),o=t(289),i=t(290),s=t(291),c=t(292);function l(n){var e=this.__data__=new r(n);this.size=e.size}l.prototype.clear=a,l.prototype.delete=o,l.prototype.get=i,l.prototype.has=s,l.prototype.set=c,n.exports=l},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(66),a=t(141);n.exports=function(n){if(!a(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(309),a=t(59);n.exports=function n(e,t,o,i,s){return e===t||(null==e||null==t||!a(e)&&!a(t)?e!=e&&t!=t:r(e,t,o,i,n,s))}},function(n,e,t){var r=t(201),a=t(312),o=t(202);n.exports=function(n,e,t,i,s,c){var l=1&t,u=n.length,p=e.length;if(u!=p&&!(l&&p>u))return!1;var d=c.get(n),f=c.get(e);if(d&&f)return d==e&&f==n;var m=-1,h=!0,v=2&t?new r:void 0;for(c.set(n,e),c.set(e,n);++m<u;){var g=n[m],b=e[m];if(i)var y=l?i(b,g,m,e,n,c):i(g,b,m,n,e,c);if(void 0!==y){if(y)continue;h=!1;break}if(v){if(!a(e,(function(n,e){if(!o(v,e)&&(g===n||s(g,n,t,i,c)))return v.push(e)}))){h=!1;break}}else if(g!==b&&!s(g,b,t,i,c)){h=!1;break}}return c.delete(n),c.delete(e),h}},function(n,e,t){var r=t(142),a=t(310),o=t(311);function i(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}i.prototype.add=i.prototype.push=a,i.prototype.has=o,n.exports=i},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(322),a=t(328),o=t(207);n.exports=function(n){return o(n)?r(n):a(n)}},function(n,e,t){(function(n){var r=t(40),a=t(324),o=e&&!e.nodeType&&e,i=o&&"object"==typeof n&&n&&!n.nodeType&&n,s=i&&i.exports===o?r.Buffer:void 0,c=(s?s.isBuffer:void 0)||a;n.exports=c}).call(this,t(150)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(325),a=t(326),o=t(327),i=o&&o.isTypedArray,s=i?a(i):r;n.exports=s},function(n,e,t){var r=t(197),a=t(144);n.exports=function(n){return null!=n&&a(n.length)&&!r(n)}},function(n,e,t){var r=t(49)(t(40),"Set");n.exports=r},function(n,e,t){var r=t(141);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(212),a=t(104);n.exports=function(n,e){for(var t=0,o=(e=r(e,n)).length;null!=n&&t<o;)n=n[a(e[t++])];return t&&t==o?n:void 0}},function(n,e,t){var r=t(36),a=t(145),o=t(339),i=t(342);n.exports=function(n,e){return r(n)?n:a(n,e)?[n]:o(i(n))}},function(n,e,t){"use strict";var r=t(2),a=t(372).start;r({target:"String",proto:!0,forced:t(374)},{padStart:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){},function(n,e,t){},function(n,e,t){t(2)({target:"Object",stat:!0},{setPrototypeOf:t(71)})},function(n,e,t){var r=t(2),a=t(22),o=t(43),i=t(385),s=t(174),c=t(9),l=t(10),u=t(42),p=t(3),d=a("Reflect","construct"),f=Object.prototype,m=[].push,h=p((function(){function n(){}return!(d((function(){}),[],n)instanceof n)})),v=!p((function(){d((function(){}))})),g=h||v;r({target:"Reflect",stat:!0,forced:g,sham:g},{construct:function(n,e){s(n),c(e);var t=arguments.length<3?n:s(arguments[2]);if(v&&!h)return d(n,e,t);if(n==t){switch(e.length){case 0:return new n;case 1:return new n(e[0]);case 2:return new n(e[0],e[1]);case 3:return new n(e[0],e[1],e[2]);case 4:return new n(e[0],e[1],e[2],e[3])}var r=[null];return o(m,r,e),new(o(i,n,r))}var a=t.prototype,p=u(l(a)?a:f),g=o(n,p,e);return l(g)?g:p}})},function(n,e,t){var r=t(2),a=t(0),o=t(64);r({global:!0},{Reflect:{}}),o(a.Reflect,"Reflect",!0)},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(275),a=t(280),o=t(351),i=t(359),s=t(368),c=t(234),l=o((function(n){var e=c(n);return s(e)&&(e=void 0),i(r(n,1,s,!0),a(e,2))}));n.exports=l},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,a=r.exec(t);if(!a)return t;var o="",i=0,s=0;for(i=a.index;i<t.length;i++){switch(t.charCodeAt(i)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==i&&(o+=t.substring(s,i)),s=i+1,o+=e}return s!==i?o+t.substring(s,i):o}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},a=(t(375),t(41)),o=Object(a.a)(r,(function(){var n=this.$createElement;return(this._self._c||n)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=o.exports},function(n,e,t){"use strict";t.r(e);t(26),t(5),t(27),t(45),t(34);var r={name:"CodeGroup",data:function(){return{codeTabs:[],activeCodeTabIndex:-1}},watch:{activeCodeTabIndex:function(n){this.codeTabs.forEach((function(n){n.elm.classList.remove("theme-code-block__active")})),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted:function(){var n=this;this.codeTabs=(this.$slots.default||[]).filter((function(n){return Boolean(n.componentOptions)})).map((function(e,t){return""===e.componentOptions.propsData.active&&(n.activeCodeTabIndex=t),{title:e.componentOptions.propsData.title,elm:e.elm}})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab:function(n){this.activeCodeTabIndex=n}}},a=(t(376),t(41)),o=Object(a.a)(r,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"theme-code-group"},[t("div",{staticClass:"theme-code-group__nav"},[t("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(e,r){return t("li",{key:e.title,staticClass:"theme-code-group__li"},[t("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(e.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?t("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=o.exports},function(n,e,t){"use strict";var r=t(43),a=t(14),o=t(1),i=t(114),s=t(131),c=t(9),l=t(19),u=t(129),p=t(138),d=t(47),f=t(11),m=t(55),h=t(133),v=t(115),g=t(98),b=t(99),y=t(3),x=b.UNSUPPORTED_Y,w=Math.min,k=[].push,j=o(/./.exec),S=o(k),O=o("".slice);i("split",(function(n,e,t){var o;return o="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(n,t){var o=f(l(this)),i=void 0===t?4294967295:t>>>0;if(0===i)return[];if(void 0===n)return[o];if(!s(n))return a(e,o,n,i);for(var c,u,p,d=[],m=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(n.sticky?"y":""),v=0,b=new RegExp(n.source,m+"g");(c=a(g,b,o))&&!((u=b.lastIndex)>v&&(S(d,O(o,v,c.index)),c.length>1&&c.index<o.length&&r(k,d,h(c,1)),p=c[0].length,v=u,d.length>=i));)b.lastIndex===c.index&&b.lastIndex++;return v===o.length?!p&&j(b,"")||S(d,""):S(d,O(o,v)),d.length>i?h(d,0,i):d}:"0".split(void 0,0).length?function(n,t){return void 0===n&&0===t?[]:a(e,this,n,t)}:e,[function(e,t){var r=l(this),i=null==e?void 0:m(e,n);return i?a(i,e,r,t):a(o,f(r),e,t)},function(n,r){var a=c(this),i=f(n),s=t(o,a,i,r,o!==e);if(s.done)return s.value;var l=u(a,RegExp),m=a.unicode,h=(a.ignoreCase?"i":"")+(a.multiline?"m":"")+(a.unicode?"u":"")+(x?"g":"y"),g=new l(x?"^(?:"+a.source+")":a,h),b=void 0===r?4294967295:r>>>0;if(0===b)return[];if(0===i.length)return null===v(g,i)?[i]:[];for(var y=0,k=0,j=[];k<i.length;){g.lastIndex=x?0:k;var C,E=v(g,x?O(i,k):i);if(null===E||(C=w(d(g.lastIndex+(x?k:0)),i.length))===y)k=p(i,k,m);else{if(S(j,O(i,y,k)),j.length===b)return j;for(var A=1;A<=E.length-1;A++)if(S(j,E[A]),j.length===b)return j;k=y=C}}return S(j,O(i,y)),j}]}),!!y((function(){var n=/(?:)/,e=n.exec;n.exec=function(){return e.apply(this,arguments)};var t="ab".split(n);return 2!==t.length||"a"!==t[0]||"b"!==t[1]})),x)},function(n,e,t){"use strict";var r=t(14),a=t(114),o=t(9),i=t(47),s=t(11),c=t(19),l=t(55),u=t(138),p=t(115);a("match",(function(n,e,t){return[function(e){var t=c(this),a=null==e?void 0:l(e,n);return a?r(a,e,t):new RegExp(e)[n](s(t))},function(n){var r=o(this),a=s(n),c=t(e,r,a);if(c.done)return c.value;if(!r.global)return p(r,a);var l=r.unicode;r.lastIndex=0;for(var d,f=[],m=0;null!==(d=p(r,a));){var h=s(d[0]);f[m]=h,""===h&&(r.lastIndex=u(a,i(r.lastIndex),l)),m++}return 0===m?null:f}]}))},function(n,e,t){var r=t(1),a=t(19),o=t(11),i=t(228),s=r("".replace),c="["+i+"]",l=RegExp("^"+c+c+"*"),u=RegExp(c+c+"*$"),p=function(n){return function(e){var t=o(a(e));return 1&n&&(t=s(t,l,"")),2&n&&(t=s(t,u,"")),t}};n.exports={start:p(1),end:p(2),trim:p(3)}},function(n,e){n.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(n,e,t){"use strict";var r=t(167).IteratorPrototype,a=t(42),o=t(56),i=t(64),s=t(70),c=function(){return this};n.exports=function(n,e,t,l){var u=e+" Iterator";return n.prototype=a(r,{next:o(+!l,t)}),i(n,u,!1,!0),s[u]=c,n}},function(n,e,t){var r=t(15);n.exports=function(n,e,t){for(var a in e)r(n,a,e[a],t);return n}},function(n,e,t){var r=t(0),a=t(38),o=r.TypeError;n.exports=function(n,e){if(a(e,n))return n;throw o("Incorrect invocation")}},function(n,e,t){"use strict";var r=t(2),a=t(121).includes,o=t(112);r({target:"Array",proto:!0},{includes:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}}),o("includes")},function(n,e,t){"use strict";var r=t(2),a=t(1),o=t(130),i=t(19),s=t(11),c=t(132),l=a("".indexOf);r({target:"String",proto:!0,forced:!c("includes")},{includes:function(n){return!!~l(s(i(this)),s(o(n)),arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){var r=t(133),a=Math.floor,o=function(n,e){var t=n.length,c=a(t/2);return t<8?i(n,e):s(n,o(r(n,0,c),e),o(r(n,c),e),e)},i=function(n,e){for(var t,r,a=n.length,o=1;o<a;){for(r=o,t=n[o];r&&e(n[r-1],t)>0;)n[r]=n[--r];r!==o++&&(n[r]=t)}return n},s=function(n,e,t,r){for(var a=e.length,o=t.length,i=0,s=0;i<a||s<o;)n[i+s]=i<a&&s<o?r(e[i],t[s])<=0?e[i++]:t[s++]:i<a?e[i++]:t[s++];return n};n.exports=o},function(n,e,t){var r=t(1),a=t(19),o=t(11),i=/"/g,s=r("".replace);n.exports=function(n,e,t,r){var c=o(a(n)),l="<"+e;return""!==t&&(l+=" "+t+'="'+s(o(r),i,"&quot;")+'"'),l+">"+c+"</"+e+">"}},function(n,e,t){var r=t(3);n.exports=function(n){return r((function(){var e=""[n]('"');return e!==e.toLowerCase()||e.split('"').length>3}))}},function(n,e,t){var r=t(8),a=t(0),o=t(1),i=t(93),s=t(137),c=t(32),l=t(13).f,u=t(61).f,p=t(38),d=t(131),f=t(11),m=t(135),h=t(99),v=t(15),g=t(3),b=t(12),y=t(35).enforce,x=t(170),w=t(6),k=t(136),j=t(190),S=w("match"),O=a.RegExp,C=O.prototype,E=a.SyntaxError,A=o(m),_=o(C.exec),B=o("".charAt),P=o("".replace),T=o("".indexOf),I=o("".slice),M=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,D=/a/g,L=/a/g,q=new O(D)!==D,R=h.MISSED_STICKY,N=h.UNSUPPORTED_Y,z=r&&(!q||R||k||j||g((function(){return L[S]=!1,O(D)!=D||O(L)==L||"/a/i"!=O(D,"i")})));if(i("RegExp",z)){for(var $=function(n,e){var t,r,a,o,i,l,u=p(C,this),m=d(n),h=void 0===e,v=[],g=n;if(!u&&m&&h&&n.constructor===$)return n;if((m||p(C,n))&&(n=n.source,h&&(e="flags"in g?g.flags:A(g))),n=void 0===n?"":f(n),e=void 0===e?"":f(e),g=n,k&&"dotAll"in D&&(r=!!e&&T(e,"s")>-1)&&(e=P(e,/s/g,"")),t=e,R&&"sticky"in D&&(a=!!e&&T(e,"y")>-1)&&N&&(e=P(e,/y/g,"")),j&&(n=(o=function(n){for(var e,t=n.length,r=0,a="",o=[],i={},s=!1,c=!1,l=0,u="";r<=t;r++){if("\\"===(e=B(n,r)))e+=B(n,++r);else if("]"===e)s=!1;else if(!s)switch(!0){case"["===e:s=!0;break;case"("===e:_(M,I(n,r+1))&&(r+=2,c=!0),a+=e,l++;continue;case">"===e&&c:if(""===u||b(i,u))throw new E("Invalid capture group name");i[u]=!0,o[o.length]=[u,l],c=!1,u="";continue}c?u+=e:a+=e}return[a,o]}(n))[0],v=o[1]),i=s(O(n,e),u?this:C,$),(r||a||v.length)&&(l=y(i),r&&(l.dotAll=!0,l.raw=$(function(n){for(var e,t=n.length,r=0,a="",o=!1;r<=t;r++)"\\"!==(e=B(n,r))?o||"."!==e?("["===e?o=!0:"]"===e&&(o=!1),a+=e):a+="[\\s\\S]":a+=e+B(n,++r);return a}(n),t)),a&&(l.sticky=!0),v.length&&(l.groups=v)),n!==g)try{c(i,"source",""===g?"(?:)":g)}catch(n){}return i},F=function(n){n in $||l($,n,{configurable:!0,get:function(){return O[n]},set:function(e){O[n]=e}})},U=u(O),V=0;U.length>V;)F(U[V++]);C.constructor=$,$.prototype=C,v(a,"RegExp",$)}x("RegExp")},function(n,e,t){var r=t(0),a=t(8),o=t(136),i=t(31),s=t(13).f,c=t(35).get,l=RegExp.prototype,u=r.TypeError;a&&o&&s(l,"dotAll",{configurable:!0,get:function(){if(this!==l){if("RegExp"===i(this))return!!c(this).dotAll;throw u("Incompatible receiver, RegExp required")}}})},function(n,e,t){n.exports=t(388)},function(n,e,t){var r=t(0),a=t(14),o=t(7),i=t(10),s=r.TypeError;n.exports=function(n,e){var t,r;if("string"===e&&o(t=n.toString)&&!i(r=a(t,n)))return r;if(o(t=n.valueOf)&&!i(r=a(t,n)))return r;if("string"!==e&&o(t=n.toString)&&!i(r=a(t,n)))return r;throw s("Can't convert object to primitive value")}},function(n,e,t){var r=t(0),a=t(7),o=t(92),i=r.WeakMap;n.exports=a(i)&&/native code/.test(o(i))},function(n,e,t){var r=t(0),a=t(7),o=r.String,i=r.TypeError;n.exports=function(n){if("object"==typeof n||a(n))return n;throw i("Can't set "+o(n)+" as a prototype")}},function(n,e,t){"use strict";var r,a,o,i,s=t(2),c=t(29),l=t(0),u=t(22),p=t(14),d=t(169),f=t(15),m=t(230),h=t(71),v=t(64),g=t(170),b=t(44),y=t(7),x=t(10),w=t(231),k=t(92),j=t(245),S=t(173),O=t(129),C=t(175).set,E=t(246),A=t(177),_=t(249),B=t(178),P=t(250),T=t(251),I=t(35),M=t(93),D=t(6),L=t(252),q=t(95),R=t(60),N=D("species"),z="Promise",$=I.getterFor(z),F=I.set,U=I.getterFor(z),V=d&&d.prototype,H=d,W=V,G=l.TypeError,K=l.document,X=l.process,J=B.f,Q=J,Y=!!(K&&K.createEvent&&l.dispatchEvent),Z=y(l.PromiseRejectionEvent),nn=!1,en=M(z,(function(){var n=k(H),e=n!==String(H);if(!e&&66===R)return!0;if(c&&!W.finally)return!0;if(R>=51&&/native code/.test(n))return!1;var t=new H((function(n){n(1)})),r=function(n){n((function(){}),(function(){}))};return(t.constructor={})[N]=r,!(nn=t.then((function(){}))instanceof r)||!e&&L&&!Z})),tn=en||!S((function(n){H.all(n).catch((function(){}))})),rn=function(n){var e;return!(!x(n)||!y(e=n.then))&&e},an=function(n,e){var t,r,a,o=e.value,i=1==e.state,s=i?n.ok:n.fail,c=n.resolve,l=n.reject,u=n.domain;try{s?(i||(2===e.rejection&&un(e),e.rejection=1),!0===s?t=o:(u&&u.enter(),t=s(o),u&&(u.exit(),a=!0)),t===n.promise?l(G("Promise-chain cycle")):(r=rn(t))?p(r,t,c,l):c(t)):l(o)}catch(n){u&&!a&&u.exit(),l(n)}},on=function(n,e){n.notified||(n.notified=!0,E((function(){for(var t,r=n.reactions;t=r.get();)an(t,n);n.notified=!1,e&&!n.rejection&&cn(n)})))},sn=function(n,e,t){var r,a;Y?((r=K.createEvent("Event")).promise=e,r.reason=t,r.initEvent(n,!1,!0),l.dispatchEvent(r)):r={promise:e,reason:t},!Z&&(a=l["on"+n])?a(r):"unhandledrejection"===n&&_("Unhandled promise rejection",t)},cn=function(n){p(C,l,(function(){var e,t=n.facade,r=n.value;if(ln(n)&&(e=P((function(){q?X.emit("unhandledRejection",r,t):sn("unhandledrejection",t,r)})),n.rejection=q||ln(n)?2:1,e.error))throw e.value}))},ln=function(n){return 1!==n.rejection&&!n.parent},un=function(n){p(C,l,(function(){var e=n.facade;q?X.emit("rejectionHandled",e):sn("rejectionhandled",e,n.value)}))},pn=function(n,e,t){return function(r){n(e,r,t)}},dn=function(n,e,t){n.done||(n.done=!0,t&&(n=t),n.value=e,n.state=2,on(n,!0))},fn=function(n,e,t){if(!n.done){n.done=!0,t&&(n=t);try{if(n.facade===e)throw G("Promise can't be resolved itself");var r=rn(e);r?E((function(){var t={done:!1};try{p(r,e,pn(fn,t,n),pn(dn,t,n))}catch(e){dn(t,e,n)}})):(n.value=e,n.state=1,on(n,!1))}catch(e){dn({done:!1},e,n)}}};if(en&&(W=(H=function(n){w(this,W),b(n),p(r,this);var e=$(this);try{n(pn(fn,e),pn(dn,e))}catch(n){dn(e,n)}}).prototype,(r=function(n){F(this,{type:z,done:!1,notified:!1,parent:!1,reactions:new T,rejection:!1,state:0,value:void 0})}).prototype=m(W,{then:function(n,e){var t=U(this),r=J(O(this,H));return t.parent=!0,r.ok=!y(n)||n,r.fail=y(e)&&e,r.domain=q?X.domain:void 0,0==t.state?t.reactions.add(r):E((function(){an(r,t)})),r.promise},catch:function(n){return this.then(void 0,n)}}),a=function(){var n=new r,e=$(n);this.promise=n,this.resolve=pn(fn,e),this.reject=pn(dn,e)},B.f=J=function(n){return n===H||n===o?new a(n):Q(n)},!c&&y(d)&&V!==Object.prototype)){i=V.then,nn||(f(V,"then",(function(n,e){var t=this;return new H((function(n,e){p(i,t,n,e)})).then(n,e)}),{unsafe:!0}),f(V,"catch",W.catch,{unsafe:!0}));try{delete V.constructor}catch(n){}h&&h(V,W)}s({global:!0,wrap:!0,forced:en},{Promise:H}),v(H,z,!1,!0),g(z),o=u(z),s({target:z,stat:!0,forced:en},{reject:function(n){var e=J(this);return p(e.reject,void 0,n),e.promise}}),s({target:z,stat:!0,forced:c||en},{resolve:function(n){return A(c&&this===o?H:this,n)}}),s({target:z,stat:!0,forced:tn},{all:function(n){var e=this,t=J(e),r=t.resolve,a=t.reject,o=P((function(){var t=b(e.resolve),o=[],i=0,s=1;j(n,(function(n){var c=i++,l=!1;s++,p(t,e,n).then((function(n){l||(l=!0,o[c]=n,--s||r(o))}),a)})),--s||r(o)}));return o.error&&a(o.value),t.promise},race:function(n){var e=this,t=J(e),r=t.reject,a=P((function(){var a=b(e.resolve);j(n,(function(n){p(a,e,n).then(t.resolve,r)}))}));return a.error&&r(a.value),t.promise}})},function(n,e,t){var r=t(0),a=t(63),o=t(14),i=t(9),s=t(89),c=t(171),l=t(33),u=t(38),p=t(153),d=t(113),f=t(172),m=r.TypeError,h=function(n,e){this.stopped=n,this.result=e},v=h.prototype;n.exports=function(n,e,t){var r,g,b,y,x,w,k,j=t&&t.that,S=!(!t||!t.AS_ENTRIES),O=!(!t||!t.IS_ITERATOR),C=!(!t||!t.INTERRUPTED),E=a(e,j),A=function(n){return r&&f(r,"normal",n),new h(!0,n)},_=function(n){return S?(i(n),C?E(n[0],n[1],A):E(n[0],n[1])):C?E(n,A):E(n)};if(O)r=n;else{if(!(g=d(n)))throw m(s(n)+" is not iterable");if(c(g)){for(b=0,y=l(n);y>b;b++)if((x=_(n[b]))&&u(v,x))return x;return new h(!1)}r=p(n,g)}for(w=r.next;!(k=o(w,r)).done;){try{x=_(k.value)}catch(n){f(r,"throw",n)}if("object"==typeof x&&x&&u(v,x))return x}return new h(!1)}},function(n,e,t){var r,a,o,i,s,c,l,u,p=t(0),d=t(63),f=t(39).f,m=t(175).set,h=t(176),v=t(247),g=t(248),b=t(95),y=p.MutationObserver||p.WebKitMutationObserver,x=p.document,w=p.process,k=p.Promise,j=f(p,"queueMicrotask"),S=j&&j.value;S||(r=function(){var n,e;for(b&&(n=w.domain)&&n.exit();a;){e=a.fn,a=a.next;try{e()}catch(n){throw a?i():o=void 0,n}}o=void 0,n&&n.enter()},h||b||g||!y||!x?!v&&k&&k.resolve?((l=k.resolve(void 0)).constructor=k,u=d(l.then,l),i=function(){u(r)}):b?i=function(){w.nextTick(r)}:(m=d(m,p),i=function(){m(r)}):(s=!0,c=x.createTextNode(""),new y(r).observe(c,{characterData:!0}),i=function(){c.data=s=!s})),n.exports=S||function(n){var e={fn:n,next:void 0};o&&(o.next=e),a||(a=e,i()),o=e}},function(n,e,t){var r=t(37),a=t(0);n.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==a.Pebble},function(n,e,t){var r=t(37);n.exports=/web0s(?!.*chrome)/i.test(r)},function(n,e,t){var r=t(0);n.exports=function(n,e){var t=r.console;t&&t.error&&(1==arguments.length?t.error(n):t.error(n,e))}},function(n,e){n.exports=function(n){try{return{error:!1,value:n()}}catch(n){return{error:!0,value:n}}}},function(n,e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(n){var e={item:n,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var n=this.head;if(n)return this.head=n.next,this.tail===n&&(this.tail=null),n.item}},n.exports=t},function(n,e){n.exports="object"==typeof window},function(n,e,t){var r=t(2),a=t(254);r({target:"Object",stat:!0,forced:Object.assign!==a},{assign:a})},function(n,e,t){"use strict";var r=t(8),a=t(1),o=t(14),i=t(3),s=t(90),c=t(126),l=t(124),u=t(21),p=t(67),d=Object.assign,f=Object.defineProperty,m=a([].concat);n.exports=!d||i((function(){if(r&&1!==d({b:1},d(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var n={},e={},t=Symbol();return n[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(n){e[n]=n})),7!=d({},n)[t]||"abcdefghijklmnopqrst"!=s(d({},e)).join("")}))?function(n,e){for(var t=u(n),a=arguments.length,i=1,d=c.f,f=l.f;a>i;)for(var h,v=p(arguments[i++]),g=d?m(s(v),d(v)):s(v),b=g.length,y=0;b>y;)h=g[y++],r&&!o(f,v,h)||(t[h]=v[h]);return t}:d},function(n,e,t){"use strict";var r=t(2),a=t(29),o=t(169),i=t(3),s=t(22),c=t(7),l=t(129),u=t(177),p=t(15);if(r({target:"Promise",proto:!0,real:!0,forced:!!o&&i((function(){o.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(n){var e=l(this,s("Promise")),t=c(n);return this.then(t?function(t){return u(e,n()).then((function(){return t}))}:n,t?function(t){return u(e,n()).then((function(){throw t}))}:n)}}),!a&&c(o)){var d=s("Promise").prototype.finally;o.prototype.finally!==d&&p(o.prototype,"finally",d,{unsafe:!0})}},function(n,e,t){"use strict";var r=t(128),a=t(82);n.exports=r?{}.toString:function(){return"[object "+a(this)+"]"}},function(n,e,t){var r=t(0),a=t(65),o=t(94),i=t(10),s=t(6)("species"),c=r.Array;n.exports=function(n){var e;return a(n)&&(e=n.constructor,(o(e)&&(e===c||a(e.prototype))||i(e)&&null===(e=e[s]))&&(e=void 0)),void 0===e?c:e}},function(n,e,t){"use strict";var r=t(2),a=t(259).left,o=t(54),i=t(60),s=t(95);r({target:"Array",proto:!0,forced:!o("reduce")||!s&&i>79&&i<83},{reduce:function(n){var e=arguments.length;return a(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(0),a=t(44),o=t(21),i=t(67),s=t(33),c=r.TypeError,l=function(n){return function(e,t,r,l){a(t);var u=o(e),p=i(u),d=s(u),f=n?d-1:0,m=n?-1:1;if(r<2)for(;;){if(f in p){l=p[f],f+=m;break}if(f+=m,n?f<0:d<=f)throw c("Reduce of empty array with no initial value")}for(;n?f>=0:d>f;f+=m)f in p&&(l=t(l,p[f],f,u));return l}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var r,a=t(2),o=t(1),i=t(39).f,s=t(47),c=t(11),l=t(130),u=t(19),p=t(132),d=t(29),f=o("".startsWith),m=o("".slice),h=Math.min,v=p("startsWith");a({target:"String",proto:!0,forced:!!(d||v||(r=i(String.prototype,"startsWith"),!r||r.writable))&&!v},{startsWith:function(n){var e=c(u(this));l(n);var t=s(h(arguments.length>1?arguments[1]:void 0,e.length)),r=c(n);return f?f(e,r,t):m(e,t,t+r.length)===r}})},function(n,e,t){var r=t(2),a=t(185),o=t(3),i=t(10),s=t(262).onFreeze,c=Object.freeze;r({target:"Object",stat:!0,forced:o((function(){c(1)})),sham:!a},{freeze:function(n){return c&&i(n)?c(s(n)):n}})},function(n,e,t){var r=t(2),a=t(1),o=t(69),i=t(10),s=t(12),c=t(13).f,l=t(61),u=t(186),p=t(263),d=t(85),f=t(185),m=!1,h=d("meta"),v=0,g=function(n){c(n,h,{value:{objectID:"O"+v++,weakData:{}}})},b=n.exports={enable:function(){b.enable=function(){},m=!0;var n=l.f,e=a([].splice),t={};t[h]=1,n(t).length&&(l.f=function(t){for(var r=n(t),a=0,o=r.length;a<o;a++)if(r[a]===h){e(r,a,1);break}return r},r({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:u.f}))},fastKey:function(n,e){if(!i(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!s(n,h)){if(!p(n))return"F";if(!e)return"E";g(n)}return n[h].objectID},getWeakData:function(n,e){if(!s(n,h)){if(!p(n))return!0;if(!e)return!1;g(n)}return n[h].weakData},onFreeze:function(n){return f&&m&&p(n)&&!s(n,h)&&g(n),n}};o[h]=!0},function(n,e,t){var r=t(3),a=t(10),o=t(31),i=t(264),s=Object.isExtensible,c=r((function(){s(1)}));n.exports=c||i?function(n){return!!a(n)&&((!i||"ArrayBuffer"!=o(n))&&(!s||s(n)))}:s},function(n,e,t){var r=t(3);n.exports=r((function(){if("function"==typeof ArrayBuffer){var n=new ArrayBuffer(8);Object.isExtensible(n)&&Object.defineProperty(n,"a",{value:8})}}))},function(n,e,t){var r=t(0);n.exports=r},function(n,e,t){"use strict";var r=t(0),a=t(63),o=t(14),i=t(21),s=t(267),c=t(171),l=t(94),u=t(33),p=t(73),d=t(153),f=t(113),m=r.Array;n.exports=function(n){var e=i(n),t=l(this),r=arguments.length,h=r>1?arguments[1]:void 0,v=void 0!==h;v&&(h=a(h,r>2?arguments[2]:void 0));var g,b,y,x,w,k,j=f(e),S=0;if(!j||this==m&&c(j))for(g=u(e),b=t?new this(g):m(g);g>S;S++)k=v?h(e[S],S):e[S],p(b,S,k);else for(w=(x=d(e,j)).next,b=t?new this:[];!(y=o(w,x)).done;S++)k=v?s(x,h,[y.value,S],!0):y.value,p(b,S,k);return b.length=S,b}},function(n,e,t){var r=t(9),a=t(172);n.exports=function(n,e,t,o){try{return o?e(r(t)[0],t[1]):e(t)}catch(e){a(n,"throw",e)}}},function(n,e,t){"use strict";var r=t(22),a=t(12),o=t(32),i=t(38),s=t(71),c=t(125),l=t(137),u=t(191),p=t(269),d=t(270),f=t(271),m=t(29);n.exports=function(n,e,t,h){var v=h?2:1,g=n.split("."),b=g[g.length-1],y=r.apply(null,g);if(y){var x=y.prototype;if(!m&&a(x,"cause")&&delete x.cause,!t)return y;var w=r("Error"),k=e((function(n,e){var t=u(h?e:n,void 0),r=h?new y(n):new y;return void 0!==t&&o(r,"message",t),f&&o(r,"stack",d(r.stack,2)),this&&i(x,this)&&l(r,this,k),arguments.length>v&&p(r,arguments[v]),r}));if(k.prototype=x,"Error"!==b&&(s?s(k,w):c(k,w,{name:!0})),c(k,y),!m)try{x.name!==b&&o(x,"name",b),x.constructor=k}catch(n){}return k}}},function(n,e,t){var r=t(10),a=t(32);n.exports=function(n,e){r(e)&&"cause"in e&&a(n,"cause",e.cause)}},function(n,e,t){var r=t(1)("".replace),a=String(Error("zxcasd").stack),o=/\n\s*at [^:]*:[^\n]*/,i=o.test(a);n.exports=function(n,e){if(i&&"string"==typeof n)for(;e--;)n=r(n,o,"");return n}},function(n,e,t){var r=t(3),a=t(56);n.exports=!r((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",a(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var r=t(8),a=t(3),o=t(9),i=t(42),s=t(191),c=Error.prototype.toString,l=a((function(){if(r){var n=i(Object.defineProperty({},"name",{get:function(){return this===n}}));if("true"!==c.call(n))return!0}return"2: 1"!==c.call({message:1,name:2})||"Error"!==c.call({})}));n.exports=l?function(){var n=o(this),e=s(n.name,"Error"),t=s(n.message);return e?t?e+": "+t:e:t}:c},function(n,e,t){var r=t(1),a=t(21),o=Math.floor,i=r("".charAt),s=r("".replace),c=r("".slice),l=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,u=/\$([$&'`]|\d{1,2})/g;n.exports=function(n,e,t,r,p,d){var f=t+n.length,m=r.length,h=u;return void 0!==p&&(p=a(p),h=l),s(d,h,(function(a,s){var l;switch(i(s,0)){case"$":return"$";case"&":return n;case"`":return c(e,0,t);case"'":return c(e,f);case"<":l=p[c(s,1,-1)];break;default:var u=+s;if(0===u)return a;if(u>m){var d=o(u/10);return 0===d?a:d<=m?void 0===r[d-1]?i(s,1):r[d-1]+i(s,1):a}l=r[u-1]}return void 0===l?"":l}))}},function(n,e,t){var r=t(2),a=t(0),o=t(22),i=t(43),s=t(1),c=t(3),l=a.Array,u=o("JSON","stringify"),p=s(/./.exec),d=s("".charAt),f=s("".charCodeAt),m=s("".replace),h=s(1..toString),v=/[\uD800-\uDFFF]/g,g=/^[\uD800-\uDBFF]$/,b=/^[\uDC00-\uDFFF]$/,y=function(n,e,t){var r=d(t,e-1),a=d(t,e+1);return p(g,n)&&!p(b,a)||p(b,n)&&!p(g,r)?"\\u"+h(f(n,0),16):n},x=c((function(){return'"\\udf06\\ud834"'!==u("\udf06\ud834")||'"\\udead"'!==u("\udead")}));u&&r({target:"JSON",stat:!0,forced:x},{stringify:function(n,e,t){for(var r=0,a=arguments.length,o=l(a);r<a;r++)o[r]=arguments[r];var s=i(u,null,o);return"string"==typeof s?m(s,v,y):s}})},function(n,e,t){var r=t(193),a=t(276);n.exports=function n(e,t,o,i,s){var c=-1,l=e.length;for(o||(o=a),s||(s=[]);++c<l;){var u=e[c];t>0&&o(u)?t>1?n(u,t-1,o,i,s):r(s,u):i||(s[s.length]=u)}return s}},function(n,e,t){var r=t(75),a=t(139),o=t(36),i=r?r.isConcatSpreadable:void 0;n.exports=function(n){return o(n)||a(n)||!!(i&&n&&n[i])}},function(n,e,t){var r=t(66),a=t(59);n.exports=function(n){return a(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(75),a=Object.prototype,o=a.hasOwnProperty,i=a.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=o.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var a=i.call(n);return r&&(e?n[s]=t:delete n[s]),a}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(281),a=t(337),o=t(147),i=t(36),s=t(348);n.exports=function(n){return"function"==typeof n?n:null==n?o:"object"==typeof n?i(n)?a(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(282),a=t(336),o=t(210);n.exports=function(n){var e=a(n);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(195),a=t(199);n.exports=function(n,e,t,o){var i=t.length,s=i,c=!o;if(null==n)return!s;for(n=Object(n);i--;){var l=t[i];if(c&&l[2]?l[1]!==n[l[0]]:!(l[0]in n))return!1}for(;++i<s;){var u=(l=t[i])[0],p=n[u],d=l[1];if(c&&l[2]){if(void 0===p&&!(u in n))return!1}else{var f=new r;if(o)var m=o(p,d,u,n,e,f);if(!(void 0===m?a(d,p,3,o,f):m))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(101),a=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():a.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(101);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(101);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(101);n.exports=function(n,e){var t=this.__data__,a=r(t,n);return a<0?(++this.size,t.push([n,e])):t[a][1]=e,this}},function(n,e,t){var r=t(100);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(100),a=t(140),o=t(142);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var i=t.__data__;if(!a||i.length<199)return i.push([n,e]),this.size=++t.size,this;t=this.__data__=new o(i)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(197),a=t(294),o=t(141),i=t(198),s=/^\[object .+?Constructor\]$/,c=Function.prototype,l=Object.prototype,u=c.toString,p=l.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!o(n)||a(n))&&(r(n)?d:s).test(i(n))}},function(n,e,t){var r,a=t(295),o=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!o&&o in n}},function(n,e,t){var r=t(40)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(298),a=t(100),o=t(140);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||a),string:new r}}},function(n,e,t){var r=t(299),a=t(300),o=t(301),i=t(302),s=t(303);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=o,c.prototype.has=i,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(102);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(102),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return a.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(102),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:a.call(e,n)}},function(n,e,t){var r=t(102);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(103);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(103);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(103);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(103);n.exports=function(n,e){var t=r(this,n),a=t.size;return t.set(n,e),this.size+=t.size==a?0:1,this}},function(n,e,t){var r=t(195),a=t(200),o=t(313),i=t(316),s=t(332),c=t(36),l=t(204),u=t(206),p="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,f,m,h){var v=c(n),g=c(e),b=v?"[object Array]":s(n),y=g?"[object Array]":s(e),x=(b="[object Arguments]"==b?p:b)==p,w=(y="[object Arguments]"==y?p:y)==p,k=b==y;if(k&&l(n)){if(!l(e))return!1;v=!0,x=!1}if(k&&!x)return h||(h=new r),v||u(n)?a(n,e,t,f,m,h):o(n,e,b,t,f,m,h);if(!(1&t)){var j=x&&d.call(n,"__wrapped__"),S=w&&d.call(e,"__wrapped__");if(j||S){var O=j?n.value():n,C=S?e.value():e;return h||(h=new r),m(O,C,t,f,h)}}return!!k&&(h||(h=new r),i(n,e,t,f,m,h))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(75),a=t(314),o=t(196),i=t(200),s=t(315),c=t(143),l=r?r.prototype:void 0,u=l?l.valueOf:void 0;n.exports=function(n,e,t,r,l,p,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new a(n),new a(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var f=s;case"[object Set]":var m=1&r;if(f||(f=c),n.size!=e.size&&!m)return!1;var h=d.get(n);if(h)return h==e;r|=2,d.set(n,e);var v=i(f(n),f(e),r,l,p,d);return d.delete(n),v;case"[object Symbol]":if(u)return u.call(n)==u.call(e)}return!1}},function(n,e,t){var r=t(40).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(317),a=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,o,i,s){var c=1&t,l=r(n),u=l.length;if(u!=r(e).length&&!c)return!1;for(var p=u;p--;){var d=l[p];if(!(c?d in e:a.call(e,d)))return!1}var f=s.get(n),m=s.get(e);if(f&&m)return f==e&&m==n;var h=!0;s.set(n,e),s.set(e,n);for(var v=c;++p<u;){var g=n[d=l[p]],b=e[d];if(o)var y=c?o(b,g,d,e,n,s):o(g,b,d,n,e,s);if(!(void 0===y?g===b||i(g,b,t,o,s):y)){h=!1;break}v||(v="constructor"==d)}if(h&&!v){var x=n.constructor,w=e.constructor;x==w||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof w&&w instanceof w||(h=!1)}return s.delete(n),s.delete(e),h}},function(n,e,t){var r=t(318),a=t(319),o=t(203);n.exports=function(n){return r(n,o,a)}},function(n,e,t){var r=t(193),a=t(36);n.exports=function(n,e,t){var o=e(n);return a(n)?o:r(o,t(n))}},function(n,e,t){var r=t(320),a=t(321),o=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(n){return null==n?[]:(n=Object(n),r(i(n),(function(e){return o.call(n,e)})))}:a;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=0,o=[];++t<r;){var i=n[t];e(i,t,n)&&(o[a++]=i)}return o}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(323),a=t(139),o=t(36),i=t(204),s=t(205),c=t(206),l=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=o(n),u=!t&&a(n),p=!t&&!u&&i(n),d=!t&&!u&&!p&&c(n),f=t||u||p||d,m=f?r(n.length,String):[],h=m.length;for(var v in n)!e&&!l.call(n,v)||f&&("length"==v||p&&("offset"==v||"parent"==v)||d&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||s(v,h))||m.push(v);return m}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(66),a=t(144),o=t(59),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,n.exports=function(n){return o(n)&&a(n.length)&&!!i[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(194),a=e&&!e.nodeType&&e,o=a&&"object"==typeof n&&n&&!n.nodeType&&n,i=o&&o.exports===a&&r.process,s=function(){try{var n=o&&o.require&&o.require("util").types;return n||i&&i.binding&&i.binding("util")}catch(n){}}();n.exports=s}).call(this,t(150)(n))},function(n,e,t){var r=t(329),a=t(330),o=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return a(n);var e=[];for(var t in Object(n))o.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(331)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(333),a=t(140),o=t(334),i=t(208),s=t(335),c=t(66),l=t(198),u=l(r),p=l(a),d=l(o),f=l(i),m=l(s),h=c;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||a&&"[object Map]"!=h(new a)||o&&"[object Promise]"!=h(o.resolve())||i&&"[object Set]"!=h(new i)||s&&"[object WeakMap]"!=h(new s))&&(h=function(n){var e=c(n),t="[object Object]"==e?n.constructor:void 0,r=t?l(t):"";if(r)switch(r){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case f:return"[object Set]";case m:return"[object WeakMap]"}return e}),n.exports=h},function(n,e,t){var r=t(49)(t(40),"DataView");n.exports=r},function(n,e,t){var r=t(49)(t(40),"Promise");n.exports=r},function(n,e,t){var r=t(49)(t(40),"WeakMap");n.exports=r},function(n,e,t){var r=t(209),a=t(203);n.exports=function(n){for(var e=a(n),t=e.length;t--;){var o=e[t],i=n[o];e[t]=[o,i,r(i)]}return e}},function(n,e,t){var r=t(199),a=t(338),o=t(345),i=t(145),s=t(209),c=t(210),l=t(104);n.exports=function(n,e){return i(n)&&s(e)?c(l(n),e):function(t){var i=a(t,n);return void 0===i&&i===e?o(t,n):r(e,i,3)}}},function(n,e,t){var r=t(211);n.exports=function(n,e,t){var a=null==n?void 0:r(n,e);return void 0===a?t:a}},function(n,e,t){var r=t(340),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,i=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(a,(function(n,t,r,a){e.push(r?a.replace(o,"$1"):t||n)})),e}));n.exports=i},function(n,e,t){var r=t(341);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(142);function a(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,a=e?e.apply(this,r):r[0],o=t.cache;if(o.has(a))return o.get(a);var i=n.apply(this,r);return t.cache=o.set(a,i)||o,i};return t.cache=new(a.Cache||r),t}a.Cache=r,n.exports=a},function(n,e,t){var r=t(343);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(75),a=t(344),o=t(36),i=t(146),s=r?r.prototype:void 0,c=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(o(e))return a(e,n)+"";if(i(e))return c?c.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=Array(r);++t<r;)a[t]=e(n[t],t,n);return a}},function(n,e,t){var r=t(346),a=t(347);n.exports=function(n,e){return null!=n&&a(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(212),a=t(139),o=t(36),i=t(205),s=t(144),c=t(104);n.exports=function(n,e,t){for(var l=-1,u=(e=r(e,n)).length,p=!1;++l<u;){var d=c(e[l]);if(!(p=null!=n&&t(n,d)))break;n=n[d]}return p||++l!=u?p:!!(u=null==n?0:n.length)&&s(u)&&i(d,u)&&(o(n)||a(n))}},function(n,e,t){var r=t(349),a=t(350),o=t(145),i=t(104);n.exports=function(n){return o(n)?r(i(n)):a(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(211);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(147),a=t(352),o=t(354);n.exports=function(n,e){return o(a(n,e,r),n+"")}},function(n,e,t){var r=t(353),a=Math.max;n.exports=function(n,e,t){return e=a(void 0===e?n.length-1:e,0),function(){for(var o=arguments,i=-1,s=a(o.length-e,0),c=Array(s);++i<s;)c[i]=o[e+i];i=-1;for(var l=Array(e+1);++i<e;)l[i]=o[i];return l[e]=t(c),r(n,this,l)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(355),a=t(358)(r);n.exports=a},function(n,e,t){var r=t(356),a=t(357),o=t(147),i=a?function(n,e){return a(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;n.exports=i},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(49),a=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=a},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var a=t(),o=16-(a-r);if(r=a,o>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(201),a=t(360),o=t(365),i=t(202),s=t(366),c=t(143);n.exports=function(n,e,t){var l=-1,u=a,p=n.length,d=!0,f=[],m=f;if(t)d=!1,u=o;else if(p>=200){var h=e?null:s(n);if(h)return c(h);d=!1,u=i,m=new r}else m=e?[]:f;n:for(;++l<p;){var v=n[l],g=e?e(v):v;if(v=t||0!==v?v:0,d&&g==g){for(var b=m.length;b--;)if(m[b]===g)continue n;e&&m.push(g),f.push(v)}else u(m,g,t)||(m!==f&&m.push(g),f.push(v))}return f}},function(n,e,t){var r=t(361);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(362),a=t(363),o=t(364);n.exports=function(n,e,t){return e==e?o(n,e,t):r(n,a,t)}},function(n,e){n.exports=function(n,e,t,r){for(var a=n.length,o=t+(r?1:-1);r?o--:++o<a;)if(e(n[o],o,n))return o;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,a=n.length;++r<a;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,a=null==n?0:n.length;++r<a;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(208),a=t(367),o=t(143),i=r&&1/o(new r([,-0]))[1]==1/0?function(n){return new r(n)}:a;n.exports=i},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(207),a=t(59);n.exports=function(n){return a(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(1);n.exports=r(1..valueOf)},function(n,e,t){var r=t(1),a=t(47),o=t(11),i=t(373),s=t(19),c=r(i),l=r("".slice),u=Math.ceil,p=function(n){return function(e,t,r){var i,p,d=o(s(e)),f=a(t),m=d.length,h=void 0===r?" ":o(r);return f<=m||""==h?d:((p=c(h,u((i=f-m)/h.length))).length>i&&(p=l(p,0,i)),n?d+p:p+d)}};n.exports={start:p(!1),end:p(!0)}},function(n,e,t){"use strict";var r=t(0),a=t(62),o=t(11),i=t(19),s=r.RangeError;n.exports=function(n){var e=o(i(this)),t="",r=a(n);if(r<0||r==1/0)throw s("Wrong number of repetitions");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(t+=e);return t}},function(n,e,t){var r=t(37);n.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(r)},function(n,e,t){"use strict";t(214)},function(n,e,t){"use strict";t(215)},function(n,e,t){"use strict";var r=t(2),a=t(1),o=t(44),i=t(21),s=t(33),c=t(11),l=t(3),u=t(235),p=t(54),d=t(378),f=t(379),m=t(60),h=t(380),v=[],g=a(v.sort),b=a(v.push),y=l((function(){v.sort(void 0)})),x=l((function(){v.sort(null)})),w=p("sort"),k=!l((function(){if(m)return m<70;if(!(d&&d>3)){if(f)return!0;if(h)return h<603;var n,e,t,r,a="";for(n=65;n<76;n++){switch(e=String.fromCharCode(n),n){case 66:case 69:case 70:case 72:t=3;break;case 68:case 71:t=4;break;default:t=2}for(r=0;r<47;r++)v.push({k:e+r,v:t})}for(v.sort((function(n,e){return e.v-n.v})),r=0;r<v.length;r++)e=v[r].k.charAt(0),a.charAt(a.length-1)!==e&&(a+=e);return"DGBEFHACIJK"!==a}}));r({target:"Array",proto:!0,forced:y||!x||!w||!k},{sort:function(n){void 0!==n&&o(n);var e=i(this);if(k)return void 0===n?g(e):g(e,n);var t,r,a=[],l=s(e);for(r=0;r<l;r++)r in e&&b(a,e[r]);for(u(a,function(n){return function(e,t){return void 0===t?-1:void 0===e?1:void 0!==n?+n(e,t)||0:c(e)>c(t)?1:-1}}(n)),t=a.length,r=0;r<t;)e[r]=a[r++];for(;r<l;)delete e[r++];return e}})},function(n,e,t){var r=t(37).match(/firefox\/(\d+)/i);n.exports=!!r&&+r[1]},function(n,e,t){var r=t(37);n.exports=/MSIE|Trident/.test(r)},function(n,e,t){var r=t(37).match(/AppleWebKit\/(\d+)\./);n.exports=!!r&&+r[1]},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(2),a=t(3),o=t(25),i=t(39).f,s=t(8),c=a((function(){i(1)}));r({target:"Object",stat:!0,forced:!s||c,sham:!s},{getOwnPropertyDescriptor:function(n,e){return i(o(n),e)}})},function(n,e,t){var r=t(2),a=t(8),o=t(120).f;r({target:"Object",stat:!0,forced:Object.defineProperties!==o,sham:!a},{defineProperties:o})},function(n,e,t){"use strict";var r=t(0),a=t(1),o=t(44),i=t(10),s=t(12),c=t(72),l=t(68),u=r.Function,p=a([].concat),d=a([].join),f={},m=function(n,e,t){if(!s(f,e)){for(var r=[],a=0;a<e;a++)r[a]="a["+a+"]";f[e]=u("C,a","return new C("+d(r,",")+")")}return f[e](n,t)};n.exports=l?u.bind:function(n){var e=o(this),t=e.prototype,r=c(arguments,1),a=function(){var t=p(r,c(arguments));return this instanceof a?m(e,t.length,t):e.apply(n,t)};return i(t)&&(a.prototype=t),a}},function(n,e,t){"use strict";t(219)},function(n,e,t){"use strict";t(220)},function(n,e,t){"use strict";t.r(e);t(152),t(244),t(253),t(255);var r=t(4),a=(t(20),t(78),t(5),t(16),t(18),t(45),t(34),Object.freeze({}));function o(n){return null==n}function i(n){return null!=n}function s(n){return!0===n}function c(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function l(n){return null!==n&&"object"==typeof n}var u=Object.prototype.toString;function p(n){return"[object Object]"===u.call(n)}function d(n){return"[object RegExp]"===u.call(n)}function f(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function m(n){return i(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function h(n){return null==n?"":Array.isArray(n)||p(n)&&n.toString===u?JSON.stringify(n,null,2):String(n)}function v(n){var e=parseFloat(n);return isNaN(e)?n:e}function g(n,e){for(var t=Object.create(null),r=n.split(","),a=0;a<r.length;a++)t[r[a]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}g("slot,component",!0);var b=g("key,ref,slot,slot-scope,is");function y(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var x=Object.prototype.hasOwnProperty;function w(n,e){return x.call(n,e)}function k(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var j=/-(\w)/g,S=k((function(n){return n.replace(j,(function(n,e){return e?e.toUpperCase():""}))})),O=k((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),C=/\B([A-Z])/g,E=k((function(n){return n.replace(C,"-$1").toLowerCase()}));var A=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function _(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function B(n,e){for(var t in e)n[t]=e[t];return n}function P(n){for(var e={},t=0;t<n.length;t++)n[t]&&B(e,n[t]);return e}function T(n,e,t){}var I=function(n,e,t){return!1},M=function(n){return n};function D(n,e){if(n===e)return!0;var t=l(n),r=l(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var a=Array.isArray(n),o=Array.isArray(e);if(a&&o)return n.length===e.length&&n.every((function(n,t){return D(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(a||o)return!1;var i=Object.keys(n),s=Object.keys(e);return i.length===s.length&&i.every((function(t){return D(n[t],e[t])}))}catch(n){return!1}}function L(n,e){for(var t=0;t<n.length;t++)if(D(n[t],e))return t;return-1}function q(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}var R=["component","directive","filter"],N=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],z={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:I,isReservedAttr:I,isUnknownElement:I,getTagNamespace:T,parsePlatformTagName:M,mustUseProp:I,async:!0,_lifecycleHooks:N},$=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function F(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var U=new RegExp("[^"+$.source+".$_\\d]");var V,H="__proto__"in{},W="undefined"!=typeof window,G="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=G&&WXEnvironment.platform.toLowerCase(),X=W&&window.navigator.userAgent.toLowerCase(),J=X&&/msie|trident/.test(X),Q=X&&X.indexOf("msie 9.0")>0,Y=X&&X.indexOf("edge/")>0,Z=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===K),nn=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),en={}.watch,tn=!1;if(W)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){tn=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var an=function(){return void 0===V&&(V=!W&&!G&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),V},on=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function sn(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,ln="undefined"!=typeof Symbol&&sn(Symbol)&&"undefined"!=typeof Reflect&&sn(Reflect.ownKeys);cn="undefined"!=typeof Set&&sn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var un=T,pn=0,dn=function(){this.id=pn++,this.subs=[]};dn.prototype.addSub=function(n){this.subs.push(n)},dn.prototype.removeSub=function(n){y(this.subs,n)},dn.prototype.depend=function(){dn.target&&dn.target.addDep(this)},dn.prototype.notify=function(){var n=this.subs.slice();for(var e=0,t=n.length;e<t;e++)n[e].update()},dn.target=null;var fn=[];function mn(n){fn.push(n),dn.target=n}function hn(){fn.pop(),dn.target=fn[fn.length-1]}var vn=function(n,e,t,r,a,o,i,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=a,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},gn={child:{configurable:!0}};gn.child.get=function(){return this.componentInstance},Object.defineProperties(vn.prototype,gn);var bn=function(n){void 0===n&&(n="");var e=new vn;return e.text=n,e.isComment=!0,e};function yn(n){return new vn(void 0,void 0,void 0,String(n))}function xn(n){var e=new vn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var wn=Array.prototype,kn=Object.create(wn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=wn[n];F(kn,n,(function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];var a,o=e.apply(this,t),i=this.__ob__;switch(n){case"push":case"unshift":a=t;break;case"splice":a=t.slice(2)}return a&&i.observeArray(a),i.dep.notify(),o}))}));var jn=Object.getOwnPropertyNames(kn),Sn=!0;function On(n){Sn=n}var Cn=function(n){this.value=n,this.dep=new dn,this.vmCount=0,F(n,"__ob__",this),Array.isArray(n)?(H?function(n,e){n.__proto__=e}(n,kn):function(n,e,t){for(var r=0,a=t.length;r<a;r++){var o=t[r];F(n,o,e[o])}}(n,kn,jn),this.observeArray(n)):this.walk(n)};function En(n,e){var t;if(l(n)&&!(n instanceof vn))return w(n,"__ob__")&&n.__ob__ instanceof Cn?t=n.__ob__:Sn&&!an()&&(Array.isArray(n)||p(n))&&Object.isExtensible(n)&&!n._isVue&&(t=new Cn(n)),e&&t&&t.vmCount++,t}function An(n,e,t,r,a){var o=new dn,i=Object.getOwnPropertyDescriptor(n,e);if(!i||!1!==i.configurable){var s=i&&i.get,c=i&&i.set;s&&!c||2!==arguments.length||(t=n[e]);var l=!a&&En(t);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(n):t;return dn.target&&(o.depend(),l&&(l.dep.depend(),Array.isArray(e)&&Pn(e))),e},set:function(e){var r=s?s.call(n):t;e===r||e!=e&&r!=r||s&&!c||(c?c.call(n,e):t=e,l=!a&&En(e),o.notify())}})}}function _n(n,e,t){if(Array.isArray(n)&&f(e))return n.length=Math.max(n.length,e),n.splice(e,1,t),t;if(e in n&&!(e in Object.prototype))return n[e]=t,t;var r=n.__ob__;return n._isVue||r&&r.vmCount?t:r?(An(r.value,e,t),r.dep.notify(),t):(n[e]=t,t)}function Bn(n,e){if(Array.isArray(n)&&f(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||w(n,e)&&(delete n[e],t&&t.dep.notify())}}function Pn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Pn(e)}Cn.prototype.walk=function(n){for(var e=Object.keys(n),t=0;t<e.length;t++)An(n,e[t])},Cn.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)En(n[e])};var Tn=z.optionMergeStrategies;function In(n,e){if(!e)return n;for(var t,r,a,o=ln?Reflect.ownKeys(e):Object.keys(e),i=0;i<o.length;i++)"__ob__"!==(t=o[i])&&(r=n[t],a=e[t],w(n,t)?r!==a&&p(r)&&p(a)&&In(r,a):_n(n,t,a));return n}function Mn(n,e,t){return t?function(){var r="function"==typeof e?e.call(t,t):e,a="function"==typeof n?n.call(t,t):n;return r?In(r,a):a}:e?n?function(){return In("function"==typeof e?e.call(this,this):e,"function"==typeof n?n.call(this,this):n)}:e:n}function Dn(n,e){var t=e?n?n.concat(e):Array.isArray(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Ln(n,e,t,r){var a=Object.create(n||null);return e?B(a,e):a}Tn.data=function(n,e,t){return t?Mn(n,e,t):e&&"function"!=typeof e?n:Mn(n,e)},N.forEach((function(n){Tn[n]=Dn})),R.forEach((function(n){Tn[n+"s"]=Ln})),Tn.watch=function(n,e,t,r){if(n===en&&(n=void 0),e===en&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var a={};for(var o in B(a,n),e){var i=a[o],s=e[o];i&&!Array.isArray(i)&&(i=[i]),a[o]=i?i.concat(s):Array.isArray(s)?s:[s]}return a},Tn.props=Tn.methods=Tn.inject=Tn.computed=function(n,e,t,r){if(!n)return e;var a=Object.create(null);return B(a,n),e&&B(a,e),a},Tn.provide=Mn;var qn=function(n,e){return void 0===e?n:e};function Rn(n,e,t){if("function"==typeof e&&(e=e.options),function(n,e){var t=n.props;if(t){var r,a,o={};if(Array.isArray(t))for(r=t.length;r--;)"string"==typeof(a=t[r])&&(o[S(a)]={type:null});else if(p(t))for(var i in t)a=t[i],o[S(i)]=p(a)?a:{type:a};else 0;n.props=o}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(Array.isArray(t))for(var a=0;a<t.length;a++)r[t[a]]={from:t[a]};else if(p(t))for(var o in t){var i=t[o];r[o]=p(i)?B({from:o},i):{from:i}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];"function"==typeof r&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=Rn(n,e.extends,t)),e.mixins))for(var r=0,a=e.mixins.length;r<a;r++)n=Rn(n,e.mixins[r],t);var o,i={};for(o in n)s(o);for(o in e)w(n,o)||s(o);function s(r){var a=Tn[r]||qn;i[r]=a(n[r],e[r],t,r)}return i}function Nn(n,e,t,r){if("string"==typeof t){var a=n[e];if(w(a,t))return a[t];var o=S(t);if(w(a,o))return a[o];var i=O(o);return w(a,i)?a[i]:a[t]||a[o]||a[i]}}function zn(n,e,t,r){var a=e[n],o=!w(t,n),i=t[n],s=Vn(Boolean,a.type);if(s>-1)if(o&&!w(a,"default"))i=!1;else if(""===i||i===E(n)){var c=Vn(String,a.type);(c<0||s<c)&&(i=!0)}if(void 0===i){i=function(n,e,t){if(!w(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return"function"==typeof r&&"Function"!==Fn(e.type)?r.call(n):r}(r,a,n);var l=Sn;On(!0),En(i),On(l)}return i}var $n=/^\s*function (\w+)/;function Fn(n){var e=n&&n.toString().match($n);return e?e[1]:""}function Un(n,e){return Fn(n)===Fn(e)}function Vn(n,e){if(!Array.isArray(e))return Un(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Un(e[t],n))return t;return-1}function Hn(n,e,t){mn();try{if(e)for(var r=e;r=r.$parent;){var a=r.$options.errorCaptured;if(a)for(var o=0;o<a.length;o++)try{if(!1===a[o].call(r,n,e,t))return}catch(n){Gn(n,r,"errorCaptured hook")}}Gn(n,e,t)}finally{hn()}}function Wn(n,e,t,r,a){var o;try{(o=t?n.apply(e,t):n.call(e))&&!o._isVue&&m(o)&&!o._handled&&(o.catch((function(n){return Hn(n,r,a+" (Promise/async)")})),o._handled=!0)}catch(n){Hn(n,r,a)}return o}function Gn(n,e,t){if(z.errorHandler)try{return z.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Kn(e,null,"config.errorHandler")}Kn(n,e,t)}function Kn(n,e,t){if(!W&&!G||"undefined"==typeof console)throw n;console.error(n)}var Xn,Jn=!1,Qn=[],Yn=!1;function Zn(){Yn=!1;var n=Qn.slice(0);Qn.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&sn(Promise)){var ne=Promise.resolve();Xn=function(){ne.then(Zn),Z&&setTimeout(T)},Jn=!0}else if(J||"undefined"==typeof MutationObserver||!sn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Xn="undefined"!=typeof setImmediate&&sn(setImmediate)?function(){setImmediate(Zn)}:function(){setTimeout(Zn,0)};else{var ee=1,te=new MutationObserver(Zn),re=document.createTextNode(String(ee));te.observe(re,{characterData:!0}),Xn=function(){ee=(ee+1)%2,re.data=String(ee)},Jn=!0}function ae(n,e){var t;if(Qn.push((function(){if(n)try{n.call(e)}catch(n){Hn(n,e,"nextTick")}else t&&t(e)})),Yn||(Yn=!0,Xn()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}var oe=new cn;function ie(n){!function n(e,t){var r,a,o=Array.isArray(e);if(!o&&!l(e)||Object.isFrozen(e)||e instanceof vn)return;if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(o)for(r=e.length;r--;)n(e[r],t);else for(a=Object.keys(e),r=a.length;r--;)n(e[a[r]],t)}(n,oe),oe.clear()}var se=k((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function ce(n,e){function t(){var n=arguments,r=t.fns;if(!Array.isArray(r))return Wn(r,null,arguments,e,"v-on handler");for(var a=r.slice(),o=0;o<a.length;o++)Wn(a[o],null,n,e,"v-on handler")}return t.fns=n,t}function le(n,e,t,r,a,i){var c,l,u,p;for(c in n)l=n[c],u=e[c],p=se(c),o(l)||(o(u)?(o(l.fns)&&(l=n[c]=ce(l,i)),s(p.once)&&(l=n[c]=a(p.name,l,p.capture)),t(p.name,l,p.capture,p.passive,p.params)):l!==u&&(u.fns=l,n[c]=u));for(c in e)o(n[c])&&r((p=se(c)).name,e[c],p.capture)}function ue(n,e,t){var r;n instanceof vn&&(n=n.data.hook||(n.data.hook={}));var a=n[e];function c(){t.apply(this,arguments),y(r.fns,c)}o(a)?r=ce([c]):i(a.fns)&&s(a.merged)?(r=a).fns.push(c):r=ce([a,c]),r.merged=!0,n[e]=r}function pe(n,e,t,r,a){if(i(e)){if(w(e,t))return n[t]=e[t],a||delete e[t],!0;if(w(e,r))return n[t]=e[r],a||delete e[r],!0}return!1}function de(n){return c(n)?[yn(n)]:Array.isArray(n)?function n(e,t){var r,a,l,u,p=[];for(r=0;r<e.length;r++)o(a=e[r])||"boolean"==typeof a||(l=p.length-1,u=p[l],Array.isArray(a)?a.length>0&&(fe((a=n(a,(t||"")+"_"+r))[0])&&fe(u)&&(p[l]=yn(u.text+a[0].text),a.shift()),p.push.apply(p,a)):c(a)?fe(u)?p[l]=yn(u.text+a):""!==a&&p.push(yn(a)):fe(a)&&fe(u)?p[l]=yn(u.text+a.text):(s(e._isVList)&&i(a.tag)&&o(a.key)&&i(t)&&(a.key="__vlist"+t+"_"+r+"__"),p.push(a)));return p}(n):void 0}function fe(n){return i(n)&&i(n.text)&&!1===n.isComment}function me(n,e){if(n){for(var t=Object.create(null),r=ln?Reflect.ownKeys(n):Object.keys(n),a=0;a<r.length;a++){var o=r[a];if("__ob__"!==o){for(var i=n[o].from,s=e;s;){if(s._provided&&w(s._provided,i)){t[o]=s._provided[i];break}s=s.$parent}if(!s)if("default"in n[o]){var c=n[o].default;t[o]="function"==typeof c?c.call(e):c}else 0}}return t}}function he(n,e){if(!n||!n.length)return{};for(var t={},r=0,a=n.length;r<a;r++){var o=n[r],i=o.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,o.context!==e&&o.fnContext!==e||!i||null==i.slot)(t.default||(t.default=[])).push(o);else{var s=i.slot,c=t[s]||(t[s]=[]);"template"===o.tag?c.push.apply(c,o.children||[]):c.push(o)}}for(var l in t)t[l].every(ve)&&delete t[l];return t}function ve(n){return n.isComment&&!n.asyncFactory||" "===n.text}function ge(n){return n.isComment&&n.asyncFactory}function be(n,e,t){var r,o=Object.keys(e).length>0,i=n?!!n.$stable:!o,s=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(i&&t&&t!==a&&s===t.$key&&!o&&!t.$hasNormal)return t;for(var c in r={},n)n[c]&&"$"!==c[0]&&(r[c]=ye(e,c,n[c]))}else r={};for(var l in e)l in r||(r[l]=xe(e,l));return n&&Object.isExtensible(n)&&(n._normalized=r),F(r,"$stable",i),F(r,"$key",s),F(r,"$hasNormal",o),r}function ye(n,e,t){var r=function(){var n=arguments.length?t.apply(null,arguments):t({}),e=(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:de(n))&&n[0];return n&&(!e||1===n.length&&e.isComment&&!ge(e))?void 0:n};return t.proxy&&Object.defineProperty(n,e,{get:r,enumerable:!0,configurable:!0}),r}function xe(n,e){return function(){return n[e]}}function we(n,e){var t,r,a,o,s;if(Array.isArray(n)||"string"==typeof n)for(t=new Array(n.length),r=0,a=n.length;r<a;r++)t[r]=e(n[r],r);else if("number"==typeof n)for(t=new Array(n),r=0;r<n;r++)t[r]=e(r+1,r);else if(l(n))if(ln&&n[Symbol.iterator]){t=[];for(var c=n[Symbol.iterator](),u=c.next();!u.done;)t.push(e(u.value,t.length)),u=c.next()}else for(o=Object.keys(n),t=new Array(o.length),r=0,a=o.length;r<a;r++)s=o[r],t[r]=e(n[s],s,r);return i(t)||(t=[]),t._isVList=!0,t}function ke(n,e,t,r){var a,o=this.$scopedSlots[n];o?(t=t||{},r&&(t=B(B({},r),t)),a=o(t)||("function"==typeof e?e():e)):a=this.$slots[n]||("function"==typeof e?e():e);var i=t&&t.slot;return i?this.$createElement("template",{slot:i},a):a}function je(n){return Nn(this.$options,"filters",n)||M}function Se(n,e){return Array.isArray(n)?-1===n.indexOf(e):n!==e}function Oe(n,e,t,r,a){var o=z.keyCodes[e]||t;return a&&r&&!z.keyCodes[e]?Se(a,r):o?Se(o,n):r?E(r)!==e:void 0===n}function Ce(n,e,t,r,a){if(t)if(l(t)){var o;Array.isArray(t)&&(t=P(t));var i=function(i){if("class"===i||"style"===i||b(i))o=n;else{var s=n.attrs&&n.attrs.type;o=r||z.mustUseProp(e,s,i)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var c=S(i),l=E(i);c in o||l in o||(o[i]=t[i],a&&((n.on||(n.on={}))["update:"+i]=function(n){t[i]=n}))};for(var s in t)i(s)}else;return n}function Ee(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||_e(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),r}function Ae(n,e,t){return _e(n,"__once__"+e+(t?"_"+t:""),!0),n}function _e(n,e,t){if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&Be(n[r],e+"_"+r,t);else Be(n,e,t)}function Be(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function Pe(n,e){if(e)if(p(e)){var t=n.on=n.on?B({},n.on):{};for(var r in e){var a=t[r],o=e[r];t[r]=a?[].concat(a,o):o}}else;return n}function Te(n,e,t,r){e=e||{$stable:!t};for(var a=0;a<n.length;a++){var o=n[a];Array.isArray(o)?Te(o,e,t):o&&(o.proxy&&(o.fn.proxy=!0),e[o.key]=o.fn)}return r&&(e.$key=r),e}function Ie(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function Me(n,e){return"string"==typeof n?e+n:n}function De(n){n._o=Ae,n._n=v,n._s=h,n._l=we,n._t=ke,n._q=D,n._i=L,n._m=Ee,n._f=je,n._k=Oe,n._b=Ce,n._v=yn,n._e=bn,n._u=Te,n._g=Pe,n._d=Ie,n._p=Me}function Le(n,e,t,r,o){var i,c=this,l=o.options;w(r,"_uid")?(i=Object.create(r))._original=r:(i=r,r=r._original);var u=s(l._compiled),p=!u;this.data=n,this.props=e,this.children=t,this.parent=r,this.listeners=n.on||a,this.injections=me(l.inject,r),this.slots=function(){return c.$slots||be(n.scopedSlots,c.$slots=he(t,r)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return be(n.scopedSlots,this.slots())}}),u&&(this.$options=l,this.$slots=this.slots(),this.$scopedSlots=be(n.scopedSlots,this.$slots)),l._scopeId?this._c=function(n,e,t,a){var o=Ue(i,n,e,t,a,p);return o&&!Array.isArray(o)&&(o.fnScopeId=l._scopeId,o.fnContext=r),o}:this._c=function(n,e,t,r){return Ue(i,n,e,t,r,p)}}function qe(n,e,t,r,a){var o=xn(n);return o.fnContext=t,o.fnOptions=r,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function Re(n,e){for(var t in e)n[S(t)]=e[t]}De(Le.prototype);var Ne={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;Ne.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;i(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ye)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,o){0;var i=r.data.scopedSlots,s=n.$scopedSlots,c=!!(i&&!i.$stable||s!==a&&!s.$stable||i&&n.$scopedSlots.$key!==i.$key||!i&&n.$scopedSlots.$key),l=!!(o||n.$options._renderChildren||c);n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r);if(n.$options._renderChildren=o,n.$attrs=r.data.attrs||a,n.$listeners=t||a,e&&n.$options.props){On(!1);for(var u=n._props,p=n.$options._propKeys||[],d=0;d<p.length;d++){var f=p[d],m=n.$options.props;u[f]=zn(f,m,e,n)}On(!0),n.$options.propsData=e}t=t||a;var h=n.$options._parentListeners;n.$options._parentListeners=t,Qe(n,t,h),l&&(n.$slots=he(o,r.context),n.$forceUpdate());0}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,tt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,at.push(e)):et(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(t&&(e._directInactive=!0,nt(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);tt(e,"deactivated")}}(e,!0):e.$destroy())}},ze=Object.keys(Ne);function $e(n,e,t,r,c){if(!o(n)){var u=t.$options._base;if(l(n)&&(n=u.extend(n)),"function"==typeof n){var p;if(o(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&i(n.errorComp))return n.errorComp;if(i(n.resolved))return n.resolved;var t=He;t&&i(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t);if(s(n.loading)&&i(n.loadingComp))return n.loadingComp;if(t&&!i(n.owners)){var r=n.owners=[t],a=!0,c=null,u=null;t.$on("hook:destroyed",(function(){return y(r,t)}));var p=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==c&&(clearTimeout(c),c=null),null!==u&&(clearTimeout(u),u=null))},d=q((function(t){n.resolved=We(t,e),a?r.length=0:p(!0)})),f=q((function(e){i(n.errorComp)&&(n.error=!0,p(!0))})),h=n(d,f);return l(h)&&(m(h)?o(n.resolved)&&h.then(d,f):m(h.component)&&(h.component.then(d,f),i(h.error)&&(n.errorComp=We(h.error,e)),i(h.loading)&&(n.loadingComp=We(h.loading,e),0===h.delay?n.loading=!0:c=setTimeout((function(){c=null,o(n.resolved)&&o(n.error)&&(n.loading=!0,p(!1))}),h.delay||200)),i(h.timeout)&&(u=setTimeout((function(){u=null,o(n.resolved)&&f(null)}),h.timeout)))),a=!1,n.loading?n.loadingComp:n.resolved}}(p=n,u)))return function(n,e,t,r,a){var o=bn();return o.asyncFactory=n,o.asyncMeta={data:e,context:t,children:r,tag:a},o}(p,e,t,r,c);e=e||{},St(n),i(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var a=e.on||(e.on={}),o=a[r],s=e.model.callback;i(o)?(Array.isArray(o)?-1===o.indexOf(s):o!==s)&&(a[r]=[s].concat(o)):a[r]=s}(n.options,e);var d=function(n,e,t){var r=e.options.props;if(!o(r)){var a={},s=n.attrs,c=n.props;if(i(s)||i(c))for(var l in r){var u=E(l);pe(a,c,l,u,!0)||pe(a,s,l,u,!1)}return a}}(e,n);if(s(n.options.functional))return function(n,e,t,r,o){var s=n.options,c={},l=s.props;if(i(l))for(var u in l)c[u]=zn(u,l,e||a);else i(t.attrs)&&Re(c,t.attrs),i(t.props)&&Re(c,t.props);var p=new Le(t,c,o,r,n),d=s.render.call(null,p._c,p);if(d instanceof vn)return qe(d,t,p.parent,s,p);if(Array.isArray(d)){for(var f=de(d)||[],m=new Array(f.length),h=0;h<f.length;h++)m[h]=qe(f[h],t,p.parent,s,p);return m}}(n,d,e,t,r);var f=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<ze.length;t++){var r=ze[t],a=e[r],o=Ne[r];a===o||a&&a._merged||(e[r]=a?Fe(o,a):o)}}(e);var v=n.options.name||c;return new vn("vue-component-"+n.cid+(v?"-"+v:""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:d,listeners:f,tag:c,children:r},p)}}}function Fe(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}function Ue(n,e,t,r,a,u){return(Array.isArray(t)||c(t))&&(a=r,r=t,t=void 0),s(u)&&(a=2),function(n,e,t,r,a){if(i(t)&&i(t.__ob__))return bn();i(t)&&i(t.is)&&(e=t.is);if(!e)return bn();0;Array.isArray(r)&&"function"==typeof r[0]&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===a?r=de(r):1===a&&(r=function(n){for(var e=0;e<n.length;e++)if(Array.isArray(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var c,u;if("string"==typeof e){var p;u=n.$vnode&&n.$vnode.ns||z.getTagNamespace(e),c=z.isReservedTag(e)?new vn(z.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!i(p=Nn(n.$options,"components",e))?new vn(e,t,r,void 0,void 0,n):$e(p,t,n,r,e)}else c=$e(e,t,n,r);return Array.isArray(c)?c:i(c)?(i(u)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(i(e.children))for(var a=0,c=e.children.length;a<c;a++){var l=e.children[a];i(l.tag)&&(o(l.ns)||s(r)&&"svg"!==l.tag)&&n(l,t,r)}}(c,u),i(t)&&function(n){l(n.style)&&ie(n.style);l(n.class)&&ie(n.class)}(t),c):bn()}(n,e,t,r,a)}var Ve,He=null;function We(n,e){return(n.__esModule||ln&&"Module"===n[Symbol.toStringTag])&&(n=n.default),l(n)?e.extend(n):n}function Ge(n){if(Array.isArray(n))for(var e=0;e<n.length;e++){var t=n[e];if(i(t)&&(i(t.componentOptions)||ge(t)))return t}}function Ke(n,e){Ve.$on(n,e)}function Xe(n,e){Ve.$off(n,e)}function Je(n,e){var t=Ve;return function r(){var a=e.apply(null,arguments);null!==a&&t.$off(n,r)}}function Qe(n,e,t){Ve=n,le(e,t||{},Ke,Xe,Je,n),Ve=void 0}var Ye=null;function Ze(n){var e=Ye;return Ye=n,function(){Ye=e}}function nt(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function et(n,e){if(e){if(n._directInactive=!1,nt(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)et(n.$children[t]);tt(n,"activated")}}function tt(n,e){mn();var t=n.$options[e],r=e+" hook";if(t)for(var a=0,o=t.length;a<o;a++)Wn(t[a],n,null,n,r);n._hasHookEvent&&n.$emit("hook:"+e),hn()}var rt=[],at=[],ot={},it=!1,st=!1,ct=0;var lt=0,ut=Date.now;if(W&&!J){var pt=window.performance;pt&&"function"==typeof pt.now&&ut()>document.createEvent("Event").timeStamp&&(ut=function(){return pt.now()})}function dt(){var n,e;for(lt=ut(),st=!0,rt.sort((function(n,e){return n.id-e.id})),ct=0;ct<rt.length;ct++)(n=rt[ct]).before&&n.before(),e=n.id,ot[e]=null,n.run();var t=at.slice(),r=rt.slice();ct=rt.length=at.length=0,ot={},it=st=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,et(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r._watcher===t&&r._isMounted&&!r._isDestroyed&&tt(r,"updated")}}(r),on&&z.devtools&&on.emit("flush")}var ft=0,mt=function(n,e,t,r,a){this.vm=n,a&&(n._watcher=this),n._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++ft,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(n){if(!U.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=T)),this.value=this.lazy?void 0:this.get()};mt.prototype.get=function(){var n;mn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Hn(n,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ie(n),hn(),this.cleanupDeps()}return n},mt.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},mt.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},mt.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var e=n.id;if(null==ot[e]){if(ot[e]=!0,st){for(var t=rt.length-1;t>ct&&rt[t].id>n.id;)t--;rt.splice(t+1,0,n)}else rt.push(n);it||(it=!0,ae(dt))}}(this)},mt.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||l(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'+this.expression+'"';Wn(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},mt.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},mt.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},mt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||y(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var ht={enumerable:!0,configurable:!0,get:T,set:T};function vt(n,e,t){ht.get=function(){return this[e][t]},ht.set=function(n){this[e][t]=n},Object.defineProperty(n,t,ht)}function gt(n){n._watchers=[];var e=n.$options;e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props={},a=n.$options._propKeys=[];n.$parent&&On(!1);var o=function(o){a.push(o);var i=zn(o,e,t,n);An(r,o,i),o in n||vt(n,"_props",o)};for(var i in e)o(i);On(!0)}(n,e.props),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?T:A(e[t],n)}(n,e.methods),e.data?function(n){var e=n.$options.data;p(e=n._data="function"==typeof e?function(n,e){mn();try{return n.call(e,e)}catch(n){return Hn(n,e,"data()"),{}}finally{hn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,a=(n.$options.methods,t.length);for(;a--;){var o=t[a];0,r&&w(r,o)||(i=void 0,36!==(i=(o+"").charCodeAt(0))&&95!==i&&vt(n,"_data",o))}var i;En(e,!0)}(n):En(n._data={},!0),e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=an();for(var a in e){var o=e[a],i="function"==typeof o?o:o.get;0,r||(t[a]=new mt(n,i||T,T,bt)),a in n||yt(n,a,o)}}(n,e.computed),e.watch&&e.watch!==en&&function(n,e){for(var t in e){var r=e[t];if(Array.isArray(r))for(var a=0;a<r.length;a++)kt(n,t,r[a]);else kt(n,t,r)}}(n,e.watch)}var bt={lazy:!0};function yt(n,e,t){var r=!an();"function"==typeof t?(ht.get=r?xt(e):wt(t),ht.set=T):(ht.get=t.get?r&&!1!==t.cache?xt(e):wt(t.get):T,ht.set=t.set||T),Object.defineProperty(n,e,ht)}function xt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),dn.target&&e.depend(),e.value}}function wt(n){return function(){return n.call(this,this)}}function kt(n,e,t,r){return p(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var jt=0;function St(n){var e=n.options;if(n.super){var t=St(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var a in t)t[a]!==r[a]&&(e||(e={}),e[a]=t[a]);return e}(n);r&&B(n.extendOptions,r),(e=n.options=Rn(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Ot(n){this._init(n)}function Ct(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,a=n._Ctor||(n._Ctor={});if(a[r])return a[r];var o=n.name||t.options.name;var i=function(n){this._init(n)};return(i.prototype=Object.create(t.prototype)).constructor=i,i.cid=e++,i.options=Rn(t.options,n),i.super=t,i.options.props&&function(n){var e=n.options.props;for(var t in e)vt(n.prototype,"_props",t)}(i),i.options.computed&&function(n){var e=n.options.computed;for(var t in e)yt(n.prototype,t,e[t])}(i),i.extend=t.extend,i.mixin=t.mixin,i.use=t.use,R.forEach((function(n){i[n]=t[n]})),o&&(i.options.components[o]=i),i.superOptions=t.options,i.extendOptions=n,i.sealedOptions=B({},i.options),a[r]=i,i}}function Et(n){return n&&(n.Ctor.options.name||n.tag)}function At(n,e){return Array.isArray(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!d(n)&&n.test(e)}function _t(n,e){var t=n.cache,r=n.keys,a=n._vnode;for(var o in t){var i=t[o];if(i){var s=i.name;s&&!e(s)&&Bt(t,o,r,a)}}}function Bt(n,e,t,r){var a=n[e];!a||r&&a.tag===r.tag||a.componentInstance.$destroy(),n[e]=null,y(t,e)}Ot.prototype._init=function(n){var e=this;e._uid=jt++,e._isVue=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var a=r.componentOptions;t.propsData=a.propsData,t._parentListeners=a.listeners,t._renderChildren=a.children,t._componentTag=a.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Rn(St(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Qe(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=he(e._renderChildren,r),n.$scopedSlots=a,n._c=function(e,t,r,a){return Ue(n,e,t,r,a,!1)},n.$createElement=function(e,t,r,a){return Ue(n,e,t,r,a,!0)};var o=t&&t.data;An(n,"$attrs",o&&o.attrs||a,null,!0),An(n,"$listeners",e._parentListeners||a,null,!0)}(e),tt(e,"beforeCreate"),function(n){var e=me(n.$options.inject,n);e&&(On(!1),Object.keys(e).forEach((function(t){An(n,t,e[t])})),On(!0))}(e),gt(e),function(n){var e=n.$options.provide;e&&(n._provided="function"==typeof e?e.call(n):e)}(e),tt(e,"created"),e.$options.el&&e.$mount(e.$options.el)},function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=_n,n.prototype.$delete=Bn,n.prototype.$watch=function(n,e,t){if(p(e))return kt(this,n,e,t);(t=t||{}).user=!0;var r=new mt(this,n,e,t);if(t.immediate){var a='callback for immediate watcher "'+r.expression+'"';mn(),Wn(e,this,[r.value],this,a),hn()}return function(){r.teardown()}}}(Ot),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(Array.isArray(n))for(var a=0,o=n.length;a<o;a++)r.$on(n[a],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(n)){for(var r=0,a=n.length;r<a;r++)t.$off(n[r],e);return t}var o,i=t._events[n];if(!i)return t;if(!e)return t._events[n]=null,t;for(var s=i.length;s--;)if((o=i[s])===e||o.fn===e){i.splice(s,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?_(t):t;for(var r=_(arguments,1),a='event handler for "'+n+'"',o=0,i=t.length;o<i;o++)Wn(t[o],e,r,e,a)}return e}}(Ot),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,a=t._vnode,o=Ze(t);t._vnode=n,t.$el=a?t.__patch__(a,n):t.__patch__(t.$el,n,e,!1),o(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){tt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||y(e.$children,n),n._watcher&&n._watcher.teardown();for(var t=n._watchers.length;t--;)n._watchers[t].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),tt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Ot),function(n){De(n.prototype),n.prototype.$nextTick=function(n){return ae(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,a=t._parentVnode;a&&(e.$scopedSlots=be(a.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=a;try{He=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){Hn(t,e,"render"),n=e._vnode}finally{He=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof vn||(n=bn()),n.parent=a,n}}(Ot);var Pt=[String,RegExp,Array],Tt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Pt,exclude:Pt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var a=t.tag,o=t.componentInstance,i=t.componentOptions;n[r]={name:Et(i),tag:a,componentInstance:o},e.push(r),this.max&&e.length>parseInt(this.max)&&Bt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Bt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){_t(n,(function(n){return At(e,n)}))})),this.$watch("exclude",(function(e){_t(n,(function(n){return!At(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Ge(n),t=e&&e.componentOptions;if(t){var r=Et(t),a=this.include,o=this.exclude;if(a&&(!r||!At(a,r))||o&&r&&At(o,r))return e;var i=this.cache,s=this.keys,c=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;i[c]?(e.componentInstance=i[c].componentInstance,y(s,c),s.push(c)):(this.vnodeToCache=e,this.keyToCache=c),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return z}};Object.defineProperty(n,"config",e),n.util={warn:un,extend:B,mergeOptions:Rn,defineReactive:An},n.set=_n,n.delete=Bn,n.nextTick=ae,n.observable=function(n){return En(n),n},n.options=Object.create(null),R.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,B(n.options.components,Tt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=_(arguments,1);return t.unshift(this),"function"==typeof n.install?n.install.apply(n,t):"function"==typeof n&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Rn(this.options,n),this}}(n),Ct(n),function(n){R.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&p(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&"function"==typeof t&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Ot),Object.defineProperty(Ot.prototype,"$isServer",{get:an}),Object.defineProperty(Ot.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Ot,"FunctionalRenderContext",{value:Le}),Ot.version="2.6.14";var It=g("style,class"),Mt=g("input,textarea,option,select,progress"),Dt=g("contenteditable,draggable,spellcheck"),Lt=g("events,caret,typing,plaintext-only"),qt=g("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),Rt="http://www.w3.org/1999/xlink",Nt=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},zt=function(n){return Nt(n)?n.slice(6,n.length):""},$t=function(n){return null==n||!1===n};function Ft(n){for(var e=n.data,t=n,r=n;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Ut(r.data,e));for(;i(t=t.parent);)t&&t.data&&(e=Ut(e,t.data));return function(n,e){if(i(n)||i(e))return Vt(n,Ht(e));return""}(e.staticClass,e.class)}function Ut(n,e){return{staticClass:Vt(n.staticClass,e.staticClass),class:i(n.class)?[n.class,e.class]:e.class}}function Vt(n,e){return n?e?n+" "+e:n:e||""}function Ht(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,a=n.length;r<a;r++)i(e=Ht(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):l(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var Wt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Gt=g("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Kt=g("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Xt=function(n){return Gt(n)||Kt(n)};var Jt=Object.create(null);var Qt=g("text,number,password,search,email,tel,url");var Yt=Object.freeze({createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(Wt[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),Zt={create:function(n,e){nr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(nr(n,!0),nr(e))},destroy:function(n){nr(n,!0)}};function nr(n,e){var t=n.data.ref;if(i(t)){var r=n.context,a=n.componentInstance||n.elm,o=r.$refs;e?Array.isArray(o[t])?y(o[t],a):o[t]===a&&(o[t]=void 0):n.data.refInFor?Array.isArray(o[t])?o[t].indexOf(a)<0&&o[t].push(a):o[t]=[a]:o[t]=a}}var er=new vn("",{},[]),tr=["create","activate","update","remove","destroy"];function rr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&i(n.data)===i(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=i(t=n.data)&&i(t=t.attrs)&&t.type,a=i(t=e.data)&&i(t=t.attrs)&&t.type;return r===a||Qt(r)&&Qt(a)}(n,e)||s(n.isAsyncPlaceholder)&&o(e.asyncFactory.error))}function ar(n,e,t){var r,a,o={};for(r=e;r<=t;++r)i(a=n[r].key)&&(o[a]=r);return o}var or={create:ir,update:ir,destroy:function(n){ir(n,er)}};function ir(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,a,o=n===er,i=e===er,s=cr(n.data.directives,n.context),c=cr(e.data.directives,e.context),l=[],u=[];for(t in c)r=s[t],a=c[t],r?(a.oldValue=r.value,a.oldArg=r.arg,ur(a,"update",e,n),a.def&&a.def.componentUpdated&&u.push(a)):(ur(a,"bind",e,n),a.def&&a.def.inserted&&l.push(a));if(l.length){var p=function(){for(var t=0;t<l.length;t++)ur(l[t],"inserted",e,n)};o?ue(e,"insert",p):p()}u.length&&ue(e,"postpatch",(function(){for(var t=0;t<u.length;t++)ur(u[t],"componentUpdated",e,n)}));if(!o)for(t in s)c[t]||ur(s[t],"unbind",n,n,i)}(n,e)}var sr=Object.create(null);function cr(n,e){var t,r,a=Object.create(null);if(!n)return a;for(t=0;t<n.length;t++)(r=n[t]).modifiers||(r.modifiers=sr),a[lr(r)]=r,r.def=Nn(e.$options,"directives",r.name);return a}function lr(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function ur(n,e,t,r,a){var o=n.def&&n.def[e];if(o)try{o(t.elm,n,t,r,a)}catch(r){Hn(r,t.context,"directive "+n.name+" "+e+" hook")}}var pr=[Zt,or];function dr(n,e){var t=e.componentOptions;if(!(i(t)&&!1===t.Ctor.options.inheritAttrs||o(n.data.attrs)&&o(e.data.attrs))){var r,a,s=e.elm,c=n.data.attrs||{},l=e.data.attrs||{};for(r in i(l.__ob__)&&(l=e.data.attrs=B({},l)),l)a=l[r],c[r]!==a&&fr(s,r,a,e.data.pre);for(r in(J||Y)&&l.value!==c.value&&fr(s,"value",l.value),c)o(l[r])&&(Nt(r)?s.removeAttributeNS(Rt,zt(r)):Dt(r)||s.removeAttribute(r))}}function fr(n,e,t,r){r||n.tagName.indexOf("-")>-1?mr(n,e,t):qt(e)?$t(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):Dt(e)?n.setAttribute(e,function(n,e){return $t(e)||"false"===e?"false":"contenteditable"===n&&Lt(e)?e:"true"}(e,t)):Nt(e)?$t(t)?n.removeAttributeNS(Rt,zt(e)):n.setAttributeNS(Rt,e,t):mr(n,e,t)}function mr(n,e,t){if($t(t))n.removeAttribute(e);else{if(J&&!Q&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var hr={create:dr,update:dr};function vr(n,e){var t=e.elm,r=e.data,a=n.data;if(!(o(r.staticClass)&&o(r.class)&&(o(a)||o(a.staticClass)&&o(a.class)))){var s=Ft(e),c=t._transitionClasses;i(c)&&(s=Vt(s,Ht(c))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var gr,br={create:vr,update:vr};function yr(n,e,t){var r=gr;return function a(){var o=e.apply(null,arguments);null!==o&&kr(n,a,t,r)}}var xr=Jn&&!(nn&&Number(nn[1])<=53);function wr(n,e,t,r){if(xr){var a=lt,o=e;e=o._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=a||n.timeStamp<=0||n.target.ownerDocument!==document)return o.apply(this,arguments)}}gr.addEventListener(n,e,tn?{capture:t,passive:r}:t)}function kr(n,e,t,r){(r||gr).removeEventListener(n,e._wrapper||e,t)}function jr(n,e){if(!o(n.data.on)||!o(e.data.on)){var t=e.data.on||{},r=n.data.on||{};gr=e.elm,function(n){if(i(n.__r)){var e=J?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}i(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),le(t,r,wr,kr,yr,e.context),gr=void 0}}var Sr,Or={create:jr,update:jr};function Cr(n,e){if(!o(n.data.domProps)||!o(e.data.domProps)){var t,r,a=e.elm,s=n.data.domProps||{},c=e.data.domProps||{};for(t in i(c.__ob__)&&(c=e.data.domProps=B({},c)),s)t in c||(a[t]="");for(t in c){if(r=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===s[t])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===t&&"PROGRESS"!==a.tagName){a._value=r;var l=o(r)?"":String(r);Er(a,l)&&(a.value=l)}else if("innerHTML"===t&&Kt(a.tagName)&&o(a.innerHTML)){(Sr=Sr||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var u=Sr.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;u.firstChild;)a.appendChild(u.firstChild)}else if(r!==s[t])try{a[t]=r}catch(n){}}}}function Er(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(i(r)){if(r.number)return v(t)!==v(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Ar={create:Cr,update:Cr},_r=k((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Br(n){var e=Pr(n.style);return n.staticStyle?B(n.staticStyle,e):e}function Pr(n){return Array.isArray(n)?P(n):"string"==typeof n?_r(n):n}var Tr,Ir=/^--/,Mr=/\s*!important$/,Dr=function(n,e,t){if(Ir.test(e))n.style.setProperty(e,t);else if(Mr.test(t))n.style.setProperty(E(e),t.replace(Mr,""),"important");else{var r=qr(e);if(Array.isArray(t))for(var a=0,o=t.length;a<o;a++)n.style[r]=t[a];else n.style[r]=t}},Lr=["Webkit","Moz","ms"],qr=k((function(n){if(Tr=Tr||document.createElement("div").style,"filter"!==(n=S(n))&&n in Tr)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<Lr.length;t++){var r=Lr[t]+e;if(r in Tr)return r}}));function Rr(n,e){var t=e.data,r=n.data;if(!(o(t.staticStyle)&&o(t.style)&&o(r.staticStyle)&&o(r.style))){var a,s,c=e.elm,l=r.staticStyle,u=r.normalizedStyle||r.style||{},p=l||u,d=Pr(e.data.style)||{};e.data.normalizedStyle=i(d.__ob__)?B({},d):d;var f=function(n,e){var t,r={};if(e)for(var a=n;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(t=Br(a.data))&&B(r,t);(t=Br(n.data))&&B(r,t);for(var o=n;o=o.parent;)o.data&&(t=Br(o.data))&&B(r,t);return r}(e,!0);for(s in p)o(f[s])&&Dr(c,s,"");for(s in f)(a=f[s])!==p[s]&&Dr(c,s,null==a?"":a)}}var Nr={create:Rr,update:Rr},zr=/\s+/;function $r(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(zr).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" "+(n.getAttribute("class")||"")+" ";t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function Fr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(zr).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" "+(n.getAttribute("class")||"")+" ",r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function Ur(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&B(e,Vr(n.name||"v")),B(e,n),e}return"string"==typeof n?Vr(n):void 0}}var Vr=k((function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}})),Hr=W&&!Q,Wr="transition",Gr="transitionend",Kr="animation",Xr="animationend";Hr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Wr="WebkitTransition",Gr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Kr="WebkitAnimation",Xr="webkitAnimationEnd"));var Jr=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function Qr(n){Jr((function(){Jr(n)}))}function Yr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),$r(n,e))}function Zr(n,e){n._transitionClasses&&y(n._transitionClasses,e),Fr(n,e)}function na(n,e,t){var r=ta(n,e),a=r.type,o=r.timeout,i=r.propCount;if(!a)return t();var s="transition"===a?Gr:Xr,c=0,l=function(){n.removeEventListener(s,u),t()},u=function(e){e.target===n&&++c>=i&&l()};setTimeout((function(){c<i&&l()}),o+1),n.addEventListener(s,u)}var ea=/\b(transform|all)(,|$)/;function ta(n,e){var t,r=window.getComputedStyle(n),a=(r[Wr+"Delay"]||"").split(", "),o=(r[Wr+"Duration"]||"").split(", "),i=ra(a,o),s=(r[Kr+"Delay"]||"").split(", "),c=(r[Kr+"Duration"]||"").split(", "),l=ra(s,c),u=0,p=0;return"transition"===e?i>0&&(t="transition",u=i,p=o.length):"animation"===e?l>0&&(t="animation",u=l,p=c.length):p=(t=(u=Math.max(i,l))>0?i>l?"transition":"animation":null)?"transition"===t?o.length:c.length:0,{type:t,timeout:u,propCount:p,hasTransform:"transition"===t&&ea.test(r[Wr+"Property"])}}function ra(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return aa(e)+aa(n[t])})))}function aa(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function oa(n,e){var t=n.elm;i(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=Ur(n.data.transition);if(!o(r)&&!i(t._enterCb)&&1===t.nodeType){for(var a=r.css,s=r.type,c=r.enterClass,u=r.enterToClass,p=r.enterActiveClass,d=r.appearClass,f=r.appearToClass,m=r.appearActiveClass,h=r.beforeEnter,g=r.enter,b=r.afterEnter,y=r.enterCancelled,x=r.beforeAppear,w=r.appear,k=r.afterAppear,j=r.appearCancelled,S=r.duration,O=Ye,C=Ye.$vnode;C&&C.parent;)O=C.context,C=C.parent;var E=!O._isMounted||!n.isRootInsert;if(!E||w||""===w){var A=E&&d?d:c,_=E&&m?m:p,B=E&&f?f:u,P=E&&x||h,T=E&&"function"==typeof w?w:g,I=E&&k||b,M=E&&j||y,D=v(l(S)?S.enter:S);0;var L=!1!==a&&!Q,R=ca(T),N=t._enterCb=q((function(){L&&(Zr(t,B),Zr(t,_)),N.cancelled?(L&&Zr(t,A),M&&M(t)):I&&I(t),t._enterCb=null}));n.data.show||ue(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),T&&T(t,N)})),P&&P(t),L&&(Yr(t,A),Yr(t,_),Qr((function(){Zr(t,A),N.cancelled||(Yr(t,B),R||(sa(D)?setTimeout(N,D):na(t,s,N)))}))),n.data.show&&(e&&e(),T&&T(t,N)),L||R||N()}}}function ia(n,e){var t=n.elm;i(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=Ur(n.data.transition);if(o(r)||1!==t.nodeType)return e();if(!i(t._leaveCb)){var a=r.css,s=r.type,c=r.leaveClass,u=r.leaveToClass,p=r.leaveActiveClass,d=r.beforeLeave,f=r.leave,m=r.afterLeave,h=r.leaveCancelled,g=r.delayLeave,b=r.duration,y=!1!==a&&!Q,x=ca(f),w=v(l(b)?b.leave:b);0;var k=t._leaveCb=q((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(Zr(t,u),Zr(t,p)),k.cancelled?(y&&Zr(t,c),h&&h(t)):(e(),m&&m(t)),t._leaveCb=null}));g?g(j):j()}function j(){k.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),y&&(Yr(t,c),Yr(t,p),Qr((function(){Zr(t,c),k.cancelled||(Yr(t,u),x||(sa(w)?setTimeout(k,w):na(t,s,k)))}))),f&&f(t,k),y||x||k())}}function sa(n){return"number"==typeof n&&!isNaN(n)}function ca(n){if(o(n))return!1;var e=n.fns;return i(e)?ca(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function la(n,e){!0!==e.data.show&&oa(e)}var ua=function(n){var e,t,r={},a=n.modules,l=n.nodeOps;for(e=0;e<tr.length;++e)for(r[tr[e]]=[],t=0;t<a.length;++t)i(a[t][tr[e]])&&r[tr[e]].push(a[t][tr[e]]);function u(n){var e=l.parentNode(n);i(e)&&l.removeChild(e,n)}function p(n,e,t,a,o,c,u){if(i(n.elm)&&i(c)&&(n=c[u]=xn(n)),n.isRootInsert=!o,!function(n,e,t,a){var o=n.data;if(i(o)){var c=i(n.componentInstance)&&o.keepAlive;if(i(o=o.hook)&&i(o=o.init)&&o(n,!1),i(n.componentInstance))return d(n,e),f(t,n.elm,a),s(c)&&function(n,e,t,a){var o,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,i(o=s.data)&&i(o=o.transition)){for(o=0;o<r.activate.length;++o)r.activate[o](er,s);e.push(s);break}f(t,n.elm,a)}(n,e,t,a),!0}}(n,e,t,a)){var p=n.data,h=n.children,g=n.tag;i(g)?(n.elm=n.ns?l.createElementNS(n.ns,g):l.createElement(g,n),b(n),m(n,h,e),i(p)&&v(n,e),f(t,n.elm,a)):s(n.isComment)?(n.elm=l.createComment(n.text),f(t,n.elm,a)):(n.elm=l.createTextNode(n.text),f(t,n.elm,a))}}function d(n,e){i(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,h(n)?(v(n,e),b(n)):(nr(n),e.push(n))}function f(n,e,t){i(n)&&(i(t)?l.parentNode(t)===n&&l.insertBefore(n,e,t):l.appendChild(n,e))}function m(n,e,t){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)p(e[r],t,n.elm,null,!0,e,r)}else c(n.text)&&l.appendChild(n.elm,l.createTextNode(String(n.text)))}function h(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return i(n.tag)}function v(n,t){for(var a=0;a<r.create.length;++a)r.create[a](er,n);i(e=n.data.hook)&&(i(e.create)&&e.create(er,n),i(e.insert)&&t.push(n))}function b(n){var e;if(i(e=n.fnScopeId))l.setStyleScope(n.elm,e);else for(var t=n;t;)i(e=t.context)&&i(e=e.$options._scopeId)&&l.setStyleScope(n.elm,e),t=t.parent;i(e=Ye)&&e!==n.context&&e!==n.fnContext&&i(e=e.$options._scopeId)&&l.setStyleScope(n.elm,e)}function y(n,e,t,r,a,o){for(;r<=a;++r)p(t[r],o,n,e,!1,t,r)}function x(n){var e,t,a=n.data;if(i(a))for(i(e=a.hook)&&i(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(i(e=n.children))for(t=0;t<n.children.length;++t)x(n.children[t])}function w(n,e,t){for(;e<=t;++e){var r=n[e];i(r)&&(i(r.tag)?(k(r),x(r)):u(r.elm))}}function k(n,e){if(i(e)||i(n.data)){var t,a=r.remove.length+1;for(i(e)?e.listeners+=a:e=function(n,e){function t(){0==--t.listeners&&u(n)}return t.listeners=e,t}(n.elm,a),i(t=n.componentInstance)&&i(t=t._vnode)&&i(t.data)&&k(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);i(t=n.data.hook)&&i(t=t.remove)?t(n,e):e()}else u(n.elm)}function j(n,e,t,r){for(var a=t;a<r;a++){var o=e[a];if(i(o)&&rr(n,o))return a}}function S(n,e,t,a,c,u){if(n!==e){i(e.elm)&&i(a)&&(e=a[c]=xn(e));var d=e.elm=n.elm;if(s(n.isAsyncPlaceholder))i(e.asyncFactory.resolved)?E(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var f,m=e.data;i(m)&&i(f=m.hook)&&i(f=f.prepatch)&&f(n,e);var v=n.children,g=e.children;if(i(m)&&h(e)){for(f=0;f<r.update.length;++f)r.update[f](n,e);i(f=m.hook)&&i(f=f.update)&&f(n,e)}o(e.text)?i(v)&&i(g)?v!==g&&function(n,e,t,r,a){var s,c,u,d=0,f=0,m=e.length-1,h=e[0],v=e[m],g=t.length-1,b=t[0],x=t[g],k=!a;for(0;d<=m&&f<=g;)o(h)?h=e[++d]:o(v)?v=e[--m]:rr(h,b)?(S(h,b,r,t,f),h=e[++d],b=t[++f]):rr(v,x)?(S(v,x,r,t,g),v=e[--m],x=t[--g]):rr(h,x)?(S(h,x,r,t,g),k&&l.insertBefore(n,h.elm,l.nextSibling(v.elm)),h=e[++d],x=t[--g]):rr(v,b)?(S(v,b,r,t,f),k&&l.insertBefore(n,v.elm,h.elm),v=e[--m],b=t[++f]):(o(s)&&(s=ar(e,d,m)),o(c=i(b.key)?s[b.key]:j(b,e,d,m))?p(b,r,n,h.elm,!1,t,f):rr(u=e[c],b)?(S(u,b,r,t,f),e[c]=void 0,k&&l.insertBefore(n,u.elm,h.elm)):p(b,r,n,h.elm,!1,t,f),b=t[++f]);d>m?y(n,o(t[g+1])?null:t[g+1].elm,t,f,g,r):f>g&&w(e,d,m)}(d,v,g,t,u):i(g)?(i(n.text)&&l.setTextContent(d,""),y(d,null,g,0,g.length-1,t)):i(v)?w(v,0,v.length-1):i(n.text)&&l.setTextContent(d,""):n.text!==e.text&&l.setTextContent(d,e.text),i(m)&&i(f=m.hook)&&i(f=f.postpatch)&&f(n,e)}}}function O(n,e,t){if(s(t)&&i(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var C=g("attrs,class,staticClass,staticStyle,key");function E(n,e,t,r){var a,o=e.tag,c=e.data,l=e.children;if(r=r||c&&c.pre,e.elm=n,s(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(c)&&(i(a=c.hook)&&i(a=a.init)&&a(e,!0),i(a=e.componentInstance)))return d(e,t),!0;if(i(o)){if(i(l))if(n.hasChildNodes())if(i(a=c)&&i(a=a.domProps)&&i(a=a.innerHTML)){if(a!==n.innerHTML)return!1}else{for(var u=!0,p=n.firstChild,f=0;f<l.length;f++){if(!p||!E(p,l[f],t,r)){u=!1;break}p=p.nextSibling}if(!u||p)return!1}else m(e,l,t);if(i(c)){var h=!1;for(var g in c)if(!C(g)){h=!0,v(e,t);break}!h&&c.class&&ie(c.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,a){if(!o(e)){var c,u=!1,d=[];if(o(n))u=!0,p(e,d);else{var f=i(n.nodeType);if(!f&&rr(n,e))S(n,e,d,null,null,a);else{if(f){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&E(n,e,d))return O(e,d,!0),n;c=n,n=new vn(l.tagName(c).toLowerCase(),{},[],void 0,c)}var m=n.elm,v=l.parentNode(m);if(p(e,d,m._leaveCb?null:v,l.nextSibling(m)),i(e.parent))for(var g=e.parent,b=h(e);g;){for(var y=0;y<r.destroy.length;++y)r.destroy[y](g);if(g.elm=e.elm,b){for(var k=0;k<r.create.length;++k)r.create[k](er,g);var j=g.data.hook.insert;if(j.merged)for(var C=1;C<j.fns.length;C++)j.fns[C]()}else nr(g);g=g.parent}i(v)?w([n],0,0):i(n.tag)&&x(n)}}return O(e,d,u),e.elm}i(n)&&x(n)}}({nodeOps:Yt,modules:[hr,br,Or,Ar,Nr,W?{create:la,activate:la,remove:function(n,e){!0!==n.data.show?ia(n,e):e()}}:{}].concat(pr)});Q&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&ba(n,"input")}));var pa={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?ue(t,"postpatch",(function(){pa.componentUpdated(n,e,t)})):da(n,e,t.context),n._vOptions=[].map.call(n.options,ha)):("textarea"===t.tag||Qt(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",va),n.addEventListener("compositionend",ga),n.addEventListener("change",ga),Q&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){da(n,e,t.context);var r=n._vOptions,a=n._vOptions=[].map.call(n.options,ha);if(a.some((function(n,e){return!D(n,r[e])})))(n.multiple?e.value.some((function(n){return ma(n,a)})):e.value!==e.oldValue&&ma(e.value,a))&&ba(n,"change")}}};function da(n,e,t){fa(n,e,t),(J||Y)&&setTimeout((function(){fa(n,e,t)}),0)}function fa(n,e,t){var r=e.value,a=n.multiple;if(!a||Array.isArray(r)){for(var o,i,s=0,c=n.options.length;s<c;s++)if(i=n.options[s],a)o=L(r,ha(i))>-1,i.selected!==o&&(i.selected=o);else if(D(ha(i),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));a||(n.selectedIndex=-1)}}function ma(n,e){return e.every((function(e){return!D(e,n)}))}function ha(n){return"_value"in n?n._value:n.value}function va(n){n.target.composing=!0}function ga(n){n.target.composing&&(n.target.composing=!1,ba(n.target,"input"))}function ba(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function ya(n){return!n.componentInstance||n.data&&n.data.transition?n:ya(n.componentInstance._vnode)}var xa={model:pa,show:{bind:function(n,e,t){var r=e.value,a=(t=ya(t)).data&&t.data.transition,o=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&a?(t.data.show=!0,oa(t,(function(){n.style.display=o}))):n.style.display=r?o:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=ya(t)).data&&t.data.transition?(t.data.show=!0,r?oa(t,(function(){n.style.display=n.__vOriginalDisplay})):ia(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,a){a||(n.style.display=n.__vOriginalDisplay)}}},wa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ka(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?ka(Ge(e.children)):n}function ja(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var a=t._parentListeners;for(var o in a)e[S(o)]=a[o];return e}function Sa(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Oa=function(n){return n.tag||ge(n)},Ca=function(n){return"show"===n.name},Ea={name:"transition",props:wa,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Oa)).length){0;var r=this.mode;0;var a=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return a;var o=ka(a);if(!o)return a;if(this._leaving)return Sa(n,a);var i="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?i+"comment":i+o.tag:c(o.key)?0===String(o.key).indexOf(i)?o.key:i+o.key:o.key;var s=(o.data||(o.data={})).transition=ja(this),l=this._vnode,u=ka(l);if(o.data.directives&&o.data.directives.some(Ca)&&(o.data.show=!0),u&&u.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(o,u)&&!ge(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var p=u.data.transition=B({},s);if("out-in"===r)return this._leaving=!0,ue(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Sa(n,a);if("in-out"===r){if(ge(o))return l;var d,f=function(){d()};ue(s,"afterEnter",f),ue(s,"enterCancelled",f),ue(p,"delayLeave",(function(n){d=n}))}}return a}}},Aa=B({tag:String,moveClass:String},wa);function _a(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Ba(n){n.data.newPos=n.elm.getBoundingClientRect()}function Pa(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,a=e.top-t.top;if(r||a){n.data.moved=!0;var o=n.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+a+"px)",o.transitionDuration="0s"}}delete Aa.mode;var Ta={Transition:Ea,TransitionGroup:{props:Aa,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var a=Ze(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,a(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,a=this.$slots.default||[],o=this.children=[],i=ja(this),s=0;s<a.length;s++){var c=a[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))o.push(c),t[c.key]=c,(c.data||(c.data={})).transition=i;else;}if(r){for(var l=[],u=[],p=0;p<r.length;p++){var d=r[p];d.data.transition=i,d.data.pos=d.elm.getBoundingClientRect(),t[d.key]?l.push(d):u.push(d)}this.kept=n(e,null,l),this.removed=u}return n(e,null,o)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(_a),n.forEach(Ba),n.forEach(Pa),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;Yr(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(Gr,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(Gr,n),t._moveCb=null,Zr(t,e))})}})))},methods:{hasMove:function(n,e){if(!Hr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){Fr(t,n)})),$r(t,e),t.style.display="none",this.$el.appendChild(t);var r=ta(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};Ot.config.mustUseProp=function(n,e,t){return"value"===t&&Mt(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Ot.config.isReservedTag=Xt,Ot.config.isReservedAttr=It,Ot.config.getTagNamespace=function(n){return Kt(n)?"svg":"math"===n?"math":void 0},Ot.config.isUnknownElement=function(n){if(!W)return!0;if(Xt(n))return!1;if(n=n.toLowerCase(),null!=Jt[n])return Jt[n];var e=document.createElement(n);return n.indexOf("-")>-1?Jt[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Jt[n]=/HTMLUnknownElement/.test(e.toString())},B(Ot.options.directives,xa),B(Ot.options.components,Ta),Ot.prototype.__patch__=W?ua:T,Ot.prototype.$mount=function(n,e){return function(n,e,t){var r;return n.$el=e,n.$options.render||(n.$options.render=bn),tt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new mt(n,r,T,{before:function(){n._isMounted&&!n._isDestroyed&&tt(n,"beforeUpdate")}},!0),t=!1,null==n.$vnode&&(n._isMounted=!0,tt(n,"mounted")),n}(this,n=n&&W?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},W&&setTimeout((function(){z.devtools&&on&&on.emit("init",Ot)}),0);var Ia=Ot;
/*!
  * vue-router v3.5.3
  * (c) 2021 Evan You
  * @license MIT
  */function Ma(n,e){for(var t in e)n[t]=e[t];return n}var Da=/[!'()*]/g,La=function(n){return"%"+n.charCodeAt(0).toString(16)},qa=/%2C/g,Ra=function(n){return encodeURIComponent(n).replace(Da,La).replace(qa,",")};function Na(n){try{return decodeURIComponent(n)}catch(n){0}return n}var za=function(n){return null==n||"object"==typeof n?n:String(n)};function $a(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=Na(t.shift()),a=t.length>0?Na(t.join("=")):null;void 0===e[r]?e[r]=a:Array.isArray(e[r])?e[r].push(a):e[r]=[e[r],a]})),e):e}function Fa(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return Ra(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(Ra(e)):r.push(Ra(e)+"="+Ra(n)))})),r.join("&")}return Ra(e)+"="+Ra(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var Ua=/\/?$/;function Va(n,e,t,r){var a=r&&r.options.stringifyQuery,o=e.query||{};try{o=Ha(o)}catch(n){}var i={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:o,params:e.params||{},fullPath:Ka(e,a),matched:n?Ga(n):[]};return t&&(i.redirectedFrom=Ka(t,a)),Object.freeze(i)}function Ha(n){if(Array.isArray(n))return n.map(Ha);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=Ha(n[t]);return e}return n}var Wa=Va(null,{path:"/"});function Ga(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function Ka(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var a=n.hash;return void 0===a&&(a=""),(t||"/")+(e||Fa)(r)+a}function Xa(n,e,t){return e===Wa?n===e:!!e&&(n.path&&e.path?n.path.replace(Ua,"")===e.path.replace(Ua,"")&&(t||n.hash===e.hash&&Ja(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&Ja(n.query,e.query)&&Ja(n.params,e.params))))}function Ja(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,a){var o=n[t];if(r[a]!==t)return!1;var i=e[t];return null==o||null==i?o===i:"object"==typeof o&&"object"==typeof i?Ja(o,i):String(o)===String(i)}))}function Qa(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var a=t.instances[r],o=t.enteredCbs[r];if(a&&o){delete t.enteredCbs[r];for(var i=0;i<o.length;i++)a._isBeingDestroyed||o[i](a)}}}}var Ya={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,a=e.parent,o=e.data;o.routerView=!0;for(var i=a.$createElement,s=t.name,c=a.$route,l=a._routerViewCache||(a._routerViewCache={}),u=0,p=!1;a&&a._routerRoot!==a;){var d=a.$vnode?a.$vnode.data:{};d.routerView&&u++,d.keepAlive&&a._directInactive&&a._inactive&&(p=!0),a=a.$parent}if(o.routerViewDepth=u,p){var f=l[s],m=f&&f.component;return m?(f.configProps&&Za(m,o,f.route,f.configProps),i(m,o,r)):i()}var h=c.matched[u],v=h&&h.components[s];if(!h||!v)return l[s]=null,i();l[s]={component:v},o.registerRouteInstance=function(n,e){var t=h.instances[s];(e&&t!==n||!e&&t===n)&&(h.instances[s]=e)},(o.hook||(o.hook={})).prepatch=function(n,e){h.instances[s]=e.componentInstance},o.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==h.instances[s]&&(h.instances[s]=n.componentInstance),Qa(c)};var g=h.props&&h.props[s];return g&&(Ma(l[s],{route:c,configProps:g}),Za(v,o,c,g)),i(v,o,r)}};function Za(n,e,t,r){var a=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(a){a=e.props=Ma({},a);var o=e.attrs=e.attrs||{};for(var i in a)n.props&&i in n.props||(o[i]=a[i],delete a[i])}}function no(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var o=n.replace(/^\//,"").split("/"),i=0;i<o.length;i++){var s=o[i];".."===s?a.pop():"."!==s&&a.push(s)}return""!==a[0]&&a.unshift(""),a.join("/")}function eo(n){return n.replace(/\/+/g,"/")}var to=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},ro=bo,ao=lo,oo=function(n,e){return po(lo(n,e),e)},io=po,so=go,co=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function lo(n,e){for(var t,r=[],a=0,o=0,i="",s=e&&e.delimiter||"/";null!=(t=co.exec(n));){var c=t[0],l=t[1],u=t.index;if(i+=n.slice(o,u),o=u+c.length,l)i+=l[1];else{var p=n[o],d=t[2],f=t[3],m=t[4],h=t[5],v=t[6],g=t[7];i&&(r.push(i),i="");var b=null!=d&&null!=p&&p!==d,y="+"===v||"*"===v,x="?"===v||"*"===v,w=t[2]||s,k=m||h;r.push({name:f||a++,prefix:d||"",delimiter:w,optional:x,repeat:y,partial:b,asterisk:!!g,pattern:k?mo(k):g?".*":"[^"+fo(w)+"]+?"})}}return o<n.length&&(i+=n.substr(o)),i&&r.push(i),r}function uo(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function po(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",vo(e)));return function(e,r){for(var a="",o=e||{},i=(r||{}).pretty?uo:encodeURIComponent,s=0;s<n.length;s++){var c=n[s];if("string"!=typeof c){var l,u=o[c.name];if(null==u){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(to(u)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<u.length;p++){if(l=i(u[p]),!t[s].test(l))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(l)+"`");a+=(0===p?c.prefix:c.delimiter)+l}}else{if(l=c.asterisk?encodeURI(u).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):i(u),!t[s].test(l))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+l+'"');a+=c.prefix+l}}else a+=c}return a}}function fo(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function mo(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function ho(n,e){return n.keys=e,n}function vo(n){return n&&n.sensitive?"":"i"}function go(n,e,t){to(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,a=!1!==t.end,o="",i=0;i<n.length;i++){var s=n[i];if("string"==typeof s)o+=fo(s);else{var c=fo(s.prefix),l="(?:"+s.pattern+")";e.push(s),s.repeat&&(l+="(?:"+c+l+")*"),o+=l=s.optional?s.partial?c+"("+l+")?":"(?:"+c+"("+l+"))?":c+"("+l+")"}}var u=fo(t.delimiter||"/"),p=o.slice(-u.length)===u;return r||(o=(p?o.slice(0,-u.length):o)+"(?:"+u+"(?=$))?"),o+=a?"$":r&&p?"":"(?="+u+"|$)",ho(new RegExp("^"+o,vo(t)),e)}function bo(n,e,t){return to(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return ho(n,e)}(n,e):to(n)?function(n,e,t){for(var r=[],a=0;a<n.length;a++)r.push(bo(n[a],e,t).source);return ho(new RegExp("(?:"+r.join("|")+")",vo(t)),e)}(n,e,t):function(n,e,t){return go(lo(n,t),e,t)}(n,e,t)}ro.parse=ao,ro.compile=oo,ro.tokensToFunction=io,ro.tokensToRegExp=so;var yo=Object.create(null);function xo(n,e,t){e=e||{};try{var r=yo[n]||(yo[n]=ro.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function wo(n,e,t,r){var a="string"==typeof n?{path:n}:n;if(a._normalized)return a;if(a.name){var o=(a=Ma({},n)).params;return o&&"object"==typeof o&&(a.params=Ma({},o)),a}if(!a.path&&a.params&&e){(a=Ma({},a))._normalized=!0;var i=Ma(Ma({},e.params),a.params);if(e.name)a.name=e.name,a.params=i;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;a.path=xo(s,i,e.path)}else 0;return a}var c=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var a=n.indexOf("?");return a>=0&&(t=n.slice(a+1),n=n.slice(0,a)),{path:n,query:t,hash:e}}(a.path||""),l=e&&e.path||"/",u=c.path?no(c.path,l,t||a.append):l,p=function(n,e,t){void 0===e&&(e={});var r,a=t||$a;try{r=a(n||"")}catch(n){r={}}for(var o in e){var i=e[o];r[o]=Array.isArray(i)?i.map(za):za(i)}return r}(c.query,a.query,r&&r.options.parseQuery),d=a.hash||c.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:u,query:p,hash:d}}var ko,jo=function(){},So={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,a=t.resolve(this.to,r,this.append),o=a.location,i=a.route,s=a.href,c={},l=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==l?"router-link-active":l,d=null==u?"router-link-exact-active":u,f=null==this.activeClass?p:this.activeClass,m=null==this.exactActiveClass?d:this.exactActiveClass,h=i.redirectedFrom?Va(null,wo(i.redirectedFrom),null,t):i;c[m]=Xa(r,h,this.exactPath),c[f]=this.exact||this.exactPath?c[m]:function(n,e){return 0===n.path.replace(Ua,"/").indexOf(e.path.replace(Ua,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,h);var v=c[m]?this.ariaCurrentValue:null,g=function(n){Oo(n)&&(e.replace?t.replace(o,jo):t.push(o,jo))},b={click:Oo};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=g})):b[this.event]=g;var y={class:c},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:i,navigate:g,isActive:c[f],isExactActive:c[m]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)y.on=b,y.attrs={href:s,"aria-current":v};else{var w=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(w){w.isStatic=!1;var k=w.data=Ma({},w.data);for(var j in k.on=k.on||{},k.on){var S=k.on[j];j in b&&(k.on[j]=Array.isArray(S)?S:[S])}for(var O in b)O in k.on?k.on[O].push(b[O]):k.on[O]=g;var C=w.data.attrs=Ma({},w.data.attrs);C.href=s,C["aria-current"]=v}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Oo(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Co="undefined"!=typeof window;function Eo(n,e,t,r,a){var o=e||[],i=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,a,o,i){var s=a.path,c=a.name;0;var l=a.pathToRegexpOptions||{},u=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return eo(e.path+"/"+n)}(s,o,l.strict);"boolean"==typeof a.caseSensitive&&(l.sensitive=a.caseSensitive);var p={path:u,regex:Ao(u,l),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:c,parent:o,matchAs:i,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var o=i?eo(i+"/"+a.path):void 0;n(e,t,r,a,p,o)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==a.alias)for(var d=Array.isArray(a.alias)?a.alias:[a.alias],f=0;f<d.length;++f){0;var m={path:d[f],children:a.children};n(e,t,r,m,o,p.path||"/")}c&&(r[c]||(r[c]=p))}(o,i,s,n,a)}));for(var c=0,l=o.length;c<l;c++)"*"===o[c]&&(o.push(o.splice(c,1)[0]),l--,c--);return{pathList:o,pathMap:i,nameMap:s}}function Ao(n,e){return ro(n,[],e)}function _o(n,e){var t=Eo(n),r=t.pathList,a=t.pathMap,o=t.nameMap;function i(n,t,i){var s=wo(n,t,!1,e),l=s.name;if(l){var u=o[l];if(!u)return c(null,s);var p=u.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in s.params)&&p.indexOf(d)>-1&&(s.params[d]=t.params[d]);return s.path=xo(u.path,s.params),c(u,s,i)}if(s.path){s.params={};for(var f=0;f<r.length;f++){var m=r[f],h=a[m];if(Bo(h.regex,s.path,s.params))return c(h,s,i)}}return c(null,s)}function s(n,t){var r=n.redirect,a="function"==typeof r?r(Va(n,t,null,e)):r;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return c(null,t);var s=a,l=s.name,u=s.path,p=t.query,d=t.hash,f=t.params;if(p=s.hasOwnProperty("query")?s.query:p,d=s.hasOwnProperty("hash")?s.hash:d,f=s.hasOwnProperty("params")?s.params:f,l){o[l];return i({_normalized:!0,name:l,query:p,hash:d,params:f},void 0,t)}if(u){var m=function(n,e){return no(n,e.parent?e.parent.path:"/",!0)}(u,n);return i({_normalized:!0,path:xo(m,f),query:p,hash:d},void 0,t)}return c(null,t)}function c(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=i({_normalized:!0,path:xo(t,e.params)});if(r){var a=r.matched,o=a[a.length-1];return e.params=r.params,c(o,e)}return c(null,e)}(0,t,n.matchAs):Va(n,t,r,e)}return{match:i,addRoute:function(n,e){var t="object"!=typeof n?o[n]:void 0;Eo([e||n],r,a,o,t),t&&t.alias.length&&Eo(t.alias.map((function(n){return{path:n,children:[e]}})),r,a,o,t)},getRoutes:function(){return r.map((function(n){return a[n]}))},addRoutes:function(n){Eo(n,r,a,o)}}}function Bo(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var a=1,o=r.length;a<o;++a){var i=n.keys[a-1];i&&(t[i.name||"pathMatch"]="string"==typeof r[a]?Na(r[a]):r[a])}return!0}var Po=Co&&window.performance&&window.performance.now?window.performance:Date;function To(){return Po.now().toFixed(3)}var Io=To();function Mo(){return Io}function Do(n){return Io=n}var Lo=Object.create(null);function qo(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=Ma({},window.history.state);return t.key=Mo(),window.history.replaceState(t,"",e),window.addEventListener("popstate",zo),function(){window.removeEventListener("popstate",zo)}}function Ro(n,e,t,r){if(n.app){var a=n.options.scrollBehavior;a&&n.app.$nextTick((function(){var o=function(){var n=Mo();if(n)return Lo[n]}(),i=a.call(n,e,t,r?o:null);i&&("function"==typeof i.then?i.then((function(n){Ho(n,o)})).catch((function(n){0})):Ho(i,o))}))}}function No(){var n=Mo();n&&(Lo[n]={x:window.pageXOffset,y:window.pageYOffset})}function zo(n){No(),n.state&&n.state.key&&Do(n.state.key)}function $o(n){return Uo(n.x)||Uo(n.y)}function Fo(n){return{x:Uo(n.x)?n.x:window.pageXOffset,y:Uo(n.y)?n.y:window.pageYOffset}}function Uo(n){return"number"==typeof n}var Vo=/^#\d/;function Ho(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var a=Vo.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(a){var o=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(a,o={x:Uo((t=o).x)?t.x:0,y:Uo(t.y)?t.y:0})}else $o(n)&&(e=Fo(n))}else r&&$o(n)&&(e=Fo(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var Wo,Go=Co&&((-1===(Wo=window.navigator.userAgent).indexOf("Android 2.")&&-1===Wo.indexOf("Android 4.0")||-1===Wo.indexOf("Mobile Safari")||-1!==Wo.indexOf("Chrome")||-1!==Wo.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function Ko(n,e){No();var t=window.history;try{if(e){var r=Ma({},t.state);r.key=Mo(),t.replaceState(r,"",n)}else t.pushState({key:Do(To())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function Xo(n){Ko(n,!0)}function Jo(n,e,t){var r=function(a){a>=n.length?t():n[a]?e(n[a],(function(){r(a+1)})):r(a+1)};r(0)}var Qo={redirected:2,aborted:4,cancelled:8,duplicated:16};function Yo(n,e){return ni(n,e,Qo.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return ei.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function Zo(n,e){return ni(n,e,Qo.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function ni(n,e,t,r){var a=new Error(r);return a._isRouter=!0,a.from=n,a.to=e,a.type=t,a}var ei=["params","query","hash"];function ti(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function ri(n,e){return ti(n)&&n._isRouter&&(null==e||n.type===e)}function ai(n){return function(e,t,r){var a=!1,o=0,i=null;oi(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){a=!0,o++;var c,l=ci((function(e){var a;((a=e).__esModule||si&&"Module"===a[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:ko.extend(e),t.components[s]=e,--o<=0&&r()})),u=ci((function(n){var e="Failed to resolve async component "+s+": "+n;i||(i=ti(n)?n:new Error(e),r(i))}));try{c=n(l,u)}catch(n){u(n)}if(c)if("function"==typeof c.then)c.then(l,u);else{var p=c.component;p&&"function"==typeof p.then&&p.then(l,u)}}})),a||r()}}function oi(n,e){return ii(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function ii(n){return Array.prototype.concat.apply([],n)}var si="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function ci(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var li=function(n,e){this.router=n,this.base=function(n){if(!n)if(Co){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=Wa,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function ui(n,e,t,r){var a=oi(n,(function(n,r,a,o){var i=function(n,e){"function"!=typeof n&&(n=ko.extend(n));return n.options[e]}(n,e);if(i)return Array.isArray(i)?i.map((function(n){return t(n,r,a,o)})):t(i,r,a,o)}));return ii(r?a.reverse():a)}function pi(n,e){if(e)return function(){return n.apply(e,arguments)}}li.prototype.listen=function(n){this.cb=n},li.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},li.prototype.onError=function(n){this.errorCbs.push(n)},li.prototype.transitionTo=function(n,e,t){var r,a=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var o=this.current;this.confirmTransition(r,(function(){a.updateRoute(r),e&&e(r),a.ensureURL(),a.router.afterHooks.forEach((function(n){n&&n(r,o)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!a.ready&&(ri(n,Qo.redirected)&&o===Wa||(a.ready=!0,a.readyErrorCbs.forEach((function(e){e(n)}))))}))},li.prototype.confirmTransition=function(n,e,t){var r=this,a=this.current;this.pending=n;var o,i,s=function(n){!ri(n)&&ti(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},c=n.matched.length-1,l=a.matched.length-1;if(Xa(n,a)&&c===l&&n.matched[c]===a.matched[l])return this.ensureURL(),n.hash&&Ro(this.router,a,n,!1),s(((i=ni(o=a,n,Qo.duplicated,'Avoided redundant navigation to current location: "'+o.fullPath+'".')).name="NavigationDuplicated",i));var u=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=u.updated,d=u.deactivated,f=u.activated,m=[].concat(function(n){return ui(n,"beforeRouteLeave",pi,!0)}(d),this.router.beforeHooks,function(n){return ui(n,"beforeRouteUpdate",pi)}(p),f.map((function(n){return n.beforeEnter})),ai(f)),h=function(e,t){if(r.pending!==n)return s(Zo(a,n));try{e(n,a,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return ni(n,e,Qo.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(a,n))):ti(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(Yo(a,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Jo(m,h,(function(){Jo(function(n){return ui(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,a,o){return n(r,a,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),o(n)}))}}(n,t,r)}))}(f).concat(r.router.resolveHooks),h,(function(){if(r.pending!==n)return s(Zo(a,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){Qa(n)}))}))}))},li.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},li.prototype.setupListeners=function(){},li.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=Wa,this.pending=null};var di=function(n){function e(e,t){n.call(this,e,t),this._startLocation=fi(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=Go&&t;r&&this.listeners.push(qo());var a=function(){var t=n.current,a=fi(n.base);n.current===Wa&&a===n._startLocation||n.transitionTo(a,(function(n){r&&Ro(e,n,t,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Ko(eo(r.base+n.fullPath)),Ro(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Xo(eo(r.base+n.fullPath)),Ro(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(fi(this.base)!==this.current.fullPath){var e=eo(this.base+this.current.fullPath);n?Ko(e):Xo(e)}},e.prototype.getCurrentLocation=function(){return fi(this.base)},e}(li);function fi(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(eo(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var mi=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=fi(n);if(!/^\/#/.test(e))return window.location.replace(eo(n+"/#"+e)),!0}(this.base)||hi()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=Go&&e;t&&this.listeners.push(qo());var r=function(){var e=n.current;hi()&&n.transitionTo(vi(),(function(r){t&&Ro(n.router,r,e,!0),Go||yi(r.fullPath)}))},a=Go?"popstate":"hashchange";window.addEventListener(a,r),this.listeners.push((function(){window.removeEventListener(a,r)}))}},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){bi(n.fullPath),Ro(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){yi(n.fullPath),Ro(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;vi()!==e&&(n?bi(e):yi(e))},e.prototype.getCurrentLocation=function(){return vi()},e}(li);function hi(){var n=vi();return"/"===n.charAt(0)||(yi("/"+n),!1)}function vi(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function gi(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function bi(n){Go?Ko(gi(n)):window.location.hash=n}function yi(n){Go?Xo(gi(n)):window.location.replace(gi(n))}var xi=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){ri(n,Qo.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(li),wi=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=_o(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!Go&&!1!==n.fallback,this.fallback&&(e="hash"),Co||(e="abstract"),this.mode=e,e){case"history":this.history=new di(this,n.base);break;case"hash":this.history=new mi(this,n.base,this.fallback);break;case"abstract":this.history=new xi(this,n.base);break;default:0}},ki={currentRoute:{configurable:!0}};function ji(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}wi.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},ki.currentRoute.get=function(){return this.history&&this.history.current},wi.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof di||t instanceof mi){var r=function(n){t.setupListeners(),function(n){var r=t.current,a=e.options.scrollBehavior;Go&&a&&"fullPath"in n&&Ro(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},wi.prototype.beforeEach=function(n){return ji(this.beforeHooks,n)},wi.prototype.beforeResolve=function(n){return ji(this.resolveHooks,n)},wi.prototype.afterEach=function(n){return ji(this.afterHooks,n)},wi.prototype.onReady=function(n,e){this.history.onReady(n,e)},wi.prototype.onError=function(n){this.history.onError(n)},wi.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},wi.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},wi.prototype.go=function(n){this.history.go(n)},wi.prototype.back=function(){this.go(-1)},wi.prototype.forward=function(){this.go(1)},wi.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},wi.prototype.resolve=function(n,e,t){var r=wo(n,e=e||this.history.current,t,this),a=this.match(r,e),o=a.redirectedFrom||a.fullPath;return{location:r,route:a,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?eo(n+"/"+r):r}(this.history.base,o,this.mode),normalizedTo:r,resolved:a}},wi.prototype.getRoutes=function(){return this.matcher.getRoutes()},wi.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==Wa&&this.history.transitionTo(this.history.getCurrentLocation())},wi.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==Wa&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(wi.prototype,ki),wi.install=function n(e){if(!n.installed||ko!==e){n.installed=!0,ko=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",Ya),e.component("RouterLink",So);var a=e.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},wi.version="3.5.3",wi.isNavigationFailure=ri,wi.NavigationFailureType=Qo,wi.START_LOCATION=Wa,Co&&window.Vue&&window.Vue.use(wi);var Si=wi;t(182),t(183),t(258),t(46),t(260),t(26),t(27),t(261);function Oi(n){n.locales&&Object.keys(n.locales).forEach((function(e){n.locales[e].path=e})),Object.freeze(n)}t(74),t(97),t(134);function Ci(n){return(Ci="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var Ei=t(76),Ai=(t(192),t(28),t(53),t(232),t(233),t(48),t(30),{NotFound:function(){return Promise.all([t.e(1),t.e(13)]).then(t.bind(null,490))},Layout:function(){return Promise.all([t.e(1),t.e(11)]).then(t.bind(null,489))}}),_i={"v-3485ffd7":function(){return t.e(14).then(t.bind(null,491))},"v-3a9ce02d":function(){return t.e(15).then(t.bind(null,492))},"v-b043e1b6":function(){return t.e(16).then(t.bind(null,493))},"v-6b3c84a5":function(){return t.e(17).then(t.bind(null,494))},"v-5a7cdd80":function(){return t.e(18).then(t.bind(null,495))},"v-4c6fa37b":function(){return t.e(19).then(t.bind(null,496))},"v-245188e7":function(){return t.e(20).then(t.bind(null,497))},"v-4452e22a":function(){return t.e(21).then(t.bind(null,498))},"v-13c2056a":function(){return t.e(22).then(t.bind(null,499))},"v-5783fd5e":function(){return t.e(23).then(t.bind(null,500))},"v-18fc13e0":function(){return t.e(24).then(t.bind(null,501))},"v-04bb8b53":function(){return t.e(25).then(t.bind(null,502))},"v-676a4bcc":function(){return t.e(26).then(t.bind(null,503))},"v-4167bf9c":function(){return t.e(27).then(t.bind(null,504))},"v-7dd6a16f":function(){return t.e(28).then(t.bind(null,505))},"v-12a39364":function(){return t.e(29).then(t.bind(null,506))},"v-9d7b0978":function(){return t.e(30).then(t.bind(null,507))},"v-068ae18c":function(){return t.e(31).then(t.bind(null,508))},"v-5526dc2f":function(){return t.e(32).then(t.bind(null,509))},"v-05550a82":function(){return t.e(33).then(t.bind(null,510))},"v-59de6d20":function(){return t.e(34).then(t.bind(null,511))}};function Bi(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var Pi=/-(\w)/g,Ti=Bi((function(n){return n.replace(Pi,(function(n,e){return e?e.toUpperCase():""}))})),Ii=/\B([A-Z])/g,Mi=Bi((function(n){return n.replace(Ii,"-$1").toLowerCase()})),Di=Bi((function(n){return n.charAt(0).toUpperCase()+n.slice(1)}));function Li(n,e){if(e)return n(e)?n(e):e.includes("-")?n(Di(Ti(e))):n(Di(e))||n(Mi(e))}var qi=Object.assign({},Ai,_i),Ri=function(n){return qi[n]},Ni=function(n){return _i[n]},zi=function(n){return Ai[n]},$i=function(n){return Ia.component(n)};function Fi(n){return Li(Ni,n)}function Ui(n){return Li(zi,n)}function Vi(n){return Li(Ri,n)}function Hi(n){return Li($i,n)}function Wi(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return Promise.all(e.filter((function(n){return n})).map(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(Hi(e)||!Vi(e)){n.next=5;break}return n.next=3,Vi(e)();case 3:t=n.sent,Ia.component(e,t.default);case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()))}function Gi(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var Ki=t(50),Xi=(t(274),t(156),t(51),t(221)),Ji=t.n(Xi),Qi=t(222),Yi=t.n(Qi),Zi={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(n){return"meta"===Object(Ki.a)(n,1)[0]})).map((function(n){var e=Object(Ki.a)(n,2);e[0];return e[1]})),this.$ssrContext){var n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map((function(n){var e="<meta";return Object.keys(n).forEach((function(t){e+=" ".concat(t,'="').concat(Yi()(n[t]),'"')})),e+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=es(this.$canonicalUrl)}var e},mounted:function(){this.currentMetaTags=Object(Ei.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var n=this.getMergedMetaTags();this.currentMetaTags=ts(n,this.currentMetaTags)},getMergedMetaTags:function(){var n=this.$page.frontmatter.meta||[];return Ji()([{name:"description",content:this.$description}],n,this.siteMeta,rs)},updateCanonicalLink:function(){ns(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",es(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){ts(null,this.currentMetaTags),ns()}};function ns(){var n=document.querySelector("link[rel='canonical']");n&&n.remove()}function es(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return n?'<link href="'.concat(n,'" rel="canonical" />'):""}function ts(n,e){if(e&&Object(Ei.a)(e).filter((function(n){return n.parentNode===document.head})).forEach((function(n){return document.head.removeChild(n)})),n)return n.map((function(n){var e=document.createElement("meta");return Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),document.head.appendChild(e),e}))}function rs(n){for(var e=0,t=["name","property","itemprop"];e<t.length;e++){var r=t[e];if(n.hasOwnProperty(r))return n[r]+r}return JSON.stringify(n)}t(149);var as=t(157),os={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(as)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var n=this,e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(n){return e.some((function(e){return e.hash===n.hash}))})),r=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),o=window.innerHeight+r,i=0;i<t.length;i++){var s=t[i],c=t[i+1],l=0===i&&0===r||r>=s.parentElement.offsetTop+10&&(!c||r<c.parentElement.offsetTop-10),u=decodeURIComponent(this.$route.hash);if(l&&u!==decodeURIComponent(s.hash)){var p=s;if(o===a)for(var d=i+1;d<t.length;d++)if(u===decodeURIComponent(t[d].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(p.hash),(function(){n.$nextTick((function(){n.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},is=(t(58),t(109)),ss=t.n(is),cs={mounted:function(){var n=this;ss.a.configure({showSpinner:!1}),this.$router.beforeEach((function(n,e,t){n.path===e.path||Ia.component(n.name)||ss.a.start(),t()})),this.$router.afterEach((function(){ss.a.done(),n.isSidebarOpen=!1}))}};t(80),t(110),t(83),t(369);function ls(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}t(105);function us(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function ps(n,e,t){return e&&us(n.prototype,e),t&&us(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}t(370);var ds=function(){function n(){ls(this,n);this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}return ps(n,[{key:"show",value:function(n){var e=this,t=n.text,r=void 0===t?"":t,a=n.duration,o=void 0===a?3e3:a,i=document.createElement("div");i.className="message move-in",i.innerHTML='\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">'.concat(r,"</div>\n    "),this.containerEl.appendChild(i),o>0&&setTimeout((function(){e.close(i)}),o)}},{key:"close",value:function(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",(function(){n.remove()}))}}]),n}(),fs={mounted:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy:function(){var n=this;setTimeout((function(){(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach((function(e){document.querySelectorAll(e).forEach(n.generateCopyButton)}))}),1e3)},generateCopyButton:function(n){var e=this;if(!n.classList.contains("codecopy-enabled")){var t=document.createElement("i");t.className="code-copy",t.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',t.title="Copy to clipboard",t.addEventListener("click",(function(){e.copyToClipboard(n.innerText)})),n.appendChild(t),n.classList.add("codecopy-enabled")}},copyToClipboard:function(n){var e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);var t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy"),(new ds).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}},ms=(t(79),"auto"),hs="zoom-in",vs="zoom-out",gs="grab",bs="move";function ys(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a={passive:!1};r?n.addEventListener(e,t,a):n.removeEventListener(e,t,a)}function xs(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function ws(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function ks(n,e,t){!function(n){var e=js,t=Ss;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var a=n.transform;delete n.transform,n[t]=a}}(e);var r=n.style,a={};for(var o in e)t&&(a[o]=r[o]||""),r[o]=e[o];return a}var js="transition",Ss="transform",Os="transform",Cs="transitionend";var Es=function(){},As={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Es,onClose:Es,onGrab:Es,onMove:Es,onRelease:Es,onBeforeOpen:Es,onBeforeClose:Es,onBeforeGrab:Es,onBeforeRelease:Es,onImageLoading:Es,onImageLoaded:Es},_s={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),Ps(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,a=this.lastScrollPosition.y-t,o=this.options.scrollThreshold;(Math.abs(a)>=o||Math.abs(r)>=o)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(Bs(n)&&!Ps(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){Bs(n)&&!Ps(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Bs(n){return 0===n.button}function Ps(n){return n.metaKey||n.ctrlKey}var Ts={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,ks(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),ys(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){ks(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},Is="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Ms=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),Ds=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Ls={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=ws(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,a=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?gs:vs,transition:Os+"\n        "+r+"s\n        "+a,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=ks(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,ks(this.el,{transform:"none"})},grab:function(n,e,t){var r=qs(),a=r.x-n,o=r.y-e;ks(this.el,{cursor:bs,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=qs(),a=r.x-n,o=r.y-e;ks(this.el,{transition:Os,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){ks(this.el,this.styleClose)},restoreOpenStyle:function(){ks(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=qs(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,a=r.customSize,o=r.scaleBase;if(!a&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(a&&"object"===(void 0===a?"undefined":Is(a)))return{x:a.width/this.rect.width,y:a.height/this.rect.height};var i=this.rect.width/2,s=this.rect.height/2,c=qs(),l={x:c.x-i,y:c.y-s},u=l.x/i,p=l.y/s,d=o+Math.min(u,p);if(a&&"string"==typeof a){var f=t||this.el.naturalWidth,m=e||this.el.naturalHeight,h=parseFloat(a)*f/(100*this.rect.width),v=parseFloat(a)*m/(100*this.rect.height);if(d>h||d>v)return{x:h,y:v}}return{x:d,y:d}}};function qs(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function Rs(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){ys(n,r,e[r],t)}))}var Ns=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(Ls),this.overlay=Object.create(Ts),this.handler=Object.create(_s),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=Ds({},As,e),this.overlay.init(this),this.handler.init(this)}return Ms(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=hs,ys(n,"click",this.handler.click),this.options.preloadImage&&xs(ws(n)));return this}},{key:"config",value:function(n){return n?(Ds(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var a=this.target.srcOriginal;null!=a&&(this.options.onImageLoading(r),xs(a,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),ys(document,"scroll",this.handler.scroll),ys(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&ys(window,"resize",this.handler.resizeWindow);var o=function n(){ys(r,Cs,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&Rs(document,e.handler,!0),t(r)};return ys(r,Cs,o),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=ms,this.overlay.fadeOut(),this.target.zoomOut(),ys(document,"scroll",this.handler.scroll,!1),ys(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&ys(window,"resize",this.handler.resizeWindow,!1);var r=function r(){ys(t,Cs,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&Rs(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return ys(t,Cs,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var a=this.target.el;this.options.onBeforeGrab(a),this.released=!1,this.target.grab(n,e,t);var o=function n(){ys(a,Cs,n,!1),r(a)};return ys(a,Cs,o),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=bs,this.target.move(n,e,t);var a=this.target.el,o=function n(){ys(a,Cs,n,!1),r(a)};return ys(a,Cs,o),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=ms,this.target.restoreOpenStyle();var r=function r(){ys(t,Cs,r,!1),n.lock=!1,n.released=!0,e(t)};return ys(t,Cs,r),this}}}]),n}(),zs=".theme-vdoing-content img:not(.no-zoom)",$s=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),Fs=Number("500"),Us=function(){function n(){ls(this,n),this.instance=new Ns($s)}return ps(n,[{key:"update",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:zs;"undefined"!=typeof window&&this.instance.listen(n)}},{key:"updateDelay",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:zs,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Fs;setTimeout((function(){return n.update(e)}),t)}}]),n}(),Vs=[Zi,os,cs,fs,{watch:{"$page.path":function(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted:function(){this.$vuepress.zooming=new Us,this.$vuepress.zooming.updateDelay()}}],Hs={name:"GlobalLayout",computed:{layout:function(){var n=this.getLayout();return Gi("layout",n),Ia.component(n)}},methods:{getLayout:function(){if(this.$page.path){var n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},Ws=t(41),Gs=Object(Ws.a)(Hs,(function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){var r;switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),(r=n[e]).push.apply(r,Object(Ei.a)(t));break;default:throw new Error("Unknown option name.")}}(Gs,"mixins",Vs);var Ks=[{name:"v-3485ffd7",path:"/java/100/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-3485ffd7").then(t)}},{path:"/java/100/index.html",redirect:"/java/100/"},{path:"/00.java/10.java/100.java1.html",redirect:"/java/100/"},{name:"v-3a9ce02d",path:"/spring/200/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-3a9ce02d").then(t)}},{path:"/spring/200/index.html",redirect:"/spring/200/"},{path:"/00.java/20.Spring/200.核心功能拆解 IOC.html",redirect:"/spring/200/"},{name:"v-b043e1b6",path:"/spring/201/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-b043e1b6").then(t)}},{path:"/spring/201/index.html",redirect:"/spring/201/"},{path:"/00.java/20.Spring/201.核心功能拆解 AOP.html",redirect:"/spring/201/"},{name:"v-6b3c84a5",path:"/spring/202/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-6b3c84a5").then(t)}},{path:"/spring/202/index.html",redirect:"/spring/202/"},{path:"/00.java/20.Spring/202.核心功能拆解 事件通知.html",redirect:"/spring/202/"},{name:"v-5a7cdd80",path:"/spring/203/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-5a7cdd80").then(t)}},{path:"/spring/203/index.html",redirect:"/spring/203/"},{path:"/00.java/20.Spring/203.核心功能拆解 三级缓存.html",redirect:"/spring/203/"},{name:"v-4c6fa37b",path:"/spring/204/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-4c6fa37b").then(t)}},{path:"/spring/204/index.html",redirect:"/spring/204/"},{path:"/00.java/20.Spring/204.核心功能拆解 FactoryBean.html",redirect:"/spring/204/"},{name:"v-245188e7",path:"/spring/205/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-245188e7").then(t)}},{path:"/spring/205/index.html",redirect:"/spring/205/"},{path:"/00.java/20.Spring/205.注解替代Spring生命周期实现类.html",redirect:"/spring/205/"},{name:"v-4452e22a",path:"/maven/2300/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-4452e22a").then(t)}},{path:"/maven/2300/index.html",redirect:"/maven/2300/"},{path:"/00.java/2300.maven/2300.pom 文件介绍及 parent、properties 标签详解.html",redirect:"/maven/2300/"},{name:"v-13c2056a",path:"/maven/2301/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-13c2056a").then(t)}},{path:"/maven/2301/index.html",redirect:"/maven/2301/"},{path:"/00.java/2300.maven/2301.dependencies 标签详解.html",redirect:"/maven/2301/"},{name:"v-5783fd5e",path:"/maven/2302/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-5783fd5e").then(t)}},{path:"/maven/2302/index.html",redirect:"/maven/2302/"},{path:"/00.java/2300.maven/2302.使用 Nexus3.x 搭建私服.html",redirect:"/maven/2302/"},{name:"v-18fc13e0",path:"/mybatis/300/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-18fc13e0").then(t)}},{path:"/mybatis/300/index.html",redirect:"/mybatis/300/"},{path:"/00.java/30.Mybatis/300.核心功能拆解 工作流程.html",redirect:"/mybatis/300/"},{name:"v-04bb8b53",path:"/mybatis/301/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-04bb8b53").then(t)}},{path:"/mybatis/301/index.html",redirect:"/mybatis/301/"},{path:"/00.java/30.Mybatis/301.核心功能拆解 Plugin插件功能实现.html",redirect:"/mybatis/301/"},{name:"v-676a4bcc",path:"/mybatis/302/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-676a4bcc").then(t)}},{path:"/mybatis/302/index.html",redirect:"/mybatis/302/"},{path:"/00.java/30.Mybatis/302.核心功能拆解 一二级缓存原理.html",redirect:"/mybatis/302/"},{name:"v-4167bf9c",path:"/mybatis/303/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-4167bf9c").then(t)}},{path:"/mybatis/303/index.html",redirect:"/mybatis/303/"},{path:"/00.java/30.Mybatis/303.MyBatis Plus+Spring Boot 实现一二级缓存以及自定义缓存.html",redirect:"/mybatis/303/"},{name:"v-7dd6a16f",path:"/docker/400/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-7dd6a16f").then(t)}},{path:"/docker/400/index.html",redirect:"/docker/400/"},{path:"/01.运维/40.Docker/400.Docker 概念、命令及Dockerfile介绍.html",redirect:"/docker/400/"},{name:"v-12a39364",path:"/docker/401/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-12a39364").then(t)}},{path:"/docker/401/index.html",redirect:"/docker/401/"},{path:"/01.运维/40.Docker/401.Docker-Compose 命令及基本使用.html",redirect:"/docker/401/"},{name:"v-9d7b0978",path:"/easy-security/2100/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-9d7b0978").then(t)}},{path:"/easy-security/2100/index.html",redirect:"/easy-security/2100/"},{path:"/06.作品/2100.Easy-Security/2100.index.html",redirect:"/easy-security/2100/"},{name:"v-068ae18c",path:"/easy-manager-tool/2200/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-068ae18c").then(t)}},{path:"/easy-manager-tool/2200/index.html",redirect:"/easy-manager-tool/2200/"},{path:"/06.作品/2200.Easy-Manager-Tool/2200.介绍及安装.html",redirect:"/easy-manager-tool/2200/"},{name:"v-5526dc2f",path:"/easy-manager-tool/2201/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-5526dc2f").then(t)}},{path:"/easy-manager-tool/2201/index.html",redirect:"/easy-manager-tool/2201/"},{path:"/06.作品/2200.Easy-Manager-Tool/2201.功能演示.html",redirect:"/easy-manager-tool/2201/"},{name:"v-05550a82",path:"/easy-manager-tool/2202/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-05550a82").then(t)}},{path:"/easy-manager-tool/2202/index.html",redirect:"/easy-manager-tool/2202/"},{path:"/06.作品/2200.Easy-Manager-Tool/2202.内容更新.html",redirect:"/easy-manager-tool/2202/"},{name:"v-59de6d20",path:"/",component:Gs,beforeEnter:function(n,e,t){Wi("Layout","v-59de6d20").then(t)}},{path:"/index.html",redirect:"/"},{path:"*",component:Gs}],Xs={title:"BigUncle技术博客",description:"技术博客",base:"/",headTags:[["link",{rel:"icon",href:"/favicon.ico"}],["meta",{name:"viewport",content:"width=device-width,initial-scale=1,user-scalable=no"}]],pages:[{title:"JVM",frontmatter:{title:"JVM",date:"2023-06-25T09:22:36.000Z",permalink:"/java/100/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/10.java/100.java1.html",relativePath:"00.java/10.java/100.java1.md",key:"v-3485ffd7",path:"/java/100/",lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"核心功能拆解 IOC",frontmatter:{title:"核心功能拆解 IOC",date:"2023-06-25T09:22:36.000Z",permalink:"/spring/200/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/20.Spring/200.%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E6%8B%86%E8%A7%A3%20IOC.html",relativePath:"00.java/20.Spring/200.核心功能拆解 IOC.md",key:"v-3a9ce02d",path:"/spring/200/",headers:[{level:2,title:"读取XML文件",slug:"读取xml文件",normalizedTitle:"读取 xml 文件",charIndex:266},{level:2,title:"封装 BeanDefinition",slug:"封装-beandefinition",normalizedTitle:"封装 beandefinition",charIndex:1752},{level:2,title:"BeanFactoryPostProcessor",slug:"beanfactorypostprocessor",normalizedTitle:"beanfactorypostprocessor",charIndex:6633},{level:2,title:"注册实现BeanPostProcessor的类",slug:"注册实现beanpostprocessor的类",normalizedTitle:"注册实现 beanpostprocessor 的类",charIndex:8907},{level:2,title:"实例化Bean",slug:"实例化bean",normalizedTitle:"实例化 bean",charIndex:9031},{level:2,title:"注解属性填充",slug:"注解属性填充",normalizedTitle:"注解属性填充",charIndex:233},{level:2,title:"XML属性填充",slug:"xml属性填充",normalizedTitle:"xml 属性填充",charIndex:244},{level:2,title:"感知对象",slug:"感知对象",normalizedTitle:"感知对象",charIndex:18936},{level:2,title:"初始化方法之前",slug:"初始化方法之前",normalizedTitle:"初始化方法之前",charIndex:20221},{level:2,title:"Bean的初始化方法",slug:"bean的初始化方法",normalizedTitle:"bean 的初始化方法",charIndex:11230},{level:2,title:"初始化方法之后",slug:"初始化方法之后",normalizedTitle:"初始化方法之后",charIndex:22301},{level:2,title:"注册销毁事件",slug:"注册销毁事件",normalizedTitle:"注册销毁事件",charIndex:22789},{level:2,title:"scop处理单例",slug:"scop处理单例",normalizedTitle:"scop 处理单例",charIndex:25471}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"读取XML文件 封装 BeanDefinition BeanFactoryPostProcessor 注册实现BeanPostProcessor的类 实例化Bean 注解属性填充 XML属性填充 感知对象 初始化方法之前 Bean的初始化方法 初始化方法之后 注册销毁事件 scop处理单例",content:'Spring 是 JAVA 开发用到最多的一个 WEB 框架，核心是 IOC（控制反转）和 AOP（面向切面），但做为架构，想要对 Spring 要进行扩展等，必须要了解 Spring 的生命周期、事件、AOP、行为感知等。Spring 生命周期如下图：\n\n\n\n提示\n\n本文主要了解 spring 生命周期的有哪些，以及他们的核心代码是怎么编写，整个过程是偏 IOC 和 DI 的，IOC 将对象的创建和依赖关系的维护从代码中脱离出来，通过配置读取创建对象；DI 从注解属性填充过程以及 XML 属性填充过程为具体的体现。\n\n\n# 读取 XML 文件\n\n通过 ClassPathXmlApplicationContext 来读取资源文件下的 spring.xml\n\n    @Test\n    public void test() {\n        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext("classpath:spring.xml");\n        UserService userService = applicationContext.getBean("userService", UserService.class);\n        System.out.println("测试结果：" + userService.queryUserInfo());\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n根据文件类型使用不同的方式读取到流中\n\n    @Override\n    public Resource getResource(String location) {\n        Assert.notNull(location, "Location must not be null");\n        if (location.startsWith(CLASSPATH_URL_PREFIX)) {\n            return new ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()));\n        }\n        else {\n            try {\n                URL url = new URL(location);\n                return new UrlResource(url);\n            } catch (MalformedURLException e) {\n                return new FileSystemResource(location);\n            }\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n调用 XML 解析\n\n    @Override\n    public void loadBeanDefinitions(Resource resource) throws BeansException {\n        try {\n            try (InputStream inputStream = resource.getInputStream()) {\n                doLoadBeanDefinitions(inputStream);\n            }\n        } catch (IOException | ClassNotFoundException | DocumentException e) {\n            throw new BeansException("IOException parsing XML document from " + resource, e);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 封装 BeanDefinition\n\n解析 XML 的整个过程：\n\n * 解析 DOM\n * 解析带有 @Component 注解的类，并封装为 BeanDefinition 注册到 BeanFactory\n * 解析不是 component-scan 定义的类\n\n    protected void doLoadBeanDefinitions(InputStream inputStream) throws ClassNotFoundException, DocumentException {\n        // 使用 org.dom4j.io 的解析器\n        SAXReader reader = new SAXReader();\n        Document document = reader.read(inputStream);\n        Element root = document.getRootElement();\n        // 解析 context:component-scan 标签，扫描包中的类并提取相关信息，用于组装 BeanDefinition\n        Element componentScan = root.element("component-scan");\n        if (null != componentScan) {\n            String scanPath = componentScan.attributeValue("base-package");\n            if (StrUtil.isEmpty(scanPath)) {\n                throw new BeansException("The value of base-package attribute can not be empty or null");\n            }\n            // 扫描整个包\n            scanPackage(scanPath);\n        }\n        List<Element> beanList = root.elements("bean");\n        for (Element bean : beanList) {\n            String id = bean.attributeValue("id");\n            String name = bean.attributeValue("name");\n            String className = bean.attributeValue("class");\n            String initMethod = bean.attributeValue("init-method");\n            String destroyMethodName = bean.attributeValue("destroy-method");\n            String beanScope = bean.attributeValue("scope");\n            // 获取 Class，方便获取类中的名称\n            Class<?> clazz = Class.forName(className);\n            // 优先级 id > name\n            String beanName = StrUtil.isNotEmpty(id) ? id : name;\n            if (StrUtil.isEmpty(beanName)) {\n                beanName = StrUtil.lowerFirst(clazz.getSimpleName());\n            }\n            // 定义Bean\n            BeanDefinition beanDefinition = new BeanDefinition(clazz);\n            beanDefinition.setInitMethodName(initMethod);\n            beanDefinition.setDestroyMethodName(destroyMethodName);\n            if (StrUtil.isNotEmpty(beanScope)) {\n                beanDefinition.setScope(beanScope);\n            }\n            List<Element> propertyList = bean.elements("property");\n            // 读取属性并填充\n            for (Element property : propertyList) {\n                // 解析标签：property\n                String attrName = property.attributeValue("name");\n                String attrValue = property.attributeValue("value");\n                String attrRef = property.attributeValue("ref");\n                // 获取属性值：引入对象、值对象\n                Object value = StrUtil.isNotEmpty(attrRef) ? new BeanReference(attrRef) : attrValue;\n                // 创建属性信息\n                PropertyValue propertyValue = new PropertyValue(attrName, value);\n                beanDefinition.getPropertyValues().addPropertyValue(propertyValue);\n            }\n            if (getRegistry().containsBeanDefinition(beanName)) {\n                throw new BeansException("Duplicate beanName[" + beanName + "] is not allowed");\n            }\n            // 注册 BeanDefinition\n            getRegistry().registerBeanDefinition(beanName, beanDefinition);\n        }\n    }\n\n    private void scanPackage(String scanPath) {\n        String[] basePackages = StrUtil.splitToArray(scanPath, \',\');\n        ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(getRegistry());\n        scanner.doScan(basePackages);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n\n\n根据提供路径封装为 BeanDefinition 并注册到 BeanFactory\n\n    public void doScan(String... basePackages) {\n        for (String basePackage : basePackages) {\n            Set<BeanDefinition> candidates = findCandidateComponents(basePackage);\n            for (BeanDefinition beanDefinition : candidates) {\n                // 解析 Bean 的作用域 singleton、prototype\n                String beanScope = resolveBeanScope(beanDefinition);\n                if (StrUtil.isNotEmpty(beanScope)) {\n                    beanDefinition.setScope(beanScope);\n                }\n                registry.registerBeanDefinition(determineBeanName(beanDefinition), beanDefinition);\n            }\n        }\n\n        // 注册处理注解的 BeanPostProcessor(@Autowired、@Value)\n        registry.registerBeanDefinition("cn.bugstack.springframework.context.annotation.internalAutowiredAnnotationProcessor", new BeanDefinition(AutowiredAnnotationBeanPostProcessor.class));\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n对提供的包路径扫描有 @Component 注解的类\n\n    public Set<BeanDefinition> findCandidateComponents(String basePackage) {\n        Set<BeanDefinition> candidates = new LinkedHashSet<>();\n        Set<Class<?>> classes = ClassUtil.scanPackageByAnnotation(basePackage, Component.class);\n        for (Class<?> clazz : classes) {\n            candidates.add(new BeanDefinition(clazz));\n        }\n        return candidates;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# BeanFactoryPostProcessor\n\nBeanFactoryPostProcessor 可以修改我们对 BeanDefinition 定义的所有信息，可以添加属性，修改属性，添加额外的方法等。具体会对所有实现 BeanFactoryPostProcessor 的类进行获取，并循环调用 postProcessBeanFactory 方法\n\n    private void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n        Map<String, BeanFactoryPostProcessor> beanFactoryPostProcessorMap = beanFactory.getBeansOfType(BeanFactoryPostProcessor.class);\n        for (BeanFactoryPostProcessor beanFactoryPostProcessor : beanFactoryPostProcessorMap.values()) {\n            beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n提供一个默认的实现\n\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n        try {\n            // 加载属性文件\n            DefaultResourceLoader resourceLoader = new DefaultResourceLoader();\n            Resource resource = resourceLoader.getResource(location);\n\n            // 把属性文件的内容加载到Properties里组成键值对\n            Properties properties = new Properties();\n            properties.load(resource.getInputStream());\n            String[] beanDefinitionNames = beanFactory.getBeanDefinitionNames();\n            for (String beanName : beanDefinitionNames) {\n                BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);\n                PropertyValues propertyValues = beanDefinition.getPropertyValues();\n                for (PropertyValue propertyValue : propertyValues.getPropertyValues()) {\n                    Object value = propertyValue.getValue();\n                    if (!(value instanceof String)) continue;\n                    value = resolvePlaceholder((String) value, properties);\n                    propertyValues.addPropertyValue(new PropertyValue(propertyValue.getName(), value));\n                }\n            }\n            // 向容器中添加字符串解析器，供解析@Value注解使用\n            StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(properties);\n            // 注册到容器，以便后续使用\n            beanFactory.addEmbeddedValueResolver(valueResolver);\n        } catch (IOException e) {\n            throw new BeansException("Could not load properties", e);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 注册实现 BeanPostProcessor 的类\n\nBeanPostProcessor 就是提供了 postProcessBeforeInitialization，postProcessAfterInitialization 两种方法，提供我们在实例化 Bean 的时候，所有实现 BeanPostProcessor 的类，注册到 List<BeanPostProcessor> beanPostProcessors = new ArrayList<BeanPostProcessor>(); 中\n\n    private void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n        Map<String, BeanPostProcessor> beanPostProcessorMap = beanFactory.getBeansOfType(BeanPostProcessor.class);\n        for (BeanPostProcessor beanPostProcessor : beanPostProcessorMap.values()) {\n            beanFactory.addBeanPostProcessor(beanPostProcessor);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 实例化 Bean\n\n    protected <T> T doGetBean(final String name, final Object[] args) {\n        // 从缓存中获取实例\n        Object sharedInstance = getSingleton(name);\n        if (sharedInstance != null) {\n            // 如果实现了 FactoryBean，则需要调用 FactoryBean##getObject\n            return (T) getObjectForBeanInstance(sharedInstance, name);\n        }\n        // 从BeanDefinition列表中获取对象\n        BeanDefinition beanDefinition = getBeanDefinition(name);\n        Object bean = createBean(name, beanDefinition, args);\n        // 如果实现了 FactoryBean，则需要调用 FactoryBean##getObject\n        return (T) getObjectForBeanInstance(bean, name);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n实例化 Bean 的具体方法\n\n    protected Object doCreateBean(String beanName, BeanDefinition beanDefinition, Object[] args) {\n        Object bean = null;\n        try {\n            // 实例化 Bean\n            bean = createBeanInstance(beanDefinition, beanName, args);\n            // 处理循环依赖，将实例化后的Bean对象提前放入缓存中暴露出来\n            if (beanDefinition.isSingleton()) {\n                Object finalBean = bean;\n                addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, beanDefinition, finalBean));\n            }\n            // 是否需要继续进行后续的属性填充\n            boolean continueWithPropertyPopulation = applyBeanPostProcessorsAfterInstantiation(beanName, bean);\n            if (!continueWithPropertyPopulation) {\n                return bean;\n            }\n            // 在设置 Bean 属性之前，允许 BeanPostProcessor 修改属性值（注解属性填充）\n            applyBeanPostProcessorsBeforeApplyingPropertyValues(beanName, bean, beanDefinition);\n            // 给 Bean 填充属性（xml属性填充）\n            applyPropertyValues(beanName, bean, beanDefinition);\n            // 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法\n            bean = initializeBean(beanName, bean, beanDefinition);\n        } catch (Exception e) {\n            throw new BeansException("Instantiation of bean failed", e);\n        }\n        // 注册实现了 DisposableBean 接口的 Bean 对象\n        registerDisposableBeanIfNecessary(beanName, bean, beanDefinition);\n        // 判断 SCOPE_SINGLETON、SCOPE_PROTOTYPE\n        Object exposedObject = bean;\n        if (beanDefinition.isSingleton()) {\n            // 获取代理对象\n            exposedObject = getSingleton(beanName);\n            registerSingleton(beanName, exposedObject);\n        }\n        return exposedObject;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\ncreateBeanInstance 使用了 CGLIB 来实例化一个 Bean, 也可以使用 JAVA 自带的反射\n\n    protected Object createBeanInstance(BeanDefinition beanDefinition, String beanName, Object[] args) {\n        Constructor constructorToUse = null;\n        Class<?> beanClass = beanDefinition.getBeanClass();\n        Constructor<?>[] declaredConstructors = beanClass.getDeclaredConstructors();\n        for (Constructor ctor : declaredConstructors) {\n            if (null != args && ctor.getParameterTypes().length == args.length) {\n                constructorToUse = ctor;\n                break;\n            }\n        }\n        return getInstantiationStrategy().instantiate(beanDefinition, beanName, constructorToUse, args);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nCGLIB 实现实例化\n\n@Override\n    public Object instantiate(BeanDefinition beanDefinition, String beanName, Constructor ctor, Object[] args) throws BeansException {\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(beanDefinition.getBeanClass());\n        enhancer.setCallback(new NoOp() {\n            @Override\n            public int hashCode() {\n                return super.hashCode();\n            }\n        });\n        if (null == ctor) return enhancer.create();\n        return enhancer.create(ctor.getParameterTypes(), args);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nJAVA 反射实现序列化\n\n    @Override\n    public Object instantiate(BeanDefinition beanDefinition, String beanName, Constructor ctor, Object[] args) throws BeansException {\n        Class clazz = beanDefinition.getBeanClass();\n        try {\n            if (null != ctor) {\n                return clazz.getDeclaredConstructor(ctor.getParameterTypes()).newInstance(args);\n            } else {\n                return clazz.getDeclaredConstructor().newInstance();\n            }\n        } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\n            throw new BeansException("Failed to instantiate [" + clazz.getName() + "]", e);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 注解属性填充\n\n注解属性，会从之前注册的 BeanPostProcessor 里匹配 InstantiationAwareBeanPostProcessor 的对象，其中默认的 AutowiredAnnotationBeanPostProcessor 具体实现了该类\n\n    protected void applyBeanPostProcessorsBeforeApplyingPropertyValues(String beanName, Object bean, BeanDefinition beanDefinition) {\n        for (BeanPostProcessor beanPostProcessor : getBeanPostProcessors()) {\n            if (beanPostProcessor instanceof InstantiationAwareBeanPostProcessor) {\n                PropertyValues pvs = ((InstantiationAwareBeanPostProcessor) beanPostProcessor).postProcessPropertyValues(beanDefinition.getPropertyValues(), bean, beanName);\n                if (null != pvs) {\n                    for (PropertyValue propertyValue : pvs.getPropertyValues()) {\n                        beanDefinition.getPropertyValues().addPropertyValue(propertyValue);\n                    }\n                }\n            }\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nAutowiredAnnotationBeanPostProcessor 感知注解属性填充\n\n    @Override\n    public PropertyValues postProcessPropertyValues(PropertyValues pvs, Object bean, String beanName) throws BeansException {\n        Class<?> clazz = bean.getClass();\n        clazz = ClassUtils.isCglibProxyClass(clazz) ? clazz.getSuperclass() : clazz;\n        // 获得对象所有字段\n        Field[] declaredFields = clazz.getDeclaredFields();\n        for (Field field : declaredFields) {\n            // @Value 注解\n            Value valueAnnotation = field.getAnnotation(Value.class);\n            if (null != valueAnnotation) {\n                Object value = valueAnnotation.value();\n                // 解析得到值\n                value = beanFactory.resolveEmbeddedValue((String) value);\n                // 类型转换\n                Class<?> sourceType = value.getClass();\n                Class<?> targetType = (Class<?>) TypeUtil.getType(field);\n                // 对值进行转换处理\n                ConversionService conversionService = beanFactory.getConversionService();\n                if (conversionService != null) {\n                    if (conversionService.canConvert(sourceType, targetType)) {\n                        value = conversionService.convert(value, targetType);\n                    }\n                }\n                // 把值设置进去\n                BeanUtil.setFieldValue(bean, field.getName(), value);\n            }\n        }\n        // 2. 处理注解 @Autowired\n        for (Field field : declaredFields) {\n            Autowired autowiredAnnotation = field.getAnnotation(Autowired.class);\n            if (null != autowiredAnnotation) {\n                Class<?> fieldType = field.getType();\n                String dependentBeanName = null;\n                Qualifier qualifierAnnotation = field.getAnnotation(Qualifier.class);\n                Object dependentBean = null;\n                if (null != qualifierAnnotation) {\n                    dependentBeanName = qualifierAnnotation.value();\n                    dependentBean = beanFactory.getBean(dependentBeanName, fieldType);\n                } else {\n                    dependentBean = beanFactory.getBean(fieldType);\n                }\n                BeanUtil.setFieldValue(bean, field.getName(), dependentBean);\n            }\n        }\n        return pvs;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n\n# XML 属性填充\n\nXML 属性填充这里说过会出现循环依赖的问题，在实例化阶段的前后已经对这个处理了，后续会单独讲解\n\n    protected void applyPropertyValues(String beanName, Object bean, BeanDefinition beanDefinition) {\n        try {\n            PropertyValues propertyValues = beanDefinition.getPropertyValues();\n            for (PropertyValue propertyValue : propertyValues.getPropertyValues()) {\n                String name = propertyValue.getName();\n                Object value = propertyValue.getValue();\n                if (value instanceof BeanReference) {\n                    // A 依赖 B，获取 B 的实例化\n                    BeanReference beanReference = (BeanReference) value;\n                    value = getBean(beanReference.getBeanName());\n                }\n                // 类型转换\n                else {\n                    Class<?> sourceType = value.getClass();\n                    Class<?> targetType = (Class<?>) TypeUtil.getFieldType(bean.getClass(), name);\n                    ConversionService conversionService = getConversionService();\n                    if (conversionService != null) {\n                        if (conversionService.canConvert(sourceType, targetType)) {\n                            value = conversionService.convert(value, targetType);\n                        }\n                    }\n                }\n                // 反射设置属性填充\n                 BeanUtil.setFieldValue(bean, name, value);\n            }\n        } catch (Exception e) {\n            throw new BeansException("Error setting property values：" + beanName + " message：" + e);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 感知对象\n\n感知对象做为一个扩展接口，只要我们的 Bean 实现了这些接口，就可以为我们的 Bean 提供额外的能力\n\n    private Object initializeBean(String beanName, Object bean, BeanDefinition beanDefinition) {\n        // invokeAwareMethods（感知对象）\n        if (bean instanceof Aware) {\n            if (bean instanceof BeanFactoryAware) {\n                ((BeanFactoryAware) bean).setBeanFactory(this);\n            }\n            if (bean instanceof BeanClassLoaderAware) {\n                ((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader());\n            }\n            if (bean instanceof BeanNameAware) {\n                ((BeanNameAware) bean).setBeanName(beanName);\n            }\n        }\n        // 1. 执行 BeanPostProcessor Before 处理\n        Object wrappedBean = applyBeanPostProcessorsBeforeInitialization(bean, beanName);\n        // 执行 Bean 对象的初始化方法\n        try {\n            invokeInitMethods(beanName, wrappedBean, beanDefinition);\n        } catch (Exception e) {\n            throw new BeansException("Invocation of init method of bean[" + beanName + "] failed", e);\n        }\n        // 2. 执行 BeanPostProcessor After 处理\n        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);\n        return wrappedBean;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 初始化方法之前\n\n在 Bean 的初始化方法之前调用，默认提供了 applicationContext 的上下文注入，当某个类实现了 ApplicationContextAware，就提供 applicationContext 上下文的能力，只是我们要实现的是 ApplicationContextAware ，并不是 BeanPostProcessor\n\n    @Override\n    public Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) throws BeansException {\n        Object result = existingBean;\n        for (BeanPostProcessor processor : getBeanPostProcessors()) {\n            Object current = processor.postProcessBeforeInitialization(result, beanName);\n            if (null == current) return result;\n            result = current;\n        }\n        return result;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        if (bean instanceof ApplicationContextAware){\n            ((ApplicationContextAware) bean).setApplicationContext(applicationContext);\n        }\n        return bean;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# Bean 的初始化方法\n\nBean 初始化方法还是比较简单的，主要是通过判断是否实现 InitializingBean 接口，如果实现了，则调用实例化对象实现的 afterPropertiesSet 方法。如果不是以接口实现的，是以 XML 描述的，则是通过反射的方式调用该方法。\n\n    private void invokeInitMethods(String beanName, Object bean, BeanDefinition beanDefinition) throws Exception {\n        // 1. 实现接口 InitializingBean\n        if (bean instanceof InitializingBean) {\n            ((InitializingBean) bean).afterPropertiesSet();\n        }\n\n        // 2. 注解配置 init-method {判断是为了避免二次执行销毁}\n        String initMethodName = beanDefinition.getInitMethodName();\n        if (StrUtil.isNotEmpty(initMethodName)) {\n            Method initMethod = beanDefinition.getBeanClass().getMethod(initMethodName);\n            if (null == initMethod) {\n                throw new BeansException("Could not find an init method named \'" + initMethodName + "\' on bean with name \'" + beanName + "\'");\n            }\n            initMethod.invoke(bean);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n<bean id="userDao" class="cn.bugstack.springframework.test.bean.UserDao" init-method="initDataMethod" destroy-method="destroyDataMethod"/>\n\n\n1\n\n\n\n# 初始化方法之后\n\n    @Override\n    public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) throws BeansException {\n        Object result = existingBean;\n        for (BeanPostProcessor processor : getBeanPostProcessors()) {\n            Object current = processor.postProcessAfterInitialization(result, beanName);\n            if (null == current) return result;\n            result = current;\n        }\n        return result;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 注册销毁事件\n\n销毁事件需要 Bean 实现 DisposableBean 接口并重写 destroy () 方法。如下先是把实现 DisposableBean 或有在 XML 描述过销毁方法的注册到一个容器里。\n\n    protected void registerDisposableBeanIfNecessary(String beanName, Object bean, BeanDefinition beanDefinition) {\n        // 非 Singleton 类型的 Bean 不执行销毁方法\n        if (!beanDefinition.isSingleton()) return;\n        if (bean instanceof DisposableBean || StrUtil.isNotEmpty(beanDefinition.getDestroyMethodName())) {\n            registerDisposableBean(beanName, new DisposableBeanAdapter(bean, beanName, beanDefinition));\n        }\n    }\n\n    public void registerDisposableBean(String beanName, DisposableBean bean) {\n        disposableBeans.put(beanName, bean);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n然后再整个启动过程结束调用 registerShutdownHook 方法添加一个钩子监听。\n\n    @Override\n    public void registerShutdownHook() {\n        // Java 中的一个方法，它用于注册 JVM 关闭时要执行的特定代码块。当 JVM 即将关闭时，这些代码块会被执行，以便进行清理、释放资源等操作。\n        // 这些代码块通常称为“钩子（hook）”，因此该方法也被称为“添加关闭钩子（Add Shutdown Hook）”。\n        Runtime.getRuntime().addShutdownHook(new Thread(this::close));\n    }\n\n    @Override\n    public void close() {\n        // 发布容器关闭事件\n        publishEvent(new ContextClosedEvent(this));\n        // 执行销毁单例bean的销毁方法\n        getBeanFactory().destroySingletons();\n    }\n\n    public void destroySingletons() {\n        Set<String> keySet = this.disposableBeans.keySet();\n        Object[] disposableBeanNames = keySet.toArray();\n\n        for (int i = disposableBeanNames.length - 1; i >= 0; i--) {\n            Object beanName = disposableBeanNames[i];\n            DisposableBean disposableBean = disposableBeans.remove(beanName);\n            try {\n                disposableBean.destroy();\n            } catch (Exception e) {\n                throw new BeansException("Destroy method on bean with name \'" + beanName + "\' threw an exception", e);\n            }\n        }\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        // 1. 实现接口 DisposableBean\n        if (bean instanceof DisposableBean) {\n            ((DisposableBean) bean).destroy();\n        }\n        // 2. 注解配置 destroy-method {判断是为了避免二次执行销毁}\n        if (StrUtil.isNotEmpty(destroyMethodName) && !(bean instanceof DisposableBean && "destroy".equals(this.destroyMethodName))) {\n            Method destroyMethod = bean.getClass().getMethod(destroyMethodName);\n            if (null == destroyMethod) {\n                throw new BeansException("Couldn\'t find a destroy method named \'" + destroyMethodName + "\' on bean with name \'" + beanName + "\'");\n            }\n            destroyMethod.invoke(bean);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# scop 处理单例\n\n    public void registerSingleton(String beanName, Object singletonObject) {\n        // 三级缓存\n        singletonObjects.put(beanName, singletonObject);\n        // 二级缓存\n        earlySingletonObjects.remove(beanName);\n        // 一级缓存\n        singletonFactories.remove(beanName);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n',normalizedContent:'spring 是 java 开发用到最多的一个 web 框架，核心是 ioc（控制反转）和 aop（面向切面），但做为架构，想要对 spring 要进行扩展等，必须要了解 spring 的生命周期、事件、aop、行为感知等。spring 生命周期如下图：\n\n\n\n提示\n\n本文主要了解 spring 生命周期的有哪些，以及他们的核心代码是怎么编写，整个过程是偏 ioc 和 di 的，ioc 将对象的创建和依赖关系的维护从代码中脱离出来，通过配置读取创建对象；di 从注解属性填充过程以及 xml 属性填充过程为具体的体现。\n\n\n# 读取 xml 文件\n\n通过 classpathxmlapplicationcontext 来读取资源文件下的 spring.xml\n\n    @test\n    public void test() {\n        classpathxmlapplicationcontext applicationcontext = new classpathxmlapplicationcontext("classpath:spring.xml");\n        userservice userservice = applicationcontext.getbean("userservice", userservice.class);\n        system.out.println("测试结果：" + userservice.queryuserinfo());\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n根据文件类型使用不同的方式读取到流中\n\n    @override\n    public resource getresource(string location) {\n        assert.notnull(location, "location must not be null");\n        if (location.startswith(classpath_url_prefix)) {\n            return new classpathresource(location.substring(classpath_url_prefix.length()));\n        }\n        else {\n            try {\n                url url = new url(location);\n                return new urlresource(url);\n            } catch (malformedurlexception e) {\n                return new filesystemresource(location);\n            }\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n调用 xml 解析\n\n    @override\n    public void loadbeandefinitions(resource resource) throws beansexception {\n        try {\n            try (inputstream inputstream = resource.getinputstream()) {\n                doloadbeandefinitions(inputstream);\n            }\n        } catch (ioexception | classnotfoundexception | documentexception e) {\n            throw new beansexception("ioexception parsing xml document from " + resource, e);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 封装 beandefinition\n\n解析 xml 的整个过程：\n\n * 解析 dom\n * 解析带有 @component 注解的类，并封装为 beandefinition 注册到 beanfactory\n * 解析不是 component-scan 定义的类\n\n    protected void doloadbeandefinitions(inputstream inputstream) throws classnotfoundexception, documentexception {\n        // 使用 org.dom4j.io 的解析器\n        saxreader reader = new saxreader();\n        document document = reader.read(inputstream);\n        element root = document.getrootelement();\n        // 解析 context:component-scan 标签，扫描包中的类并提取相关信息，用于组装 beandefinition\n        element componentscan = root.element("component-scan");\n        if (null != componentscan) {\n            string scanpath = componentscan.attributevalue("base-package");\n            if (strutil.isempty(scanpath)) {\n                throw new beansexception("the value of base-package attribute can not be empty or null");\n            }\n            // 扫描整个包\n            scanpackage(scanpath);\n        }\n        list<element> beanlist = root.elements("bean");\n        for (element bean : beanlist) {\n            string id = bean.attributevalue("id");\n            string name = bean.attributevalue("name");\n            string classname = bean.attributevalue("class");\n            string initmethod = bean.attributevalue("init-method");\n            string destroymethodname = bean.attributevalue("destroy-method");\n            string beanscope = bean.attributevalue("scope");\n            // 获取 class，方便获取类中的名称\n            class<?> clazz = class.forname(classname);\n            // 优先级 id > name\n            string beanname = strutil.isnotempty(id) ? id : name;\n            if (strutil.isempty(beanname)) {\n                beanname = strutil.lowerfirst(clazz.getsimplename());\n            }\n            // 定义bean\n            beandefinition beandefinition = new beandefinition(clazz);\n            beandefinition.setinitmethodname(initmethod);\n            beandefinition.setdestroymethodname(destroymethodname);\n            if (strutil.isnotempty(beanscope)) {\n                beandefinition.setscope(beanscope);\n            }\n            list<element> propertylist = bean.elements("property");\n            // 读取属性并填充\n            for (element property : propertylist) {\n                // 解析标签：property\n                string attrname = property.attributevalue("name");\n                string attrvalue = property.attributevalue("value");\n                string attrref = property.attributevalue("ref");\n                // 获取属性值：引入对象、值对象\n                object value = strutil.isnotempty(attrref) ? new beanreference(attrref) : attrvalue;\n                // 创建属性信息\n                propertyvalue propertyvalue = new propertyvalue(attrname, value);\n                beandefinition.getpropertyvalues().addpropertyvalue(propertyvalue);\n            }\n            if (getregistry().containsbeandefinition(beanname)) {\n                throw new beansexception("duplicate beanname[" + beanname + "] is not allowed");\n            }\n            // 注册 beandefinition\n            getregistry().registerbeandefinition(beanname, beandefinition);\n        }\n    }\n\n    private void scanpackage(string scanpath) {\n        string[] basepackages = strutil.splittoarray(scanpath, \',\');\n        classpathbeandefinitionscanner scanner = new classpathbeandefinitionscanner(getregistry());\n        scanner.doscan(basepackages);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n\n\n根据提供路径封装为 beandefinition 并注册到 beanfactory\n\n    public void doscan(string... basepackages) {\n        for (string basepackage : basepackages) {\n            set<beandefinition> candidates = findcandidatecomponents(basepackage);\n            for (beandefinition beandefinition : candidates) {\n                // 解析 bean 的作用域 singleton、prototype\n                string beanscope = resolvebeanscope(beandefinition);\n                if (strutil.isnotempty(beanscope)) {\n                    beandefinition.setscope(beanscope);\n                }\n                registry.registerbeandefinition(determinebeanname(beandefinition), beandefinition);\n            }\n        }\n\n        // 注册处理注解的 beanpostprocessor(@autowired、@value)\n        registry.registerbeandefinition("cn.bugstack.springframework.context.annotation.internalautowiredannotationprocessor", new beandefinition(autowiredannotationbeanpostprocessor.class));\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n对提供的包路径扫描有 @component 注解的类\n\n    public set<beandefinition> findcandidatecomponents(string basepackage) {\n        set<beandefinition> candidates = new linkedhashset<>();\n        set<class<?>> classes = classutil.scanpackagebyannotation(basepackage, component.class);\n        for (class<?> clazz : classes) {\n            candidates.add(new beandefinition(clazz));\n        }\n        return candidates;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# beanfactorypostprocessor\n\nbeanfactorypostprocessor 可以修改我们对 beandefinition 定义的所有信息，可以添加属性，修改属性，添加额外的方法等。具体会对所有实现 beanfactorypostprocessor 的类进行获取，并循环调用 postprocessbeanfactory 方法\n\n    private void invokebeanfactorypostprocessors(configurablelistablebeanfactory beanfactory) {\n        map<string, beanfactorypostprocessor> beanfactorypostprocessormap = beanfactory.getbeansoftype(beanfactorypostprocessor.class);\n        for (beanfactorypostprocessor beanfactorypostprocessor : beanfactorypostprocessormap.values()) {\n            beanfactorypostprocessor.postprocessbeanfactory(beanfactory);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n提供一个默认的实现\n\n    @override\n    public void postprocessbeanfactory(configurablelistablebeanfactory beanfactory) throws beansexception {\n        try {\n            // 加载属性文件\n            defaultresourceloader resourceloader = new defaultresourceloader();\n            resource resource = resourceloader.getresource(location);\n\n            // 把属性文件的内容加载到properties里组成键值对\n            properties properties = new properties();\n            properties.load(resource.getinputstream());\n            string[] beandefinitionnames = beanfactory.getbeandefinitionnames();\n            for (string beanname : beandefinitionnames) {\n                beandefinition beandefinition = beanfactory.getbeandefinition(beanname);\n                propertyvalues propertyvalues = beandefinition.getpropertyvalues();\n                for (propertyvalue propertyvalue : propertyvalues.getpropertyvalues()) {\n                    object value = propertyvalue.getvalue();\n                    if (!(value instanceof string)) continue;\n                    value = resolveplaceholder((string) value, properties);\n                    propertyvalues.addpropertyvalue(new propertyvalue(propertyvalue.getname(), value));\n                }\n            }\n            // 向容器中添加字符串解析器，供解析@value注解使用\n            stringvalueresolver valueresolver = new placeholderresolvingstringvalueresolver(properties);\n            // 注册到容器，以便后续使用\n            beanfactory.addembeddedvalueresolver(valueresolver);\n        } catch (ioexception e) {\n            throw new beansexception("could not load properties", e);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 注册实现 beanpostprocessor 的类\n\nbeanpostprocessor 就是提供了 postprocessbeforeinitialization，postprocessafterinitialization 两种方法，提供我们在实例化 bean 的时候，所有实现 beanpostprocessor 的类，注册到 list<beanpostprocessor> beanpostprocessors = new arraylist<beanpostprocessor>(); 中\n\n    private void registerbeanpostprocessors(configurablelistablebeanfactory beanfactory) {\n        map<string, beanpostprocessor> beanpostprocessormap = beanfactory.getbeansoftype(beanpostprocessor.class);\n        for (beanpostprocessor beanpostprocessor : beanpostprocessormap.values()) {\n            beanfactory.addbeanpostprocessor(beanpostprocessor);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 实例化 bean\n\n    protected <t> t dogetbean(final string name, final object[] args) {\n        // 从缓存中获取实例\n        object sharedinstance = getsingleton(name);\n        if (sharedinstance != null) {\n            // 如果实现了 factorybean，则需要调用 factorybean##getobject\n            return (t) getobjectforbeaninstance(sharedinstance, name);\n        }\n        // 从beandefinition列表中获取对象\n        beandefinition beandefinition = getbeandefinition(name);\n        object bean = createbean(name, beandefinition, args);\n        // 如果实现了 factorybean，则需要调用 factorybean##getobject\n        return (t) getobjectforbeaninstance(bean, name);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n实例化 bean 的具体方法\n\n    protected object docreatebean(string beanname, beandefinition beandefinition, object[] args) {\n        object bean = null;\n        try {\n            // 实例化 bean\n            bean = createbeaninstance(beandefinition, beanname, args);\n            // 处理循环依赖，将实例化后的bean对象提前放入缓存中暴露出来\n            if (beandefinition.issingleton()) {\n                object finalbean = bean;\n                addsingletonfactory(beanname, () -> getearlybeanreference(beanname, beandefinition, finalbean));\n            }\n            // 是否需要继续进行后续的属性填充\n            boolean continuewithpropertypopulation = applybeanpostprocessorsafterinstantiation(beanname, bean);\n            if (!continuewithpropertypopulation) {\n                return bean;\n            }\n            // 在设置 bean 属性之前，允许 beanpostprocessor 修改属性值（注解属性填充）\n            applybeanpostprocessorsbeforeapplyingpropertyvalues(beanname, bean, beandefinition);\n            // 给 bean 填充属性（xml属性填充）\n            applypropertyvalues(beanname, bean, beandefinition);\n            // 执行 bean 的初始化方法和 beanpostprocessor 的前置和后置处理方法\n            bean = initializebean(beanname, bean, beandefinition);\n        } catch (exception e) {\n            throw new beansexception("instantiation of bean failed", e);\n        }\n        // 注册实现了 disposablebean 接口的 bean 对象\n        registerdisposablebeanifnecessary(beanname, bean, beandefinition);\n        // 判断 scope_singleton、scope_prototype\n        object exposedobject = bean;\n        if (beandefinition.issingleton()) {\n            // 获取代理对象\n            exposedobject = getsingleton(beanname);\n            registersingleton(beanname, exposedobject);\n        }\n        return exposedobject;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\ncreatebeaninstance 使用了 cglib 来实例化一个 bean, 也可以使用 java 自带的反射\n\n    protected object createbeaninstance(beandefinition beandefinition, string beanname, object[] args) {\n        constructor constructortouse = null;\n        class<?> beanclass = beandefinition.getbeanclass();\n        constructor<?>[] declaredconstructors = beanclass.getdeclaredconstructors();\n        for (constructor ctor : declaredconstructors) {\n            if (null != args && ctor.getparametertypes().length == args.length) {\n                constructortouse = ctor;\n                break;\n            }\n        }\n        return getinstantiationstrategy().instantiate(beandefinition, beanname, constructortouse, args);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\ncglib 实现实例化\n\n@override\n    public object instantiate(beandefinition beandefinition, string beanname, constructor ctor, object[] args) throws beansexception {\n        enhancer enhancer = new enhancer();\n        enhancer.setsuperclass(beandefinition.getbeanclass());\n        enhancer.setcallback(new noop() {\n            @override\n            public int hashcode() {\n                return super.hashcode();\n            }\n        });\n        if (null == ctor) return enhancer.create();\n        return enhancer.create(ctor.getparametertypes(), args);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\njava 反射实现序列化\n\n    @override\n    public object instantiate(beandefinition beandefinition, string beanname, constructor ctor, object[] args) throws beansexception {\n        class clazz = beandefinition.getbeanclass();\n        try {\n            if (null != ctor) {\n                return clazz.getdeclaredconstructor(ctor.getparametertypes()).newinstance(args);\n            } else {\n                return clazz.getdeclaredconstructor().newinstance();\n            }\n        } catch (nosuchmethodexception | instantiationexception | illegalaccessexception | invocationtargetexception e) {\n            throw new beansexception("failed to instantiate [" + clazz.getname() + "]", e);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 注解属性填充\n\n注解属性，会从之前注册的 beanpostprocessor 里匹配 instantiationawarebeanpostprocessor 的对象，其中默认的 autowiredannotationbeanpostprocessor 具体实现了该类\n\n    protected void applybeanpostprocessorsbeforeapplyingpropertyvalues(string beanname, object bean, beandefinition beandefinition) {\n        for (beanpostprocessor beanpostprocessor : getbeanpostprocessors()) {\n            if (beanpostprocessor instanceof instantiationawarebeanpostprocessor) {\n                propertyvalues pvs = ((instantiationawarebeanpostprocessor) beanpostprocessor).postprocesspropertyvalues(beandefinition.getpropertyvalues(), bean, beanname);\n                if (null != pvs) {\n                    for (propertyvalue propertyvalue : pvs.getpropertyvalues()) {\n                        beandefinition.getpropertyvalues().addpropertyvalue(propertyvalue);\n                    }\n                }\n            }\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nautowiredannotationbeanpostprocessor 感知注解属性填充\n\n    @override\n    public propertyvalues postprocesspropertyvalues(propertyvalues pvs, object bean, string beanname) throws beansexception {\n        class<?> clazz = bean.getclass();\n        clazz = classutils.iscglibproxyclass(clazz) ? clazz.getsuperclass() : clazz;\n        // 获得对象所有字段\n        field[] declaredfields = clazz.getdeclaredfields();\n        for (field field : declaredfields) {\n            // @value 注解\n            value valueannotation = field.getannotation(value.class);\n            if (null != valueannotation) {\n                object value = valueannotation.value();\n                // 解析得到值\n                value = beanfactory.resolveembeddedvalue((string) value);\n                // 类型转换\n                class<?> sourcetype = value.getclass();\n                class<?> targettype = (class<?>) typeutil.gettype(field);\n                // 对值进行转换处理\n                conversionservice conversionservice = beanfactory.getconversionservice();\n                if (conversionservice != null) {\n                    if (conversionservice.canconvert(sourcetype, targettype)) {\n                        value = conversionservice.convert(value, targettype);\n                    }\n                }\n                // 把值设置进去\n                beanutil.setfieldvalue(bean, field.getname(), value);\n            }\n        }\n        // 2. 处理注解 @autowired\n        for (field field : declaredfields) {\n            autowired autowiredannotation = field.getannotation(autowired.class);\n            if (null != autowiredannotation) {\n                class<?> fieldtype = field.gettype();\n                string dependentbeanname = null;\n                qualifier qualifierannotation = field.getannotation(qualifier.class);\n                object dependentbean = null;\n                if (null != qualifierannotation) {\n                    dependentbeanname = qualifierannotation.value();\n                    dependentbean = beanfactory.getbean(dependentbeanname, fieldtype);\n                } else {\n                    dependentbean = beanfactory.getbean(fieldtype);\n                }\n                beanutil.setfieldvalue(bean, field.getname(), dependentbean);\n            }\n        }\n        return pvs;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n\n# xml 属性填充\n\nxml 属性填充这里说过会出现循环依赖的问题，在实例化阶段的前后已经对这个处理了，后续会单独讲解\n\n    protected void applypropertyvalues(string beanname, object bean, beandefinition beandefinition) {\n        try {\n            propertyvalues propertyvalues = beandefinition.getpropertyvalues();\n            for (propertyvalue propertyvalue : propertyvalues.getpropertyvalues()) {\n                string name = propertyvalue.getname();\n                object value = propertyvalue.getvalue();\n                if (value instanceof beanreference) {\n                    // a 依赖 b，获取 b 的实例化\n                    beanreference beanreference = (beanreference) value;\n                    value = getbean(beanreference.getbeanname());\n                }\n                // 类型转换\n                else {\n                    class<?> sourcetype = value.getclass();\n                    class<?> targettype = (class<?>) typeutil.getfieldtype(bean.getclass(), name);\n                    conversionservice conversionservice = getconversionservice();\n                    if (conversionservice != null) {\n                        if (conversionservice.canconvert(sourcetype, targettype)) {\n                            value = conversionservice.convert(value, targettype);\n                        }\n                    }\n                }\n                // 反射设置属性填充\n                 beanutil.setfieldvalue(bean, name, value);\n            }\n        } catch (exception e) {\n            throw new beansexception("error setting property values：" + beanname + " message：" + e);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 感知对象\n\n感知对象做为一个扩展接口，只要我们的 bean 实现了这些接口，就可以为我们的 bean 提供额外的能力\n\n    private object initializebean(string beanname, object bean, beandefinition beandefinition) {\n        // invokeawaremethods（感知对象）\n        if (bean instanceof aware) {\n            if (bean instanceof beanfactoryaware) {\n                ((beanfactoryaware) bean).setbeanfactory(this);\n            }\n            if (bean instanceof beanclassloaderaware) {\n                ((beanclassloaderaware) bean).setbeanclassloader(getbeanclassloader());\n            }\n            if (bean instanceof beannameaware) {\n                ((beannameaware) bean).setbeanname(beanname);\n            }\n        }\n        // 1. 执行 beanpostprocessor before 处理\n        object wrappedbean = applybeanpostprocessorsbeforeinitialization(bean, beanname);\n        // 执行 bean 对象的初始化方法\n        try {\n            invokeinitmethods(beanname, wrappedbean, beandefinition);\n        } catch (exception e) {\n            throw new beansexception("invocation of init method of bean[" + beanname + "] failed", e);\n        }\n        // 2. 执行 beanpostprocessor after 处理\n        wrappedbean = applybeanpostprocessorsafterinitialization(wrappedbean, beanname);\n        return wrappedbean;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 初始化方法之前\n\n在 bean 的初始化方法之前调用，默认提供了 applicationcontext 的上下文注入，当某个类实现了 applicationcontextaware，就提供 applicationcontext 上下文的能力，只是我们要实现的是 applicationcontextaware ，并不是 beanpostprocessor\n\n    @override\n    public object applybeanpostprocessorsbeforeinitialization(object existingbean, string beanname) throws beansexception {\n        object result = existingbean;\n        for (beanpostprocessor processor : getbeanpostprocessors()) {\n            object current = processor.postprocessbeforeinitialization(result, beanname);\n            if (null == current) return result;\n            result = current;\n        }\n        return result;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n    @override\n    public object postprocessbeforeinitialization(object bean, string beanname) throws beansexception {\n        if (bean instanceof applicationcontextaware){\n            ((applicationcontextaware) bean).setapplicationcontext(applicationcontext);\n        }\n        return bean;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# bean 的初始化方法\n\nbean 初始化方法还是比较简单的，主要是通过判断是否实现 initializingbean 接口，如果实现了，则调用实例化对象实现的 afterpropertiesset 方法。如果不是以接口实现的，是以 xml 描述的，则是通过反射的方式调用该方法。\n\n    private void invokeinitmethods(string beanname, object bean, beandefinition beandefinition) throws exception {\n        // 1. 实现接口 initializingbean\n        if (bean instanceof initializingbean) {\n            ((initializingbean) bean).afterpropertiesset();\n        }\n\n        // 2. 注解配置 init-method {判断是为了避免二次执行销毁}\n        string initmethodname = beandefinition.getinitmethodname();\n        if (strutil.isnotempty(initmethodname)) {\n            method initmethod = beandefinition.getbeanclass().getmethod(initmethodname);\n            if (null == initmethod) {\n                throw new beansexception("could not find an init method named \'" + initmethodname + "\' on bean with name \'" + beanname + "\'");\n            }\n            initmethod.invoke(bean);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n<bean id="userdao" class="cn.bugstack.springframework.test.bean.userdao" init-method="initdatamethod" destroy-method="destroydatamethod"/>\n\n\n1\n\n\n\n# 初始化方法之后\n\n    @override\n    public object applybeanpostprocessorsafterinitialization(object existingbean, string beanname) throws beansexception {\n        object result = existingbean;\n        for (beanpostprocessor processor : getbeanpostprocessors()) {\n            object current = processor.postprocessafterinitialization(result, beanname);\n            if (null == current) return result;\n            result = current;\n        }\n        return result;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 注册销毁事件\n\n销毁事件需要 bean 实现 disposablebean 接口并重写 destroy () 方法。如下先是把实现 disposablebean 或有在 xml 描述过销毁方法的注册到一个容器里。\n\n    protected void registerdisposablebeanifnecessary(string beanname, object bean, beandefinition beandefinition) {\n        // 非 singleton 类型的 bean 不执行销毁方法\n        if (!beandefinition.issingleton()) return;\n        if (bean instanceof disposablebean || strutil.isnotempty(beandefinition.getdestroymethodname())) {\n            registerdisposablebean(beanname, new disposablebeanadapter(bean, beanname, beandefinition));\n        }\n    }\n\n    public void registerdisposablebean(string beanname, disposablebean bean) {\n        disposablebeans.put(beanname, bean);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n然后再整个启动过程结束调用 registershutdownhook 方法添加一个钩子监听。\n\n    @override\n    public void registershutdownhook() {\n        // java 中的一个方法，它用于注册 jvm 关闭时要执行的特定代码块。当 jvm 即将关闭时，这些代码块会被执行，以便进行清理、释放资源等操作。\n        // 这些代码块通常称为“钩子（hook）”，因此该方法也被称为“添加关闭钩子（add shutdown hook）”。\n        runtime.getruntime().addshutdownhook(new thread(this::close));\n    }\n\n    @override\n    public void close() {\n        // 发布容器关闭事件\n        publishevent(new contextclosedevent(this));\n        // 执行销毁单例bean的销毁方法\n        getbeanfactory().destroysingletons();\n    }\n\n    public void destroysingletons() {\n        set<string> keyset = this.disposablebeans.keyset();\n        object[] disposablebeannames = keyset.toarray();\n\n        for (int i = disposablebeannames.length - 1; i >= 0; i--) {\n            object beanname = disposablebeannames[i];\n            disposablebean disposablebean = disposablebeans.remove(beanname);\n            try {\n                disposablebean.destroy();\n            } catch (exception e) {\n                throw new beansexception("destroy method on bean with name \'" + beanname + "\' threw an exception", e);\n            }\n        }\n    }\n\n    @override\n    public void destroy() throws exception {\n        // 1. 实现接口 disposablebean\n        if (bean instanceof disposablebean) {\n            ((disposablebean) bean).destroy();\n        }\n        // 2. 注解配置 destroy-method {判断是为了避免二次执行销毁}\n        if (strutil.isnotempty(destroymethodname) && !(bean instanceof disposablebean && "destroy".equals(this.destroymethodname))) {\n            method destroymethod = bean.getclass().getmethod(destroymethodname);\n            if (null == destroymethod) {\n                throw new beansexception("couldn\'t find a destroy method named \'" + destroymethodname + "\' on bean with name \'" + beanname + "\'");\n            }\n            destroymethod.invoke(bean);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# scop 处理单例\n\n    public void registersingleton(string beanname, object singletonobject) {\n        // 三级缓存\n        singletonobjects.put(beanname, singletonobject);\n        // 二级缓存\n        earlysingletonobjects.remove(beanname);\n        // 一级缓存\n        singletonfactories.remove(beanname);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n',charsets:{cjk:!0}},{title:"核心功能拆解 AOP",frontmatter:{title:"核心功能拆解 AOP",date:"2023-06-25T09:22:36.000Z",permalink:"/spring/201/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/20.Spring/201.%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E6%8B%86%E8%A7%A3%20AOP.html",relativePath:"00.java/20.Spring/201.核心功能拆解 AOP.md",key:"v-b043e1b6",path:"/spring/201/",headers:[{level:2,title:"AOP",slug:"aop",normalizedTitle:"aop",charIndex:2},{level:3,title:"封装",slug:"封装",normalizedTitle:"封装",charIndex:2882},{level:3,title:"把封装的融入到 Spring 中",slug:"把封装的融入到-spring-中",normalizedTitle:"把封装的融入到 spring 中",charIndex:5234}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"AOP 封装 把封装的融入到 Spring 中",content:'# AOP\n\nAOP 的诞生可以追溯到上世纪 90 年代初期，它最早由 Gregor Kiczales 等人提出，并在 1997 年发表了经典的论文 Aspect-Oriented Programming。后来，AspectJ 成为了 Java 生态中使用最广泛的 AOP 框架之一。\n\nAOP 的目的是为了解决在 OOP（面向对象编程）中难以处理的横切关注点问题，即将系统业务逻辑代码与其他非业务功能（如日志记录、性能统计、安全控制等）分离开来。AOP 通过把这些非业务功能独立出来，在需要时动态地植入到系统中，从而实现对业务逻辑的无侵入式增强。\n\nAOP 的核心在于其能够将业务逻辑与非业务功能分离开来，从而降低了代码的耦合度，并且支持在运行时动态地植入和移除切面。这样一来，就可以实现更加灵活、可维护和可扩展的系统。\n\nAOP 的具体表现包括切面（Aspect）、连接点（Join Point）、通知（Advice）、切点（Pointcut）和引入（Introduction）等概念。其中，切面是指横跨多个对象的通用功能，连接点是程序执行过程中能够插入切面的点，通知则是定义了切面在连接点处所执行的操作，切点则是一个谓词表达式，用于匹配连接点，引入则是为某个对象添加新的接口实现。具体如下代码：\n\n    public void test_proxy_method() {\n        // 目标对象(可以替换成任何的目标对象)\n        Object targetObj = new UserService();\n        // AOP 代理\n        IUserService proxy = (IUserService) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), targetObj.getClass().getInterfaces(), new InvocationHandler() {\n            // 方法匹配器\n            MethodMatcher methodMatcher = new AspectJExpressionPointcut("execution(* cn.bugstack.springframework.test.bean.IUserService.*(..))");\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                if (methodMatcher.matches(method, targetObj.getClass())) {\n                    // 方法拦截器\n                    MethodInterceptor methodInterceptor = invocation -> {\n                        long start = System.currentTimeMillis();\n                        try {\n                            return invocation.proceed();\n                        } finally {\n                            System.out.println("监控 - Begin By AOP");\n                            System.out.println("方法名称：" + invocation.getMethod().getName());\n                            System.out.println("方法耗时：" + (System.currentTimeMillis() - start) + "ms");\n                            System.out.println("监控 - End\\r\\n");\n                        }\n                    };\n                    // 反射调用\n                    return methodInterceptor.invoke(new ReflectiveMethodInvocation(targetObj, method, args));\n                }\n                return method.invoke(targetObj, args);\n            }\n        });\n        String result = proxy.queryUserInfo();\n        System.out.println("测试结果：" + result);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n这段代码使用了 JDK 动态代理实现 AOP 的功能，没有使用 Spring 提供的方法、类和注解等。\n\n * 连接点：连接点是在目标对象上匹配的特定点，这里的连接点是 IUserService 接口中的所有方法，由于使用了 targetObj.getClass ().getInterfaces () 获取目标对象所实现的接口，因此只拦截了 IUserService 接口中的方法。\n * 切面：切面是一个模块化的横切关注点，在这里我们可以视为没有显式定义的切面。而是直接在 InvocationHandler.invoke () 中实现了拦截和增强逻辑，包括方法匹配器、方法拦截器和反射调用等。\n * 切点：切点是一种谓词表达式，用于匹配连接点。这里使用了 AspectJ 表达式 "execution (* cn.bugstack.springframework.test.bean.IUserService.*(..))"，它匹配了 IUserService 接口中的所有方法。\n * 通知：通知类型包括前置通知、后置通知、环绕通知、抛出通知和最终通知。在这里使用了环绕通知，即在方法执行之前和之后添加了监控逻辑。\n * 引入：引介通常是一个特殊的通知类型，它允许在运行时为类动态地添加新接口实现。这里没有使用引介。\n\n\n# 封装\n\n在 Spring 中，核心逻辑是离不开上面的代理例子的，只是相对应做了些封装，我们先用类图来简单说明下封装关系：\n\n\n\n用测试例子来说明每步的核心\n\n    /**\n     * 切点表达式，来验证切点\n     * @throws NoSuchMethodException\n     */\n    @Test\n    public void test_aop() throws NoSuchMethodException {\n        AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut("execution(* cn.bugstack.springframework.test.bean.UserService.*(..))");\n        Class<UserService> clazz = UserService.class;\n        Method method = clazz.getDeclaredMethod("queryUserInfo");\n        System.out.println("切点是否包含该类：" + pointcut.matches(clazz));\n        System.out.println("切点是否包含该类该方法：" + pointcut.matches(method, clazz));\n    }\n\n    /**\n     * 切面 和 动态代理\n     */\n    @Test\n    public void test_dynamic() {\n        // 目标对象\n        IUserService userService = new UserService();\n        // 组装代理信息，切面\n        AdvisedSupport advisedSupport = new AdvisedSupport();\n        // 设置代理目标对象\n        advisedSupport.setTargetSource(new TargetSource(userService));\n        // 设置拦截器\n        advisedSupport.setMethodInterceptor(new UserServiceInterceptor());\n        // 匹配代理对象\n        advisedSupport.setMethodMatcher(new AspectJExpressionPointcut("execution(* cn.bugstack.springframework.test.bean.IUserService.*(..))"));\n        // 代理对象(JdkDynamicAopProxy)\n        IUserService proxy_jdk = (IUserService) new JdkDynamicAopProxy(advisedSupport).getProxy();\n        // 测试调用\n        System.out.println("测试结果：" + proxy_jdk.queryUserInfo());\n        // 代理对象(Cglib2AopProxy)\n        IUserService proxy_cglib = (IUserService) new Cglib2AopProxy(advisedSupport).getProxy();\n        // 测试调用\n        System.out.println("测试结果：" + proxy_cglib.register("花花"));\n    }\n\npublic class UserServiceInterceptor implements MethodInterceptor {\n    @Override\n    public Object invoke(MethodInvocation invocation) throws Throwable {\n        long start = System.currentTimeMillis();\n        try {\n            return invocation.proceed();\n        } finally {\n            System.out.println("监控 - Begin By AOP");\n            System.out.println("方法名称：" + invocation.getMethod());\n            System.out.println("方法耗时：" + (System.currentTimeMillis() - start) + "ms");\n            System.out.println("监控 - End\\r\\n");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n\n# 把封装的融入到 Spring 中\n\n右侧部分就是描述了整个融合到 Spring 中的类，会在 Bean 创建的过程中 初始化方法之后 这个生命周期内先找到是否提供了 DefaultAdvisorAutoProxyCreator 类的支持，因为他描述了具体代理类的过程。\n\n> 为什么会在初始化方法之后才进行代理，是因为代理类也需要的属性也需要被填充，所以等填充完毕后在代理\n\n\n\n核心方法，描述了整个类被代理的过程\n\n    protected Object wrapIfNecessary(Object bean, String beanName) {\n        // 判断Bean是否是Advice，Pointcut，Advisor的子类或者两类相同可以相互转（类层面），用户定义的类都是 false\n        if (isInfrastructureClass(bean.getClass())) return bean;\n        // 得到注册的AspectJExpressionPointcutAdvisor\n        Collection<AspectJExpressionPointcutAdvisor> advisors = beanFactory.getBeansOfType(AspectJExpressionPointcutAdvisor.class).values();\n        for (AspectJExpressionPointcutAdvisor advisor : advisors) {\n            ClassFilter classFilter = advisor.getPointcut().getClassFilter();\n            // 用表达式 过滤匹配类\n            if (!classFilter.matches(bean.getClass())) continue;\n            // 封装\n            AdvisedSupport advisedSupport = new AdvisedSupport();\n            TargetSource targetSource = new TargetSource(bean);\n            advisedSupport.setTargetSource(targetSource);\n            advisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());\n            advisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());\n            advisedSupport.setProxyTargetClass(true);\n            // 返回代理对象\n            return new ProxyFactory(advisedSupport).getProxy();\n        }\n        return bean;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n<beans>\n    \x3c!-- 目标类 --\x3e\n    <bean id="userService" class="cn.bugstack.springframework.test.bean.UserService"/>\n    \x3c!-- 代理类 --\x3e\n    <bean id="beforeAdvice" class="cn.bugstack.springframework.test.bean.UserServiceBeforeAdvice"/>\n    \x3c!-- 组件类，至关重要 --\x3e\n    <bean class="cn.bugstack.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>\n    \x3c!-- \n        这里是  advisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice()); 设置拦截器，\n        可以是前置拦截，后置拦截，或者环绕拦截\n     --\x3e\n    <bean id="methodInterceptor" class="cn.bugstack.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor">\n        <property name="advice" ref="beforeAdvice"/>\n    </bean>\n    \x3c!-- 切面表达式 --\x3e\n    <bean id="pointcutAdvisor" class="cn.bugstack.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor">\n        <property name="expression" value="execution(* cn.bugstack.springframework.test.bean.IUserService.*(..))"/>\n        <property name="advice" ref="methodInterceptor"/>\n    </bean>\n</beans>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',normalizedContent:'# aop\n\naop 的诞生可以追溯到上世纪 90 年代初期，它最早由 gregor kiczales 等人提出，并在 1997 年发表了经典的论文 aspect-oriented programming。后来，aspectj 成为了 java 生态中使用最广泛的 aop 框架之一。\n\naop 的目的是为了解决在 oop（面向对象编程）中难以处理的横切关注点问题，即将系统业务逻辑代码与其他非业务功能（如日志记录、性能统计、安全控制等）分离开来。aop 通过把这些非业务功能独立出来，在需要时动态地植入到系统中，从而实现对业务逻辑的无侵入式增强。\n\naop 的核心在于其能够将业务逻辑与非业务功能分离开来，从而降低了代码的耦合度，并且支持在运行时动态地植入和移除切面。这样一来，就可以实现更加灵活、可维护和可扩展的系统。\n\naop 的具体表现包括切面（aspect）、连接点（join point）、通知（advice）、切点（pointcut）和引入（introduction）等概念。其中，切面是指横跨多个对象的通用功能，连接点是程序执行过程中能够插入切面的点，通知则是定义了切面在连接点处所执行的操作，切点则是一个谓词表达式，用于匹配连接点，引入则是为某个对象添加新的接口实现。具体如下代码：\n\n    public void test_proxy_method() {\n        // 目标对象(可以替换成任何的目标对象)\n        object targetobj = new userservice();\n        // aop 代理\n        iuserservice proxy = (iuserservice) proxy.newproxyinstance(thread.currentthread().getcontextclassloader(), targetobj.getclass().getinterfaces(), new invocationhandler() {\n            // 方法匹配器\n            methodmatcher methodmatcher = new aspectjexpressionpointcut("execution(* cn.bugstack.springframework.test.bean.iuserservice.*(..))");\n            @override\n            public object invoke(object proxy, method method, object[] args) throws throwable {\n                if (methodmatcher.matches(method, targetobj.getclass())) {\n                    // 方法拦截器\n                    methodinterceptor methodinterceptor = invocation -> {\n                        long start = system.currenttimemillis();\n                        try {\n                            return invocation.proceed();\n                        } finally {\n                            system.out.println("监控 - begin by aop");\n                            system.out.println("方法名称：" + invocation.getmethod().getname());\n                            system.out.println("方法耗时：" + (system.currenttimemillis() - start) + "ms");\n                            system.out.println("监控 - end\\r\\n");\n                        }\n                    };\n                    // 反射调用\n                    return methodinterceptor.invoke(new reflectivemethodinvocation(targetobj, method, args));\n                }\n                return method.invoke(targetobj, args);\n            }\n        });\n        string result = proxy.queryuserinfo();\n        system.out.println("测试结果：" + result);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n这段代码使用了 jdk 动态代理实现 aop 的功能，没有使用 spring 提供的方法、类和注解等。\n\n * 连接点：连接点是在目标对象上匹配的特定点，这里的连接点是 iuserservice 接口中的所有方法，由于使用了 targetobj.getclass ().getinterfaces () 获取目标对象所实现的接口，因此只拦截了 iuserservice 接口中的方法。\n * 切面：切面是一个模块化的横切关注点，在这里我们可以视为没有显式定义的切面。而是直接在 invocationhandler.invoke () 中实现了拦截和增强逻辑，包括方法匹配器、方法拦截器和反射调用等。\n * 切点：切点是一种谓词表达式，用于匹配连接点。这里使用了 aspectj 表达式 "execution (* cn.bugstack.springframework.test.bean.iuserservice.*(..))"，它匹配了 iuserservice 接口中的所有方法。\n * 通知：通知类型包括前置通知、后置通知、环绕通知、抛出通知和最终通知。在这里使用了环绕通知，即在方法执行之前和之后添加了监控逻辑。\n * 引入：引介通常是一个特殊的通知类型，它允许在运行时为类动态地添加新接口实现。这里没有使用引介。\n\n\n# 封装\n\n在 spring 中，核心逻辑是离不开上面的代理例子的，只是相对应做了些封装，我们先用类图来简单说明下封装关系：\n\n\n\n用测试例子来说明每步的核心\n\n    /**\n     * 切点表达式，来验证切点\n     * @throws nosuchmethodexception\n     */\n    @test\n    public void test_aop() throws nosuchmethodexception {\n        aspectjexpressionpointcut pointcut = new aspectjexpressionpointcut("execution(* cn.bugstack.springframework.test.bean.userservice.*(..))");\n        class<userservice> clazz = userservice.class;\n        method method = clazz.getdeclaredmethod("queryuserinfo");\n        system.out.println("切点是否包含该类：" + pointcut.matches(clazz));\n        system.out.println("切点是否包含该类该方法：" + pointcut.matches(method, clazz));\n    }\n\n    /**\n     * 切面 和 动态代理\n     */\n    @test\n    public void test_dynamic() {\n        // 目标对象\n        iuserservice userservice = new userservice();\n        // 组装代理信息，切面\n        advisedsupport advisedsupport = new advisedsupport();\n        // 设置代理目标对象\n        advisedsupport.settargetsource(new targetsource(userservice));\n        // 设置拦截器\n        advisedsupport.setmethodinterceptor(new userserviceinterceptor());\n        // 匹配代理对象\n        advisedsupport.setmethodmatcher(new aspectjexpressionpointcut("execution(* cn.bugstack.springframework.test.bean.iuserservice.*(..))"));\n        // 代理对象(jdkdynamicaopproxy)\n        iuserservice proxy_jdk = (iuserservice) new jdkdynamicaopproxy(advisedsupport).getproxy();\n        // 测试调用\n        system.out.println("测试结果：" + proxy_jdk.queryuserinfo());\n        // 代理对象(cglib2aopproxy)\n        iuserservice proxy_cglib = (iuserservice) new cglib2aopproxy(advisedsupport).getproxy();\n        // 测试调用\n        system.out.println("测试结果：" + proxy_cglib.register("花花"));\n    }\n\npublic class userserviceinterceptor implements methodinterceptor {\n    @override\n    public object invoke(methodinvocation invocation) throws throwable {\n        long start = system.currenttimemillis();\n        try {\n            return invocation.proceed();\n        } finally {\n            system.out.println("监控 - begin by aop");\n            system.out.println("方法名称：" + invocation.getmethod());\n            system.out.println("方法耗时：" + (system.currenttimemillis() - start) + "ms");\n            system.out.println("监控 - end\\r\\n");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n\n# 把封装的融入到 spring 中\n\n右侧部分就是描述了整个融合到 spring 中的类，会在 bean 创建的过程中 初始化方法之后 这个生命周期内先找到是否提供了 defaultadvisorautoproxycreator 类的支持，因为他描述了具体代理类的过程。\n\n> 为什么会在初始化方法之后才进行代理，是因为代理类也需要的属性也需要被填充，所以等填充完毕后在代理\n\n\n\n核心方法，描述了整个类被代理的过程\n\n    protected object wrapifnecessary(object bean, string beanname) {\n        // 判断bean是否是advice，pointcut，advisor的子类或者两类相同可以相互转（类层面），用户定义的类都是 false\n        if (isinfrastructureclass(bean.getclass())) return bean;\n        // 得到注册的aspectjexpressionpointcutadvisor\n        collection<aspectjexpressionpointcutadvisor> advisors = beanfactory.getbeansoftype(aspectjexpressionpointcutadvisor.class).values();\n        for (aspectjexpressionpointcutadvisor advisor : advisors) {\n            classfilter classfilter = advisor.getpointcut().getclassfilter();\n            // 用表达式 过滤匹配类\n            if (!classfilter.matches(bean.getclass())) continue;\n            // 封装\n            advisedsupport advisedsupport = new advisedsupport();\n            targetsource targetsource = new targetsource(bean);\n            advisedsupport.settargetsource(targetsource);\n            advisedsupport.setmethodinterceptor((methodinterceptor) advisor.getadvice());\n            advisedsupport.setmethodmatcher(advisor.getpointcut().getmethodmatcher());\n            advisedsupport.setproxytargetclass(true);\n            // 返回代理对象\n            return new proxyfactory(advisedsupport).getproxy();\n        }\n        return bean;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n<beans>\n    \x3c!-- 目标类 --\x3e\n    <bean id="userservice" class="cn.bugstack.springframework.test.bean.userservice"/>\n    \x3c!-- 代理类 --\x3e\n    <bean id="beforeadvice" class="cn.bugstack.springframework.test.bean.userservicebeforeadvice"/>\n    \x3c!-- 组件类，至关重要 --\x3e\n    <bean class="cn.bugstack.springframework.aop.framework.autoproxy.defaultadvisorautoproxycreator"/>\n    \x3c!-- \n        这里是  advisedsupport.setmethodinterceptor((methodinterceptor) advisor.getadvice()); 设置拦截器，\n        可以是前置拦截，后置拦截，或者环绕拦截\n     --\x3e\n    <bean id="methodinterceptor" class="cn.bugstack.springframework.aop.framework.adapter.methodbeforeadviceinterceptor">\n        <property name="advice" ref="beforeadvice"/>\n    </bean>\n    \x3c!-- 切面表达式 --\x3e\n    <bean id="pointcutadvisor" class="cn.bugstack.springframework.aop.aspectj.aspectjexpressionpointcutadvisor">\n        <property name="expression" value="execution(* cn.bugstack.springframework.test.bean.iuserservice.*(..))"/>\n        <property name="advice" ref="methodinterceptor"/>\n    </bean>\n</beans>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',charsets:{cjk:!0}},{title:"核心功能拆解 事件通知",frontmatter:{title:"核心功能拆解 事件通知",date:"2023-06-25T09:22:36.000Z",permalink:"/spring/202/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/20.Spring/202.%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E6%8B%86%E8%A7%A3%20%E4%BA%8B%E4%BB%B6%E9%80%9A%E7%9F%A5.html",relativePath:"00.java/20.Spring/202.核心功能拆解 事件通知.md",key:"v-6b3c84a5",path:"/spring/202/",lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:null,content:'在 Spring 框架中，Event 代表着一个应用程序中的事件。这些事件可以是任何类型的状态变化，如用户操作、数据更新和系统错误等等。我们可以使用 Event 来实现应用程序内部的通信和协作。通过观察者模式，我们可以让不同的组件在特定的事件发生时做出响应，从而实现松耦合的设计。\n\nSpring 提供了一个简单而强大的机制来处理 Event，即 ApplicationEvent 和 ApplicationListener 接口。ApplicationEvent 是一个基本的事件类，它可以被继承以实现各种类型的事件。ApplicationListener 接口则定义了一个监听器，在某个事件发生时触发回调方法。以下提供了基本的类图关系，其中 AbstractApplicationContext 是执行 Spring 所有核心方法的集成类：\n\n\n\nSpring 提供了许多不同类型的 Event，每种 Event 都有其特定的作用和用途。下面是 Spring 生命周期中提供的 Event 及其作用：\n\n * ContextRefreshedEvent：表示 ApplicationContext 已经初始化并且准备好接受请求。通常情况下，我们可以利用该事件来进行一些初始化操作。\n * ContextStartedEvent：表示 ApplicationContext 正在启动。当应用程序中有需要在启动时执行的操作时，可以使用该事件进行处理。\n * ContextStoppedEvent：表示 ApplicationContext 已停止。当需要在应用程序停止前执行某些操作时，可以使用该事件。\n * ContextClosedEvent：表示 ApplicationContext 已经关闭。与 ContextStoppedEvent 不同，ContextClosedEvent 是在 ApplicationContext 关闭之后发送的，它允许我们对资源进行完全释放。\n * RequestHandledEvent：表示一个 HTTP 请求已经被处理完毕。该事件通常用于记录或统计请求处理的性能数据。\n\n在 Spring 中，我们可以通过实现 ApplicationListener 接口或使用 @EventListener 注解来监听这些事件。以监听 ContextRefreshedEvent 为例，我们可以编写如下代码：\n\n@Component\npublic class MyListener implements ApplicationListener<ContextRefreshedEvent> {\n    @Override\n    public void onApplicationEvent(ContextRefreshedEvent event) {\n        // 在此处编写需要执行的逻辑\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n除了实现 ApplicationListener 接口外，我们还可以使用 @EventListener 注解来监听事件。例如，我们可以在 Spring 组件中添加如下方法：\n\n@EventListener\npublic void handleContextRefreshedEvent(ContextRefreshedEvent event) {\n    // 在此处编写需要执行的逻辑\n}\n\n\n1\n2\n3\n4\n\n\n要使用 Spring 提供的类自定义一个事件发布和监听，首先，我们需要定义一个自定义事件。可以创建一个继承自 ApplicationEvent 的类，并在其中添加自定义字段和方法\n\npublic class MyCustomEvent extends ApplicationEvent {\n    private String message;\n    public MyCustomEvent(Object source, String message) {\n        super(source);\n        this.message = message;\n    }\n    public String getMessage() {\n        return message;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n发布事件 一旦定义了自定义事件，我们就可以使用 ApplicationContext 的 publishEvent 方法来发布事件\n\n@Autowired\nprivate ApplicationContext applicationContext;\n\npublic void doSomethingAndPublishEvent() {\n    // 在此处执行业务逻辑\n    MyCustomEvent event = new MyCustomEvent(this, "Hello, world!");\n    applicationContext.publishEvent(event);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n监听事件 最后，我们需要创建一个事件监听器，以便处理自定义事件。可以创建一个实现 ApplicationListener 接口的类，并在其 onApplicationEvent 方法中添加处理逻辑\n\n@Component\npublic class MyCustomEventListener implements ApplicationListener<MyCustomEvent> {\n    @Override\n    public void onApplicationEvent(MyCustomEvent event) {\n        System.out.println("Received custom event - " + event.getMessage());\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这样，当 MyCustomEvent 事件被发布时，MyCustomEventListener 就会收到该事件并调用其 onApplicationEvent 方法进行处理。',normalizedContent:'在 spring 框架中，event 代表着一个应用程序中的事件。这些事件可以是任何类型的状态变化，如用户操作、数据更新和系统错误等等。我们可以使用 event 来实现应用程序内部的通信和协作。通过观察者模式，我们可以让不同的组件在特定的事件发生时做出响应，从而实现松耦合的设计。\n\nspring 提供了一个简单而强大的机制来处理 event，即 applicationevent 和 applicationlistener 接口。applicationevent 是一个基本的事件类，它可以被继承以实现各种类型的事件。applicationlistener 接口则定义了一个监听器，在某个事件发生时触发回调方法。以下提供了基本的类图关系，其中 abstractapplicationcontext 是执行 spring 所有核心方法的集成类：\n\n\n\nspring 提供了许多不同类型的 event，每种 event 都有其特定的作用和用途。下面是 spring 生命周期中提供的 event 及其作用：\n\n * contextrefreshedevent：表示 applicationcontext 已经初始化并且准备好接受请求。通常情况下，我们可以利用该事件来进行一些初始化操作。\n * contextstartedevent：表示 applicationcontext 正在启动。当应用程序中有需要在启动时执行的操作时，可以使用该事件进行处理。\n * contextstoppedevent：表示 applicationcontext 已停止。当需要在应用程序停止前执行某些操作时，可以使用该事件。\n * contextclosedevent：表示 applicationcontext 已经关闭。与 contextstoppedevent 不同，contextclosedevent 是在 applicationcontext 关闭之后发送的，它允许我们对资源进行完全释放。\n * requesthandledevent：表示一个 http 请求已经被处理完毕。该事件通常用于记录或统计请求处理的性能数据。\n\n在 spring 中，我们可以通过实现 applicationlistener 接口或使用 @eventlistener 注解来监听这些事件。以监听 contextrefreshedevent 为例，我们可以编写如下代码：\n\n@component\npublic class mylistener implements applicationlistener<contextrefreshedevent> {\n    @override\n    public void onapplicationevent(contextrefreshedevent event) {\n        // 在此处编写需要执行的逻辑\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n除了实现 applicationlistener 接口外，我们还可以使用 @eventlistener 注解来监听事件。例如，我们可以在 spring 组件中添加如下方法：\n\n@eventlistener\npublic void handlecontextrefreshedevent(contextrefreshedevent event) {\n    // 在此处编写需要执行的逻辑\n}\n\n\n1\n2\n3\n4\n\n\n要使用 spring 提供的类自定义一个事件发布和监听，首先，我们需要定义一个自定义事件。可以创建一个继承自 applicationevent 的类，并在其中添加自定义字段和方法\n\npublic class mycustomevent extends applicationevent {\n    private string message;\n    public mycustomevent(object source, string message) {\n        super(source);\n        this.message = message;\n    }\n    public string getmessage() {\n        return message;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n发布事件 一旦定义了自定义事件，我们就可以使用 applicationcontext 的 publishevent 方法来发布事件\n\n@autowired\nprivate applicationcontext applicationcontext;\n\npublic void dosomethingandpublishevent() {\n    // 在此处执行业务逻辑\n    mycustomevent event = new mycustomevent(this, "hello, world!");\n    applicationcontext.publishevent(event);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n监听事件 最后，我们需要创建一个事件监听器，以便处理自定义事件。可以创建一个实现 applicationlistener 接口的类，并在其 onapplicationevent 方法中添加处理逻辑\n\n@component\npublic class mycustomeventlistener implements applicationlistener<mycustomevent> {\n    @override\n    public void onapplicationevent(mycustomevent event) {\n        system.out.println("received custom event - " + event.getmessage());\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这样，当 mycustomevent 事件被发布时，mycustomeventlistener 就会收到该事件并调用其 onapplicationevent 方法进行处理。',charsets:{cjk:!0}},{title:"核心功能拆解 三级缓存",frontmatter:{title:"核心功能拆解 三级缓存",date:"2023-06-25T09:22:36.000Z",permalink:"/spring/203/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/20.Spring/203.%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E6%8B%86%E8%A7%A3%20%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98.html",relativePath:"00.java/20.Spring/203.核心功能拆解 三级缓存.md",key:"v-5a7cdd80",path:"/spring/203/",headers:[{level:2,title:"代码介绍",slug:"代码介绍",normalizedTitle:"代码介绍",charIndex:679},{level:2,title:"流程介绍",slug:"流程介绍",normalizedTitle:"流程介绍",charIndex:7320},{level:2,title:"不同的循环依赖问题",slug:"不同的循环依赖问题",normalizedTitle:"不同的循环依赖问题",charIndex:10231},{level:3,title:"set 循环依赖",slug:"set-循环依赖",normalizedTitle:"set 循环依赖",charIndex:10245},{level:3,title:"构造器 循环依赖",slug:"构造器-循环依赖",normalizedTitle:"构造器 循环依赖",charIndex:11876},{level:3,title:"@DependsOn",slug:"dependson",normalizedTitle:"@dependson",charIndex:14362}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"代码介绍 流程介绍 不同的循环依赖问题 set 循环依赖 构造器 循环依赖 @DependsOn",content:"Spring 三级缓存是 Spring 框架中用于管理 Bean 对象的缓存机制。它由三个不同的缓存区域组成，分别是 singletonObjects、earlySingletonObjects 和 singletonFactories。\n\n * singletonObjects（一级缓存，成品对象）：单例对象缓存区域存储已经完全初始化后的单例对象。当第一次使用 getBean () 方法获取 bean 时，Spring 会尝试从这个缓存区获取对象，如果能够找到，则直接返回该对象实例。\n * earlySingletonObjects（二级缓存，代理对象，特殊的成品对象）：如果一个单例对象需要引用另一个单例对象，但后者尚未被完全初始化，那么容器将创建一个代理对象（Proxy Object），并将其放到 earlySingletonObjects 中。这个代理对象会暴露与实际对象相同的接口，并且能够对其进行一些基本操作，但是它还没有被完全初始化。\n * singletonFactories（三级缓存，半成品对象也是工厂对象）：单例工厂缓存区域存储创建 bean 实例的 ObjectFactory。在 Bean 依赖关系的创建过程中，如果 A 依赖 B，B 又依赖 A，那么在创建 A 和 B 的过程中就会出现循环依赖的问题。Spring 就是通过提前暴露一个未完成初始化的 Bean 来解决这个问题的。\n\n提示\n\n对于 spring 设计没有完全理解的同学可能很难明白以上的话，还是需要用代码加一说明，以下文章会议代码的方式全程讲清楚\n\n\n# 代码介绍\n\n首先 Spring 在初始化的时候会先把所有 Bean 加载到 Beandefinition 的缓存中，后续所有对 Bean 的创建都是从 Beandefinition 中获取详细可以看 Spring 源码阅读（一） ，然后再进行 Bean 生命周期的过程，创建好 Bean 的实例放入到 singletonObjects 缓存中，但是代码的第一步都是从获取开始，只有获取不到我才创建\n\n    public Object getBean(String name) throws BeansException {\n        return doGetBean(name, null);\n    }\n\n    public Object getBean(String name, Object... args) throws BeansException {\n        return doGetBean(name, args);\n    }\n\n    public <T> T getBean(String name, Class<T> requiredType) throws BeansException {\n        return (T) getBean(name);\n    }\n\n    protected <T> T doGetBean(final String name, final Object[] args) {\n        // 从缓存中获取实例\n        Object sharedInstance = getSingleton(name);\n        if (sharedInstance != null) {\n            // 如果实现了 FactoryBean，则需要调用 FactoryBean#getObject\n            return (T) getObjectForBeanInstance(sharedInstance, name);\n        }\n        // 从BeanDefinition列表中获取对象\n        BeanDefinition beanDefinition = getBeanDefinition(name);\n        // Bean实例的创建过程\n        Object bean = doCreateBean(name, beanDefinition, args);\n        // 如果实现了 FactoryBean，则需要调用 FactoryBean#getObject\n        return (T) getObjectForBeanInstance(bean, name);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n可以看到 getSingleton 方法就是获取单例，一旦有则直接返回，但第一次肯定是没有的，详细看下他的获取方式\n\n    public Object getSingleton(String beanName) {\n        // 从一级缓存中获取\n        Object singletonObject = singletonObjects.get(beanName);\n        if (null == singletonObject) {\n            singletonObject = earlySingletonObjects.get(beanName);\n            // 判断二级缓存中是否有对象，这个对象就是代理对象，因为只有代理对象才会放到三级缓存中\n            if (null == singletonObject) {\n                ObjectFactory<?> singletonFactory = singletonFactories.get(beanName);\n                if (singletonFactory != null) {\n                    singletonObject = singletonFactory.getObject();\n                    // 把三级缓存中的代理对象中的真实对象获取出来，放入二级缓存中\n                    earlySingletonObjects.put(beanName, singletonObject);\n                    singletonFactories.remove(beanName);\n                }\n            }\n        }\n        return singletonObject;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n没有获取到实例则从 beanDefinition 中获取 Bean 的定义信息调用 doCreateBean 创建 Bean 的实例\n\n    protected Object doCreateBean(String beanName, BeanDefinition beanDefinition, Object[] args) {\n        Object bean = null;\n        try {\n            // 实例化 Bean\n            bean = createBeanInstance(beanDefinition, beanName, args);\n            // 处理循环依赖，将实例化后的Bean对象提前放入缓存中暴露出来\n            if (beanDefinition.isSingleton()) {\n                Object finalBean = bean;\n                addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, beanDefinition, finalBean));\n            }\n            // 是否需要继续进行后续的属性填充\n            boolean continueWithPropertyPopulation = applyBeanPostProcessorsAfterInstantiation(beanName, bean);\n            if (!continueWithPropertyPopulation) {\n                return bean;\n            }\n            // 在设置 Bean 属性之前，允许 BeanPostProcessor 修改属性值（注解属性填充）\n            applyBeanPostProcessorsBeforeApplyingPropertyValues(beanName, bean, beanDefinition);\n            // 给 Bean 填充属性（xml属性填充）\n            applyPropertyValues(beanName, bean, beanDefinition);\n            // 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法\n            bean = initializeBean(beanName, bean, beanDefinition);\n        } catch (Exception e) {\n            throw new BeansException(\"Instantiation of bean failed\", e);\n        }\n        // 注册实现了 DisposableBean 接口的 Bean 对象\n        registerDisposableBeanIfNecessary(beanName, bean, beanDefinition);\n        // 判断 SCOPE_SINGLETON、SCOPE_PROTOTYPE\n        Object exposedObject = bean;\n        if (beanDefinition.isSingleton()) {\n            // 获取代理对象\n            exposedObject = getSingleton(beanName);\n            registerSingleton(beanName, exposedObject);\n        }\n        return exposedObject;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n其中 applyPropertyValues 这个方法，对要创建的实例进行属性填充的时候会进入循环依赖的问题，一旦遇到是 BeanReference 类型的，则会调用 getBean 方法去获取实例，该方法又会回到上面的方法。\n\n    protected void applyPropertyValues(String beanName, Object bean, BeanDefinition beanDefinition) {\n        try {\n            // 这里获取到  bean 信息里的属性有哪些，也就是一个对象有哪些属性，并循环赋值到所创建实例的属性中去\n            PropertyValues propertyValues = beanDefinition.getPropertyValues();\n            for (PropertyValue propertyValue : propertyValues.getPropertyValues()) {\n                String name = propertyValue.getName();\n                Object value = propertyValue.getValue();\n                if (value instanceof BeanReference) {\n                    // A 依赖 B，获取 B 的实例化\n                    BeanReference beanReference = (BeanReference) value;\n                    value = getBean(beanReference.getBeanName());\n                }\n                // 类型转换，不是侧重点可以不看\n                else {\n                    Class<?> sourceType = value.getClass();\n                    Class<?> targetType = (Class<?>) TypeUtil.getFieldType(bean.getClass(), name);\n                    ConversionService conversionService = getConversionService();\n                    if (conversionService != null) {\n                        if (conversionService.canConvert(sourceType, targetType)) {\n                            value = conversionService.convert(value, targetType);\n                        }\n                    }\n                }\n                // 反射设置属性填充\n                 BeanUtil.setFieldValue(bean, name, value);\n            }\n        } catch (Exception e) {\n            throw new BeansException(\"Error setting property values：\" + beanName + \" message：\" + e);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n当一个实例的创建基本完成，他会把自己添加到一级缓存对象，做为一个成品提供给其他方法使用。如下方法就是添加到一级缓存的过程，其中 getSingleton 在获取三级缓存数据到二级缓存的时候会执行 singletonFactory.getObject (); 这是一个方法，会去执行 getEarlyBeanReference (beanName, beanDefinition, finalBean) 方法，该方法会得到工厂方法里面的一个代理对象。然后再把代理对象存到一级缓存。至此 Bean 的实例化到缓存的过程就结束。\n\n// 判断 SCOPE_SINGLETON、SCOPE_PROTOTYPE\nObject exposedObject = bean;\nif (beanDefinition.isSingleton()) {\n    // 把三级缓存对象转换为二级缓存对象\n    exposedObject = getSingleton(beanName);\n    // 把二级缓存对象转换为一级缓存对象\n    registerSingleton(beanName, exposedObject);\n}\n\n// getSingleton 的部分代码实现\nObjectFactory<?> singletonFactory = singletonFactories.get(beanName);\nif (singletonFactory != null) {\n    // 获取代理对象\n    singletonObject = singletonFactory.getObject();\n    // 把三级缓存中的代理对象中的真实对象获取出来，放入二级缓存中\n    earlySingletonObjects.put(beanName, singletonObject);\n    singletonFactories.remove(beanName);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 流程介绍\n\n有了完整的概念后，我们可以考虑循环依赖的存在，当 A 依赖 B，B 又依赖 A，那么解决依赖的过程又是如何做的，可以看下图：\n\n\n\n 1. 会先在 getBean 方法里面找 A，通过一二三级缓存中寻找，如果找到则直接返回\n 2. 没找到就去创建 A 并放入 singletonFactories 三级缓存，会对 A 的属性值进行填充，此时 A 的属性依赖了 B，就要调用 getBean 找 B\n 3. 通过在 getBean 的 一二三级缓存查找，如果找到了直接返回\n 4. 没找到就去创建 B 并放入 singletonFactories 三级缓存，会对 B 的属性值进行填充，此时 B 的属性依赖了 A，就要调用 getBean 找 A\n 5. 此时的 A 已经在三级缓存，可以在三级缓存中找到，找到后会生成 A 代理对象 放入 earlySingletonObjects 二级缓存并返回这个代理对象\n 6. B 有了属性 A 的代理对象，此时 B 所有属性填充完毕后，就要把 B 添加到一级缓存，但此时的 B 在三级缓存，会先把三级缓存对象生成代理后放入到 earlySingletonObjects 二级缓存，再由二级缓存把对象放到 singletonObjects 一级缓存对象\n 7. 此时的 B 已经放到一级缓存对象了，并结束了 B 的创建流程，所以会返回到第 2 步，A 就有了 B 的实例，A 的属性填充完毕后，就要把 A 添加到一级缓存，但此时的 A 已经在二级缓存，所以就可以直接放入到 singletonObjects 一级缓存\n\n现在我们知道，按照 Spring 框架的设计，用于解决循环依赖需要用到三个缓存，这三个缓存分别存放了 singletonObjects 成品对象、singletonFactories 半成品对象 (未填充属性值)、earlySingletonObjects 代理对象，分阶段存放对象内容，来解决循环依赖问题。\n\n那么，这里我们需要知道一个核心的原理，就是用于解决循环依赖就必须是三级缓存呢，二级行吗？一级可以不？其实都能解决，只不过 Spring 框架的实现要保证几个事情，如只有一级缓存处理流程没法拆分，复杂度也会增加，同时半成品对象可能会有空指针异常。而将半成品与成品对象分开，处理起来也更加优雅、简单、易扩展。另外 Spring 的两大特性中不仅有 IOC 还有 AOP，也就是基于字节码增强后的方法，该存放到哪，而三级缓存最主要，要解决的循环依赖就是对 AOP 的处理，但如果把 AOP 代理对象的创建提前，那么二级缓存也一样可以解决。但是，这就违背了 Spring 创建对象的原则，Spring 更喜欢把所有的普通 Bean 都初始化完成，在处理代理对象的初始化。\n\n一个单个缓存解决循环依赖的例子\n\npublic class ForRelyOn {\n\n    static Map<String,Object> singletonObjects = new HashMap<>();\n\n    public static void main(String[] args) throws Exception {\n        System.out.println(getBean(A.class).getB());\n        System.out.println(getBean(B.class).getA());\n    }\n\n    private static <T> T getBean(Class<T> beanClass) throws Exception {\n        String beanName = beanClass.getSimpleName().toLowerCase();\n        if (singletonObjects.containsKey(beanName)) {\n            return (T) singletonObjects.get(beanName);\n        }\n        // 实例化对象入缓存0\n        Object obj = beanClass.newInstance();\n        singletonObjects.put(beanName, obj);\n        // 属性填充补全对象\n        Field[] fields = obj.getClass().getDeclaredFields();\n        for (Field field : fields) {\n            field.setAccessible(true);\n            Class<?> fieldClass = field.getType();\n            String fieldBeanName = fieldClass.getSimpleName().toLowerCase();\n            field.set(obj, singletonObjects.containsKey(fieldBeanName) ? singletonObjects.get(fieldBeanName) : getBean(fieldClass));\n            field.setAccessible(false);\n        }\n        return (T) obj;\n    }\n\n\n    static class A{\n        private B b;\n\n        public B getB() {\n            return b;\n        }\n\n        public void setB(B b) {\n            this.b = b;\n        }\n    }\n\n    static class B{\n        private A a;\n\n        public A getA() {\n            return a;\n        }\n\n        public void setA(A a) {\n            this.a = a;\n        }\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n提示\n\n以上都是我们通过 单例的 set 注入方式来解决循环依赖，在 spring 中有多种多样的注入情况，那会带来什么样的情况呢？\n\n\n# 不同的循环依赖问题\n\n\n# set 循环依赖\n\n在多例 set 的循环依赖中，只有多例和多例循环依赖会出现报错，报错信息如下：\n\nError creating bean with name 'b': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'a': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'b': Requested bean is currently in creation: Is there an unresolvable circular reference?\n\n\n1\n\n\n多例和单例的循环依赖不会有问题，如下是一个单例和多例的循环依赖代码：\n\n@Component\npublic class A {\n    @Resource\n    private B b;\n    public void getb() {\n        System.out.println(b);\n    }\n}\n\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n@Component\npublic class B {\n    @Resource\n    private A a;\n    public void geta(){\n        System.out.println(a);\n    }\n}\n\npublic static void main(String[] args) {\n    ConfigurableApplicationContext run = SpringApplication.run(AdminApplication.class, args);\n    B b = run.getBean(B.class);\n    B b1 = run.getBean(B.class);\n    B b2 = run.getBean(B.class);\n    A a = run.getBean(A.class);\n    A a1 = run.getBean(A.class);\n    A a2 = run.getBean(A.class);\n    System.out.println(b);\n    System.out.println(b1);\n    System.out.println(b2);\n    a.getb();\n    a1.getb();\n    a2.getb();\n}\n\n// 结果\ncom.wt.admin.controller.B@1e5e2e06\ncom.wt.admin.controller.B@26c1f3eb\ncom.wt.admin.controller.B@79982bcc\ncom.wt.admin.controller.B@16b2d182\ncom.wt.admin.controller.B@16b2d182\ncom.wt.admin.controller.B@16b2d182\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 构造器 循环依赖\n\n但在 构造器 循环依赖的注入中，因为在构造器注入方式下，需要先创建一个 Bean 对象，然后再将其他 Bean 注入该对象中。但是，如果两个 Bean 都互相依赖，那么就会出现无法创建任何一个 Bean 的情况。因此，Spring 在这种情况下会抛出异常以避免程序出现不可预测的错误。\n\n@Configuration\npublic class Config {\n    @Bean\n    public A a(B b){\n        return new A(b);\n    }\n    @Bean\n    public B b(A a){\n        return new B(a);\n    }\n}\n// 报错\nThe dependencies of some of the beans in the application context form a cycle:\n┌─────┐\n|  a defined in class path resource [com/wt/admin/controller/Config.class]\n↑     ↓\n|  b defined in class path resource [com/wt/admin/controller/Config.class]\n└─────┘\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n解决这种问题，可以通过在方法中添加 @Lazy 注解，只能加到方法里，不能加到 @Bean 的上下位置，否则依然会报循环依赖；这种方式尽可能的被定义为 @Lazy 的 Bean 在第一次被使用的时候在去进行实例化。\n\n构造器也存在多例和单例的问题，如果你是多例依赖循环，会报错，如下\n\n// 多例\n@Configuration\npublic class Config {\n    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n    @Bean\n    public A a(B b){\n        return new A(b);\n    }\n    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n    @Bean\n    public B b(A a){\n        return new B(a);\n    }\n}\n// 报错信息\nError creating bean with name 'b' defined in class path resource [com/wt/admin/controller/Config.class]: Unsatisfied dependency expressed through method 'b' parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'a' defined in class path resource [com/wt/admin/controller/Config.class]: Unsatisfied dependency expressed through method 'a' parameter 0; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'b': Requested bean is currently in creation: Is there an unresolvable circular reference?\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n如果你是多例和单例循环依赖，也会报错，但这里和我们使用注解进行多例和单例的循环依赖测试结果就有所不同了\n\n@Configuration\npublic class Config {\n    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n    @Bean\n    public A a(B b){\n        return new A(b);\n    }\n    @Bean\n    public B b(A a){\n        return new B(a);\n    }\n}\n// 报错信息\nThe dependencies of some of the beans in the application context form a cycle:\n┌─────┐\n|  b defined in class path resource [com/wt/admin/controller/Config.class]\n↑     ↓\n|  a defined in class path resource [com/wt/admin/controller/Config.class]\n└─────┘\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n那么构造器和 set 注入的方式在多例和单例的结论如下：\n\n * 单例循环依赖：构造器的方式会报错（可以用 @Lazy 解决），set 注入的方式不会报错\n * 多例循环依赖：构造器的方式会报错，set 注入的方式会报错，两者都是调用对象时才报\n * 单例和多例循环依赖：构造器的方式会报错（可以用 @Lazy 解决），set 注入的方式不会报错\n\n\n# @DependsOn\n\n@DependsOn 注解可以定义在类和⽅法上，意思是我这个组件要依赖于另⼀个组件，也就是说被依赖的组件会⽐该组件先注册到 IOC 容器中。如下案例，因为两个都要先于，所以造成了循环依赖\n\n@DependsOn(\"b\")\n@Component\npublic class A {\n    @Resource\n    private B b;\n    public void getb() {\n        System.out.println(b);\n    }\n}\n\n@DependsOn(\"a\")\n@Component\npublic class B {\n    @Resource\n    private A a;\n    public void geta(){\n        System.out.println(a);\n    }\n}\n// 报错\nError creating bean with name 'b' defined in file [D:\\workspace\\luckyDraw\\java\\target\\classes\\com\\wt\\admin\\controller\\B.class]: Circular depends-on relationship between 'b' and 'a'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",normalizedContent:"spring 三级缓存是 spring 框架中用于管理 bean 对象的缓存机制。它由三个不同的缓存区域组成，分别是 singletonobjects、earlysingletonobjects 和 singletonfactories。\n\n * singletonobjects（一级缓存，成品对象）：单例对象缓存区域存储已经完全初始化后的单例对象。当第一次使用 getbean () 方法获取 bean 时，spring 会尝试从这个缓存区获取对象，如果能够找到，则直接返回该对象实例。\n * earlysingletonobjects（二级缓存，代理对象，特殊的成品对象）：如果一个单例对象需要引用另一个单例对象，但后者尚未被完全初始化，那么容器将创建一个代理对象（proxy object），并将其放到 earlysingletonobjects 中。这个代理对象会暴露与实际对象相同的接口，并且能够对其进行一些基本操作，但是它还没有被完全初始化。\n * singletonfactories（三级缓存，半成品对象也是工厂对象）：单例工厂缓存区域存储创建 bean 实例的 objectfactory。在 bean 依赖关系的创建过程中，如果 a 依赖 b，b 又依赖 a，那么在创建 a 和 b 的过程中就会出现循环依赖的问题。spring 就是通过提前暴露一个未完成初始化的 bean 来解决这个问题的。\n\n提示\n\n对于 spring 设计没有完全理解的同学可能很难明白以上的话，还是需要用代码加一说明，以下文章会议代码的方式全程讲清楚\n\n\n# 代码介绍\n\n首先 spring 在初始化的时候会先把所有 bean 加载到 beandefinition 的缓存中，后续所有对 bean 的创建都是从 beandefinition 中获取详细可以看 spring 源码阅读（一） ，然后再进行 bean 生命周期的过程，创建好 bean 的实例放入到 singletonobjects 缓存中，但是代码的第一步都是从获取开始，只有获取不到我才创建\n\n    public object getbean(string name) throws beansexception {\n        return dogetbean(name, null);\n    }\n\n    public object getbean(string name, object... args) throws beansexception {\n        return dogetbean(name, args);\n    }\n\n    public <t> t getbean(string name, class<t> requiredtype) throws beansexception {\n        return (t) getbean(name);\n    }\n\n    protected <t> t dogetbean(final string name, final object[] args) {\n        // 从缓存中获取实例\n        object sharedinstance = getsingleton(name);\n        if (sharedinstance != null) {\n            // 如果实现了 factorybean，则需要调用 factorybean#getobject\n            return (t) getobjectforbeaninstance(sharedinstance, name);\n        }\n        // 从beandefinition列表中获取对象\n        beandefinition beandefinition = getbeandefinition(name);\n        // bean实例的创建过程\n        object bean = docreatebean(name, beandefinition, args);\n        // 如果实现了 factorybean，则需要调用 factorybean#getobject\n        return (t) getobjectforbeaninstance(bean, name);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n可以看到 getsingleton 方法就是获取单例，一旦有则直接返回，但第一次肯定是没有的，详细看下他的获取方式\n\n    public object getsingleton(string beanname) {\n        // 从一级缓存中获取\n        object singletonobject = singletonobjects.get(beanname);\n        if (null == singletonobject) {\n            singletonobject = earlysingletonobjects.get(beanname);\n            // 判断二级缓存中是否有对象，这个对象就是代理对象，因为只有代理对象才会放到三级缓存中\n            if (null == singletonobject) {\n                objectfactory<?> singletonfactory = singletonfactories.get(beanname);\n                if (singletonfactory != null) {\n                    singletonobject = singletonfactory.getobject();\n                    // 把三级缓存中的代理对象中的真实对象获取出来，放入二级缓存中\n                    earlysingletonobjects.put(beanname, singletonobject);\n                    singletonfactories.remove(beanname);\n                }\n            }\n        }\n        return singletonobject;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n没有获取到实例则从 beandefinition 中获取 bean 的定义信息调用 docreatebean 创建 bean 的实例\n\n    protected object docreatebean(string beanname, beandefinition beandefinition, object[] args) {\n        object bean = null;\n        try {\n            // 实例化 bean\n            bean = createbeaninstance(beandefinition, beanname, args);\n            // 处理循环依赖，将实例化后的bean对象提前放入缓存中暴露出来\n            if (beandefinition.issingleton()) {\n                object finalbean = bean;\n                addsingletonfactory(beanname, () -> getearlybeanreference(beanname, beandefinition, finalbean));\n            }\n            // 是否需要继续进行后续的属性填充\n            boolean continuewithpropertypopulation = applybeanpostprocessorsafterinstantiation(beanname, bean);\n            if (!continuewithpropertypopulation) {\n                return bean;\n            }\n            // 在设置 bean 属性之前，允许 beanpostprocessor 修改属性值（注解属性填充）\n            applybeanpostprocessorsbeforeapplyingpropertyvalues(beanname, bean, beandefinition);\n            // 给 bean 填充属性（xml属性填充）\n            applypropertyvalues(beanname, bean, beandefinition);\n            // 执行 bean 的初始化方法和 beanpostprocessor 的前置和后置处理方法\n            bean = initializebean(beanname, bean, beandefinition);\n        } catch (exception e) {\n            throw new beansexception(\"instantiation of bean failed\", e);\n        }\n        // 注册实现了 disposablebean 接口的 bean 对象\n        registerdisposablebeanifnecessary(beanname, bean, beandefinition);\n        // 判断 scope_singleton、scope_prototype\n        object exposedobject = bean;\n        if (beandefinition.issingleton()) {\n            // 获取代理对象\n            exposedobject = getsingleton(beanname);\n            registersingleton(beanname, exposedobject);\n        }\n        return exposedobject;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n其中 applypropertyvalues 这个方法，对要创建的实例进行属性填充的时候会进入循环依赖的问题，一旦遇到是 beanreference 类型的，则会调用 getbean 方法去获取实例，该方法又会回到上面的方法。\n\n    protected void applypropertyvalues(string beanname, object bean, beandefinition beandefinition) {\n        try {\n            // 这里获取到  bean 信息里的属性有哪些，也就是一个对象有哪些属性，并循环赋值到所创建实例的属性中去\n            propertyvalues propertyvalues = beandefinition.getpropertyvalues();\n            for (propertyvalue propertyvalue : propertyvalues.getpropertyvalues()) {\n                string name = propertyvalue.getname();\n                object value = propertyvalue.getvalue();\n                if (value instanceof beanreference) {\n                    // a 依赖 b，获取 b 的实例化\n                    beanreference beanreference = (beanreference) value;\n                    value = getbean(beanreference.getbeanname());\n                }\n                // 类型转换，不是侧重点可以不看\n                else {\n                    class<?> sourcetype = value.getclass();\n                    class<?> targettype = (class<?>) typeutil.getfieldtype(bean.getclass(), name);\n                    conversionservice conversionservice = getconversionservice();\n                    if (conversionservice != null) {\n                        if (conversionservice.canconvert(sourcetype, targettype)) {\n                            value = conversionservice.convert(value, targettype);\n                        }\n                    }\n                }\n                // 反射设置属性填充\n                 beanutil.setfieldvalue(bean, name, value);\n            }\n        } catch (exception e) {\n            throw new beansexception(\"error setting property values：\" + beanname + \" message：\" + e);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n当一个实例的创建基本完成，他会把自己添加到一级缓存对象，做为一个成品提供给其他方法使用。如下方法就是添加到一级缓存的过程，其中 getsingleton 在获取三级缓存数据到二级缓存的时候会执行 singletonfactory.getobject (); 这是一个方法，会去执行 getearlybeanreference (beanname, beandefinition, finalbean) 方法，该方法会得到工厂方法里面的一个代理对象。然后再把代理对象存到一级缓存。至此 bean 的实例化到缓存的过程就结束。\n\n// 判断 scope_singleton、scope_prototype\nobject exposedobject = bean;\nif (beandefinition.issingleton()) {\n    // 把三级缓存对象转换为二级缓存对象\n    exposedobject = getsingleton(beanname);\n    // 把二级缓存对象转换为一级缓存对象\n    registersingleton(beanname, exposedobject);\n}\n\n// getsingleton 的部分代码实现\nobjectfactory<?> singletonfactory = singletonfactories.get(beanname);\nif (singletonfactory != null) {\n    // 获取代理对象\n    singletonobject = singletonfactory.getobject();\n    // 把三级缓存中的代理对象中的真实对象获取出来，放入二级缓存中\n    earlysingletonobjects.put(beanname, singletonobject);\n    singletonfactories.remove(beanname);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 流程介绍\n\n有了完整的概念后，我们可以考虑循环依赖的存在，当 a 依赖 b，b 又依赖 a，那么解决依赖的过程又是如何做的，可以看下图：\n\n\n\n 1. 会先在 getbean 方法里面找 a，通过一二三级缓存中寻找，如果找到则直接返回\n 2. 没找到就去创建 a 并放入 singletonfactories 三级缓存，会对 a 的属性值进行填充，此时 a 的属性依赖了 b，就要调用 getbean 找 b\n 3. 通过在 getbean 的 一二三级缓存查找，如果找到了直接返回\n 4. 没找到就去创建 b 并放入 singletonfactories 三级缓存，会对 b 的属性值进行填充，此时 b 的属性依赖了 a，就要调用 getbean 找 a\n 5. 此时的 a 已经在三级缓存，可以在三级缓存中找到，找到后会生成 a 代理对象 放入 earlysingletonobjects 二级缓存并返回这个代理对象\n 6. b 有了属性 a 的代理对象，此时 b 所有属性填充完毕后，就要把 b 添加到一级缓存，但此时的 b 在三级缓存，会先把三级缓存对象生成代理后放入到 earlysingletonobjects 二级缓存，再由二级缓存把对象放到 singletonobjects 一级缓存对象\n 7. 此时的 b 已经放到一级缓存对象了，并结束了 b 的创建流程，所以会返回到第 2 步，a 就有了 b 的实例，a 的属性填充完毕后，就要把 a 添加到一级缓存，但此时的 a 已经在二级缓存，所以就可以直接放入到 singletonobjects 一级缓存\n\n现在我们知道，按照 spring 框架的设计，用于解决循环依赖需要用到三个缓存，这三个缓存分别存放了 singletonobjects 成品对象、singletonfactories 半成品对象 (未填充属性值)、earlysingletonobjects 代理对象，分阶段存放对象内容，来解决循环依赖问题。\n\n那么，这里我们需要知道一个核心的原理，就是用于解决循环依赖就必须是三级缓存呢，二级行吗？一级可以不？其实都能解决，只不过 spring 框架的实现要保证几个事情，如只有一级缓存处理流程没法拆分，复杂度也会增加，同时半成品对象可能会有空指针异常。而将半成品与成品对象分开，处理起来也更加优雅、简单、易扩展。另外 spring 的两大特性中不仅有 ioc 还有 aop，也就是基于字节码增强后的方法，该存放到哪，而三级缓存最主要，要解决的循环依赖就是对 aop 的处理，但如果把 aop 代理对象的创建提前，那么二级缓存也一样可以解决。但是，这就违背了 spring 创建对象的原则，spring 更喜欢把所有的普通 bean 都初始化完成，在处理代理对象的初始化。\n\n一个单个缓存解决循环依赖的例子\n\npublic class forrelyon {\n\n    static map<string,object> singletonobjects = new hashmap<>();\n\n    public static void main(string[] args) throws exception {\n        system.out.println(getbean(a.class).getb());\n        system.out.println(getbean(b.class).geta());\n    }\n\n    private static <t> t getbean(class<t> beanclass) throws exception {\n        string beanname = beanclass.getsimplename().tolowercase();\n        if (singletonobjects.containskey(beanname)) {\n            return (t) singletonobjects.get(beanname);\n        }\n        // 实例化对象入缓存0\n        object obj = beanclass.newinstance();\n        singletonobjects.put(beanname, obj);\n        // 属性填充补全对象\n        field[] fields = obj.getclass().getdeclaredfields();\n        for (field field : fields) {\n            field.setaccessible(true);\n            class<?> fieldclass = field.gettype();\n            string fieldbeanname = fieldclass.getsimplename().tolowercase();\n            field.set(obj, singletonobjects.containskey(fieldbeanname) ? singletonobjects.get(fieldbeanname) : getbean(fieldclass));\n            field.setaccessible(false);\n        }\n        return (t) obj;\n    }\n\n\n    static class a{\n        private b b;\n\n        public b getb() {\n            return b;\n        }\n\n        public void setb(b b) {\n            this.b = b;\n        }\n    }\n\n    static class b{\n        private a a;\n\n        public a geta() {\n            return a;\n        }\n\n        public void seta(a a) {\n            this.a = a;\n        }\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n提示\n\n以上都是我们通过 单例的 set 注入方式来解决循环依赖，在 spring 中有多种多样的注入情况，那会带来什么样的情况呢？\n\n\n# 不同的循环依赖问题\n\n\n# set 循环依赖\n\n在多例 set 的循环依赖中，只有多例和多例循环依赖会出现报错，报错信息如下：\n\nerror creating bean with name 'b': injection of resource dependencies failed; nested exception is org.springframework.beans.factory.beancreationexception: error creating bean with name 'a': injection of resource dependencies failed; nested exception is org.springframework.beans.factory.beancurrentlyincreationexception: error creating bean with name 'b': requested bean is currently in creation: is there an unresolvable circular reference?\n\n\n1\n\n\n多例和单例的循环依赖不会有问题，如下是一个单例和多例的循环依赖代码：\n\n@component\npublic class a {\n    @resource\n    private b b;\n    public void getb() {\n        system.out.println(b);\n    }\n}\n\n@scope(configurablebeanfactory.scope_prototype)\n@component\npublic class b {\n    @resource\n    private a a;\n    public void geta(){\n        system.out.println(a);\n    }\n}\n\npublic static void main(string[] args) {\n    configurableapplicationcontext run = springapplication.run(adminapplication.class, args);\n    b b = run.getbean(b.class);\n    b b1 = run.getbean(b.class);\n    b b2 = run.getbean(b.class);\n    a a = run.getbean(a.class);\n    a a1 = run.getbean(a.class);\n    a a2 = run.getbean(a.class);\n    system.out.println(b);\n    system.out.println(b1);\n    system.out.println(b2);\n    a.getb();\n    a1.getb();\n    a2.getb();\n}\n\n// 结果\ncom.wt.admin.controller.b@1e5e2e06\ncom.wt.admin.controller.b@26c1f3eb\ncom.wt.admin.controller.b@79982bcc\ncom.wt.admin.controller.b@16b2d182\ncom.wt.admin.controller.b@16b2d182\ncom.wt.admin.controller.b@16b2d182\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 构造器 循环依赖\n\n但在 构造器 循环依赖的注入中，因为在构造器注入方式下，需要先创建一个 bean 对象，然后再将其他 bean 注入该对象中。但是，如果两个 bean 都互相依赖，那么就会出现无法创建任何一个 bean 的情况。因此，spring 在这种情况下会抛出异常以避免程序出现不可预测的错误。\n\n@configuration\npublic class config {\n    @bean\n    public a a(b b){\n        return new a(b);\n    }\n    @bean\n    public b b(a a){\n        return new b(a);\n    }\n}\n// 报错\nthe dependencies of some of the beans in the application context form a cycle:\n┌─────┐\n|  a defined in class path resource [com/wt/admin/controller/config.class]\n↑     ↓\n|  b defined in class path resource [com/wt/admin/controller/config.class]\n└─────┘\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n解决这种问题，可以通过在方法中添加 @lazy 注解，只能加到方法里，不能加到 @bean 的上下位置，否则依然会报循环依赖；这种方式尽可能的被定义为 @lazy 的 bean 在第一次被使用的时候在去进行实例化。\n\n构造器也存在多例和单例的问题，如果你是多例依赖循环，会报错，如下\n\n// 多例\n@configuration\npublic class config {\n    @scope(configurablebeanfactory.scope_prototype)\n    @bean\n    public a a(b b){\n        return new a(b);\n    }\n    @scope(configurablebeanfactory.scope_prototype)\n    @bean\n    public b b(a a){\n        return new b(a);\n    }\n}\n// 报错信息\nerror creating bean with name 'b' defined in class path resource [com/wt/admin/controller/config.class]: unsatisfied dependency expressed through method 'b' parameter 0; nested exception is org.springframework.beans.factory.unsatisfieddependencyexception: error creating bean with name 'a' defined in class path resource [com/wt/admin/controller/config.class]: unsatisfied dependency expressed through method 'a' parameter 0; nested exception is org.springframework.beans.factory.beancurrentlyincreationexception: error creating bean with name 'b': requested bean is currently in creation: is there an unresolvable circular reference?\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n如果你是多例和单例循环依赖，也会报错，但这里和我们使用注解进行多例和单例的循环依赖测试结果就有所不同了\n\n@configuration\npublic class config {\n    @scope(configurablebeanfactory.scope_prototype)\n    @bean\n    public a a(b b){\n        return new a(b);\n    }\n    @bean\n    public b b(a a){\n        return new b(a);\n    }\n}\n// 报错信息\nthe dependencies of some of the beans in the application context form a cycle:\n┌─────┐\n|  b defined in class path resource [com/wt/admin/controller/config.class]\n↑     ↓\n|  a defined in class path resource [com/wt/admin/controller/config.class]\n└─────┘\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n那么构造器和 set 注入的方式在多例和单例的结论如下：\n\n * 单例循环依赖：构造器的方式会报错（可以用 @lazy 解决），set 注入的方式不会报错\n * 多例循环依赖：构造器的方式会报错，set 注入的方式会报错，两者都是调用对象时才报\n * 单例和多例循环依赖：构造器的方式会报错（可以用 @lazy 解决），set 注入的方式不会报错\n\n\n# @dependson\n\n@dependson 注解可以定义在类和⽅法上，意思是我这个组件要依赖于另⼀个组件，也就是说被依赖的组件会⽐该组件先注册到 ioc 容器中。如下案例，因为两个都要先于，所以造成了循环依赖\n\n@dependson(\"b\")\n@component\npublic class a {\n    @resource\n    private b b;\n    public void getb() {\n        system.out.println(b);\n    }\n}\n\n@dependson(\"a\")\n@component\npublic class b {\n    @resource\n    private a a;\n    public void geta(){\n        system.out.println(a);\n    }\n}\n// 报错\nerror creating bean with name 'b' defined in file [d:\\workspace\\luckydraw\\java\\target\\classes\\com\\wt\\admin\\controller\\b.class]: circular depends-on relationship between 'b' and 'a'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",charsets:{cjk:!0}},{title:"核心功能拆解 FactoryBean",frontmatter:{title:"核心功能拆解 FactoryBean",date:"2023-06-25T09:22:36.000Z",permalink:"/spring/204/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/20.Spring/204.%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E6%8B%86%E8%A7%A3%20FactoryBean.html",relativePath:"00.java/20.Spring/204.核心功能拆解 FactoryBean.md",key:"v-4c6fa37b",path:"/spring/204/",lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:null,content:'FactoryBean 接口，使得我们可以通过编写自定义代码来实现 Bean 的实例化和注入。具体来说，通过实现 FactoryBean 接口，我们可以在 getObject () 方法中编写自己的逻辑来实例化 Bean，同时可以在 getObjectType () 方法中指定返回的类型。因此，FactoryBean 的主要作用是对 Bean 的创建过程进行个性化定制，使得我们能够更好地控制 Spring 容器中 Bean 的生命周期和行为。同时，它还可以支持单例模式或者原型模式的 Bean 创建方式，更进一步增强了 Spring 容器的灵活性。\n\npublic interface FactoryBean<T> {\n    // 获取对象\n    T getObject() throws Exception;\n    // 获取对象类型\n    Class<?> getObjectType();\n    // 判断是否单例\n    boolean isSingleton();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n在 《核心功能拆解 IOC》 一文中，当一个 Bean 对象的创建结束，并得到所创建的 Bean 后，会继续执行 getObjectForBeanInstance 方法\n\n   protected <T> T doGetBean(final String name, final Object[] args) {\n        // 从缓存中获取实例\n        Object sharedInstance = getSingleton(name);\n        if (sharedInstance != null) {\n            // 如果实现了 FactoryBean，则需要调用 FactoryBean#getObject\n            return (T) getObjectForBeanInstance(sharedInstance, name);\n        }\n        // 从BeanDefinition列表中获取对象\n        BeanDefinition beanDefinition = getBeanDefinition(name);\n        Object bean = createBean(name, beanDefinition, args);\n        // 如果实现了 FactoryBean，则需要调用 FactoryBean#getObject\n        return (T) getObjectForBeanInstance(bean, name);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n该方法用于判断一个 Bean 是否实现了 FactoryBean 接口，如果实现了接口则需要进行对应的操作\n\nprivate Object getObjectForBeanInstance(Object beanInstance, String beanName) {\n    if (!(beanInstance instanceof FactoryBean)) {\n        return beanInstance;\n    }\n    // 查询 Bean 是否已被执行过\n    Object object = getCachedObjectForFactoryBean(beanName);\n    if (object == null) {\n        // 转成 FactoryBean\n        FactoryBean<?> factoryBean = (FactoryBean<?>) beanInstance;\n        // 具体执行\n        object = getObjectFromFactoryBean(factoryBean, beanName);\n    }\n    return object;\n}\n\nprotected Object getObjectFromFactoryBean(FactoryBean factory, String beanName) {\n    // 判断是否单例，单例会添加到 factoryBeanObjectCache 改该Map中，避免重复\n    if (factory.isSingleton()) {\n        // 获取\n        Object object = this.factoryBeanObjectCache.get(beanName);\n        // 判断是否存在\n        if (object == null) {\n            // 执行\n            object = doGetObjectFromFactoryBean(factory, beanName);\n            this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT));\n        }\n        return (object != NULL_OBJECT ? object : null);\n    } else {\n        return doGetObjectFromFactoryBean(factory, beanName);\n    }\n}\n\nprivate Object doGetObjectFromFactoryBean(final FactoryBean factory, final String beanName){\n    try {\n        // 调用接口方法\n        return factory.getObject();\n    } catch (Exception e) {\n        throw new BeansException("FactoryBean threw exception on object[" + beanName + "] creation", e);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n这种方式可以理解为，实现 FactoryBean 的类是一个代理类，他的工作主要是在自己被创建的时候，按照 Spring 的生命周期，创建自己的实例，填充属性，初始化之前执行，初始化执行，初始化之后执行，这一切都只是为被代理类做好条件铺设，等这个代理类创建完毕后，会执行 getObjectForBeanInstance 方法，返回被代理的类。更简单的理解就是 FactoryBean 可以帮我们制造我们想要的 Bean，供其他 Bean 依赖或使用。',normalizedContent:'factorybean 接口，使得我们可以通过编写自定义代码来实现 bean 的实例化和注入。具体来说，通过实现 factorybean 接口，我们可以在 getobject () 方法中编写自己的逻辑来实例化 bean，同时可以在 getobjecttype () 方法中指定返回的类型。因此，factorybean 的主要作用是对 bean 的创建过程进行个性化定制，使得我们能够更好地控制 spring 容器中 bean 的生命周期和行为。同时，它还可以支持单例模式或者原型模式的 bean 创建方式，更进一步增强了 spring 容器的灵活性。\n\npublic interface factorybean<t> {\n    // 获取对象\n    t getobject() throws exception;\n    // 获取对象类型\n    class<?> getobjecttype();\n    // 判断是否单例\n    boolean issingleton();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n在 《核心功能拆解 ioc》 一文中，当一个 bean 对象的创建结束，并得到所创建的 bean 后，会继续执行 getobjectforbeaninstance 方法\n\n   protected <t> t dogetbean(final string name, final object[] args) {\n        // 从缓存中获取实例\n        object sharedinstance = getsingleton(name);\n        if (sharedinstance != null) {\n            // 如果实现了 factorybean，则需要调用 factorybean#getobject\n            return (t) getobjectforbeaninstance(sharedinstance, name);\n        }\n        // 从beandefinition列表中获取对象\n        beandefinition beandefinition = getbeandefinition(name);\n        object bean = createbean(name, beandefinition, args);\n        // 如果实现了 factorybean，则需要调用 factorybean#getobject\n        return (t) getobjectforbeaninstance(bean, name);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n该方法用于判断一个 bean 是否实现了 factorybean 接口，如果实现了接口则需要进行对应的操作\n\nprivate object getobjectforbeaninstance(object beaninstance, string beanname) {\n    if (!(beaninstance instanceof factorybean)) {\n        return beaninstance;\n    }\n    // 查询 bean 是否已被执行过\n    object object = getcachedobjectforfactorybean(beanname);\n    if (object == null) {\n        // 转成 factorybean\n        factorybean<?> factorybean = (factorybean<?>) beaninstance;\n        // 具体执行\n        object = getobjectfromfactorybean(factorybean, beanname);\n    }\n    return object;\n}\n\nprotected object getobjectfromfactorybean(factorybean factory, string beanname) {\n    // 判断是否单例，单例会添加到 factorybeanobjectcache 改该map中，避免重复\n    if (factory.issingleton()) {\n        // 获取\n        object object = this.factorybeanobjectcache.get(beanname);\n        // 判断是否存在\n        if (object == null) {\n            // 执行\n            object = dogetobjectfromfactorybean(factory, beanname);\n            this.factorybeanobjectcache.put(beanname, (object != null ? object : null_object));\n        }\n        return (object != null_object ? object : null);\n    } else {\n        return dogetobjectfromfactorybean(factory, beanname);\n    }\n}\n\nprivate object dogetobjectfromfactorybean(final factorybean factory, final string beanname){\n    try {\n        // 调用接口方法\n        return factory.getobject();\n    } catch (exception e) {\n        throw new beansexception("factorybean threw exception on object[" + beanname + "] creation", e);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n这种方式可以理解为，实现 factorybean 的类是一个代理类，他的工作主要是在自己被创建的时候，按照 spring 的生命周期，创建自己的实例，填充属性，初始化之前执行，初始化执行，初始化之后执行，这一切都只是为被代理类做好条件铺设，等这个代理类创建完毕后，会执行 getobjectforbeaninstance 方法，返回被代理的类。更简单的理解就是 factorybean 可以帮我们制造我们想要的 bean，供其他 bean 依赖或使用。',charsets:{cjk:!0}},{title:"注解替代Spring生命周期实现类",frontmatter:{title:"注解替代Spring生命周期实现类",date:"2023-06-25T09:22:36.000Z",permalink:"/spring/205/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/20.Spring/205.%E6%B3%A8%E8%A7%A3%E6%9B%BF%E4%BB%A3Spring%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%AE%9E%E7%8E%B0%E7%B1%BB.html",relativePath:"00.java/20.Spring/205.注解替代Spring生命周期实现类.md",key:"v-245188e7",path:"/spring/205/",headers:[{level:2,title:"Spring IOC",slug:"spring-ioc",normalizedTitle:"spring ioc",charIndex:151},{level:3,title:"@Bean",slug:"bean",normalizedTitle:"@bean",charIndex:166},{level:3,title:"@Scope",slug:"scope",normalizedTitle:"@scope",charIndex:307},{level:3,title:"@PostConstruct",slug:"postconstruct",normalizedTitle:"@postconstruct",charIndex:352},{level:3,title:"@PreDestroy",slug:"predestroy",normalizedTitle:"@predestroy",charIndex:389},{level:3,title:"Spring DI",slug:"spring-di",normalizedTitle:"spring di",charIndex:426},{level:3,title:"@Autowired",slug:"autowired",normalizedTitle:"@autowired",charIndex:644},{level:3,title:"@Qualifier",slug:"qualifier",normalizedTitle:"@qualifier",charIndex:759},{level:3,title:"@Resource",slug:"resource",normalizedTitle:"@resource",charIndex:936},{level:3,title:"@Value",slug:"value",normalizedTitle:"@value",charIndex:1155},{level:2,title:"Spring AOP",slug:"spring-aop",normalizedTitle:"spring aop",charIndex:1196},{level:3,title:"@Aspect",slug:"aspect",normalizedTitle:"@aspect",charIndex:1211},{level:3,title:"@Before",slug:"before",normalizedTitle:"@before",charIndex:1246},{level:3,title:"@AfterReturning",slug:"afterreturning",normalizedTitle:"@afterreturning",charIndex:1281},{level:3,title:"@AfterThrowing",slug:"afterthrowing",normalizedTitle:"@afterthrowing",charIndex:1335},{level:3,title:"@After",slug:"after",normalizedTitle:"@after",charIndex:1281},{level:3,title:"@Around",slug:"around",normalizedTitle:"@around",charIndex:1420},{level:2,title:"其他注解",slug:"其他注解",normalizedTitle:"其他注解",charIndex:1455},{level:3,title:"@Order",slug:"order",normalizedTitle:"@order",charIndex:1464},{level:4,title:"错误使用",slug:"错误使用",normalizedTitle:"错误使用",charIndex:1765},{level:4,title:"正确使用",slug:"正确使用",normalizedTitle:"正确使用",charIndex:2381},{level:3,title:"@AutoConfigureOrder",slug:"autoconfigureorder",normalizedTitle:"@autoconfigureorder",charIndex:3008}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"Spring IOC @Bean @Scope @PostConstruct @PreDestroy Spring DI @Autowired @Qualifier @Resource @Value Spring AOP @Aspect @Before @AfterReturning @AfterThrowing @After @Around 其他注解 @Order 错误使用 正确使用 @AutoConfigureOrder",content:'在早期的 Spring 中，我们都是使用 XML 来进行相应的 Bean 依赖描述和属性描述，但在 Spring Boot 中大多还是习惯使用注解的方式来实现，那这里我就来总结下在 Spring 生命周期中，有哪些类提供了扩展可以给我们实现，以及原先 xml 的方式和注解方式的两种实现方式。\n\n\n# Spring IOC\n\n\n# @Bean\n\n<bean id="student" class="com.xinhua.study.bean.Student" scope="prototype" init-method="init()" destroy-method="destroy()"/>\n\n\n1\n\n\n\n# @Scope\n\nscope="singleton/prototype"\n\n\n1\n\n\n\n# @PostConstruct\n\ninit-method\n\n\n1\n\n\n\n# @PreDestroy\n\ndestroy-method\n\n\n1\n\n\n\n# Spring DI\n\nAutowired+Qualifier=Resource 这就是他们三者的关系，Autowired 根据类型找实现类，一个接口有多个实现类时需要通过 Qualifier 来指明需要哪个实现类，这是就需要 Autowired+Qualifier 一起使用才可以。Resource 则是不声明名称时按照类型查找效果与 Autowired 相同，声明名称时就等于 Autowired+Qualifier 的组合\n\n\n# @Autowired\n\n@Autowired 可以单独使用。如果单独使用，它将按类型装配。因此，如果在容器中声明了多个相同类型的 bean，则会出现问题，因为 @Autowired 不知道要使用哪个 bean 来注入。因此，使用 @Qualifier 与 @Autowired 一起，通过指定 bean 名称来阐明实际装配的 bean\n\nref="类型"\n\n\n1\n\n\n\n# @Qualifier\n\n@Qualifier 默认按名称装配（这个注解是属于 spring 的），value 默认 @Qualifier (value = "") 空值。\n\nref="类型"\n\n\n1\n\n\n\n# @Resource\n\n@Resource（这个注解属于 J2EE 的），默认按照名称进行装配，名称可以通过 name 属性进行指定， 如果没有指定 name 属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在 setter 方法上默认取属性名进行装配。 当找不到与名称匹配的 bean 时才按照类型进行装配。但是需要注意的是，如果 name 属性一旦指定，就只会按照名称进行装配。\n\nref="类型"\n\n\n1\n\n\n\n# @Value\n\n给基本数据类型赋值\n\nref="基础数据类型"\n\n\n1\n\n\n\n# Spring AOP\n\n\n# @Aspect\n\n声明界面\n\napo:aspect\n\n\n1\n\n\n\n# @Before\n\n前置通知\n\napo:before\n\n\n1\n\n\n\n# @AfterReturning\n\n后置正常通知\n\naop:after-returning\n\n\n1\n\n\n\n# @AfterThrowing\n\n后置异常通知\n\naop:after-throwing\n\n\n1\n\n\n\n# @After\n\n最终通知\n\naop:after\n\n\n1\n\n\n\n# @Around\n\n环绕通知\n\naop:around\n\n\n1\n\n\n\n# 其他注解\n\n\n# @Order\n\n最开始 Order 注解用于切面的优先级指定；在 4.0 之后对它的功能进行了增强，支持集合的注入时，指定集合中 bean 的顺序，并且特别指出了，它对于单实例的 bean 之间的顺序，没有任何影响。\n\n注解 @Order 或者接口 Ordered 的作用是定义 Spring IOC 容器中 Bean 的执行顺序的优先级，而不是定义 Bean 的加载顺序，Bean 的加载顺序不受 @Order 或 Ordered 接口的影响；\n\n@Order 注解不能指定 bean 的加载顺序，它适用于 AOP 的优先级，以及将多个 Bean 注入到集合时，这些 bean 在集合中的顺序\n\n# 错误使用\n\n// 错误使用方法 1\n@Component\n@Order(2)\npublic class OrderA {\n    public OrderA() {\n        System.out.println("************ A ************");\n    }\n}\n\n@Component\n@Order(1)\npublic class OrderB {\n    public OrderB() {\n        System.out.println("************ B ************");\n    }\n}\n// 错误使用方法 2\n@Configuration\npublic class OrderBeanConfig {\n \n    @Order(2)\n    @Bean\n    public OrderC orderC() {\n        return new OrderC();\n    }\n \n    @Order(1)\n    @Bean\n    public OrderD orderD() {\n        return new OrderD();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n# 正确使用\n\n@Component\n@Order(value = 3)\npublic class AnoBeanA implements IBean{\n    public AnoBeanA() {\n        System.out.println("************ AnoBean A ************");\n    }\n}\n\n@Component\n@Order(value = 2)\npublic class AnoBeanB implements IBean{\n \n    public AnoBeanB() {\n        System.out.println("************ AnoBean B ************");\n    }\n}\n\n@Component\npublic class AnoBean {\n    public AnoBean(List<IBean> anoBeanList) {\n        for (IBean bean : anoBeanList) {\n            System.out.println("in ano testBean: "+ bean.getClass())\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# @AutoConfigureOrder\n\n@AutoConfigureOrder 指定外部依赖的 AutoConfig 的加载顺序（即定义在 / META-INF/spring.factories 文件中的配置 bean 优先级)，在当前工程中使用这个注解并没有什么用，同样的 @AutoConfigureBefore 和 @AutoConfigureAfter 这两个注解的适用范围和 @AutoConfigureOrder 一样',normalizedContent:'在早期的 spring 中，我们都是使用 xml 来进行相应的 bean 依赖描述和属性描述，但在 spring boot 中大多还是习惯使用注解的方式来实现，那这里我就来总结下在 spring 生命周期中，有哪些类提供了扩展可以给我们实现，以及原先 xml 的方式和注解方式的两种实现方式。\n\n\n# spring ioc\n\n\n# @bean\n\n<bean id="student" class="com.xinhua.study.bean.student" scope="prototype" init-method="init()" destroy-method="destroy()"/>\n\n\n1\n\n\n\n# @scope\n\nscope="singleton/prototype"\n\n\n1\n\n\n\n# @postconstruct\n\ninit-method\n\n\n1\n\n\n\n# @predestroy\n\ndestroy-method\n\n\n1\n\n\n\n# spring di\n\nautowired+qualifier=resource 这就是他们三者的关系，autowired 根据类型找实现类，一个接口有多个实现类时需要通过 qualifier 来指明需要哪个实现类，这是就需要 autowired+qualifier 一起使用才可以。resource 则是不声明名称时按照类型查找效果与 autowired 相同，声明名称时就等于 autowired+qualifier 的组合\n\n\n# @autowired\n\n@autowired 可以单独使用。如果单独使用，它将按类型装配。因此，如果在容器中声明了多个相同类型的 bean，则会出现问题，因为 @autowired 不知道要使用哪个 bean 来注入。因此，使用 @qualifier 与 @autowired 一起，通过指定 bean 名称来阐明实际装配的 bean\n\nref="类型"\n\n\n1\n\n\n\n# @qualifier\n\n@qualifier 默认按名称装配（这个注解是属于 spring 的），value 默认 @qualifier (value = "") 空值。\n\nref="类型"\n\n\n1\n\n\n\n# @resource\n\n@resource（这个注解属于 j2ee 的），默认按照名称进行装配，名称可以通过 name 属性进行指定， 如果没有指定 name 属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在 setter 方法上默认取属性名进行装配。 当找不到与名称匹配的 bean 时才按照类型进行装配。但是需要注意的是，如果 name 属性一旦指定，就只会按照名称进行装配。\n\nref="类型"\n\n\n1\n\n\n\n# @value\n\n给基本数据类型赋值\n\nref="基础数据类型"\n\n\n1\n\n\n\n# spring aop\n\n\n# @aspect\n\n声明界面\n\napo:aspect\n\n\n1\n\n\n\n# @before\n\n前置通知\n\napo:before\n\n\n1\n\n\n\n# @afterreturning\n\n后置正常通知\n\naop:after-returning\n\n\n1\n\n\n\n# @afterthrowing\n\n后置异常通知\n\naop:after-throwing\n\n\n1\n\n\n\n# @after\n\n最终通知\n\naop:after\n\n\n1\n\n\n\n# @around\n\n环绕通知\n\naop:around\n\n\n1\n\n\n\n# 其他注解\n\n\n# @order\n\n最开始 order 注解用于切面的优先级指定；在 4.0 之后对它的功能进行了增强，支持集合的注入时，指定集合中 bean 的顺序，并且特别指出了，它对于单实例的 bean 之间的顺序，没有任何影响。\n\n注解 @order 或者接口 ordered 的作用是定义 spring ioc 容器中 bean 的执行顺序的优先级，而不是定义 bean 的加载顺序，bean 的加载顺序不受 @order 或 ordered 接口的影响；\n\n@order 注解不能指定 bean 的加载顺序，它适用于 aop 的优先级，以及将多个 bean 注入到集合时，这些 bean 在集合中的顺序\n\n# 错误使用\n\n// 错误使用方法 1\n@component\n@order(2)\npublic class ordera {\n    public ordera() {\n        system.out.println("************ a ************");\n    }\n}\n\n@component\n@order(1)\npublic class orderb {\n    public orderb() {\n        system.out.println("************ b ************");\n    }\n}\n// 错误使用方法 2\n@configuration\npublic class orderbeanconfig {\n \n    @order(2)\n    @bean\n    public orderc orderc() {\n        return new orderc();\n    }\n \n    @order(1)\n    @bean\n    public orderd orderd() {\n        return new orderd();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n# 正确使用\n\n@component\n@order(value = 3)\npublic class anobeana implements ibean{\n    public anobeana() {\n        system.out.println("************ anobean a ************");\n    }\n}\n\n@component\n@order(value = 2)\npublic class anobeanb implements ibean{\n \n    public anobeanb() {\n        system.out.println("************ anobean b ************");\n    }\n}\n\n@component\npublic class anobean {\n    public anobean(list<ibean> anobeanlist) {\n        for (ibean bean : anobeanlist) {\n            system.out.println("in ano testbean: "+ bean.getclass())\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# @autoconfigureorder\n\n@autoconfigureorder 指定外部依赖的 autoconfig 的加载顺序（即定义在 / meta-inf/spring.factories 文件中的配置 bean 优先级)，在当前工程中使用这个注解并没有什么用，同样的 @autoconfigurebefore 和 @autoconfigureafter 这两个注解的适用范围和 @autoconfigureorder 一样',charsets:{cjk:!0}},{title:"pom 文件介绍及 parent、properties 标签详解",frontmatter:{title:"pom 文件介绍及 parent、properties 标签详解",date:"2023-06-25T09:22:36.000Z",permalink:"/maven/2300/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/2300.maven/2300.pom%20%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D%E5%8F%8A%20parent%E3%80%81properties%20%E6%A0%87%E7%AD%BE%E8%AF%A6%E8%A7%A3.html",relativePath:"00.java/2300.maven/2300.pom 文件介绍及 parent、properties 标签详解.md",key:"v-4452e22a",path:"/maven/2300/",headers:[{level:2,title:"pom.xml 介绍",slug:"pom-xml-介绍",normalizedTitle:"pom.xml 介绍",charIndex:2},{level:2,title:"parent 标签详解",slug:"parent-标签详解",normalizedTitle:"parent 标签详解",charIndex:4061},{level:2,title:"properties 标签详解",slug:"properties-标签详解",normalizedTitle:"properties 标签详解",charIndex:4813}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"pom.xml 介绍 parent 标签详解 properties 标签详解",content:'# pom.xml 介绍\n\npom 作为项目对象模型。通过 xml 表示 maven 项目，使用 pom.xml 来实现。主要描述了项目：包括配置文件；开发者需要遵循的规则，缺陷管理系统，组织和 licenses，项目的 url，项目的依赖性，以及其他所有的项目相关因素。\n\npom 中的描述信息都是用 xml 标签的方式，其中包含双标签和单标签，最顶部用于描述 xml 得版本和编码，其次是以 project 开头得双标签并表示为一个项目，定义了该项目可用内容及规范。\n\n# 双标签\n<project></project>\n\n# 单标签\n<project/>\n\n\n1\n2\n3\n4\n5\n\n\n对于 pom 可用内容较多，一级标签有如下表所示，但常用的都会有对应的描述\n\n标签                       描述\nmodelVersion             当前模型使用的版本\nparent                   继承某个 pom，部分是不可继承的\ngroupId                  公司或组织着唯一标识，如 org.springframework.boot 第一段是域（org、com\n                         非盈利组织、商业组织），第二段是公司名称，第三段是应用名称\nartifactId               项目的唯一 ID\nversion                  项目所属的版本号\nname                     项目名称\ndescription              项目描述信息\nproperties               配置信息描述，更多的是描述依赖 jar 版本、项目版本等\ndependencies             所要依赖的 jar 都需要在这里描述\nbuild                    构建信息，包括插件，资源文件信息等\nprofiles                 作用于项目环境的切换（dev、test、produce）\npackaging                描述项目的类型，可选 pom、jar、war\nrepositories             用是用来配置 maven 项目的远程仓库，可以是私服（nexus）\nmodules                  用来配置子项目\ndependencyManagement     用来提供了一种管理依赖版本号的方式。通常会在项目的最顶层的父 POM 中看到该元素。使用 pom.xml 中的\n                         dependencyManagement 元素能让所有在子项目中引用一个依赖而不用显式的列出版本号\ndistributionManagement   用于分发构件到远程仓库；mvn install 会将项目生成的构件安装到本地 Maven 仓库，mvn deploy\n                         用来将项目生成的构件分发到远程 Maven 仓库。本地 Maven 仓库的构件只能供当前用户使用，在分发到远程\n                         Maven 仓库之后，所有能访问该仓库的用户都能使用你的构件。\npluginRepositories       配置 Maven 从什么地方下载插件\nscm                      集成了软件配置管理的，他可以支持我们常用 SVN、CVS 等\ndevelopers               配置开发者信息，例如：一个开发者可以有多个 roles，properties\nissueManagement          bug 跟踪管理系统，定义 defect tracking system 缺陷跟踪系统\nreporting                包含 site 生成阶段的一些元素，某些 maven plugin 可以生成 reports 并且在 reporting\n                         下配置\nurl                      开发团队的网站，无关紧要可选\nlicenses                 许可证信息配置\norganization             配置组织信息\nciManagement             ?\ncontributors             ?\ninceptionYear            ?\nmailingLists             ?\nprerequisites            ?\nreports                  ?\n\n以一个 spring boot 常规项目做为示例：\n\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    \x3c!-- 继承spring-boot使用他的相关依赖 --\x3e\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.6.9</version>\n        <relativePath/> \x3c!-- lookup parent from repository --\x3e\n    </parent>\n    \x3c!-- 组织，应用 --\x3e\n    <groupId>com.xxx.boot</groupId>\n    \x3c!-- 项目ID，一般都喜欢是名称 --\x3e\n    <artifactId>framework</artifactId>\n    \x3c!-- 版本 --\x3e\n    <version>0.0.1-SNAPSHOT</version>\n    \x3c!-- 项目名称 --\x3e\n    <name>newFramework</name>\n    <description>Demo project for Spring Boot</description>\n    \x3c!-- 配置描述 --\x3e\n    <properties>\n        \x3c!-- java版本，但这个实际没什么用，单做一种描述信息看 --\x3e\n        <java.version>17</java.version>\n        \x3c!-- 实际指定编译版本可以使用如下 --\x3e\n        <maven.complier.source>17</maven.complier.source>\n        <maven.complier.target>17</maven.complier.target>\n    </properties>\n    \n    \x3c!-- 依赖 --\x3e\n    <dependencies>\n        \x3c!-- 具体依赖 --\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    \x3c!-- 构建信息 --\x3e\n    <build>\n        \x3c!-- 插件 --\x3e\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n\n# parent 标签详解\n\n<parent></parent> 标签用于继承父项目的各类依赖及其他配置信息，如版本，构建信息，配置描述等，具体范围包括：\n\n# 可以继承部分\ngroupId、version、description、url、inceptionYear、organization、licenses、developers、contributors、mailingLists、scm、issueManagement、ciManagement、properties、dependencyManagement、dependencies、repositories、pluginRepositories、build、reporting、profiles\n\n# 不可继承部分\nartifactId、name、prerequisites\n\n\n1\n2\n3\n4\n5\n\n\n一个 parent 里所包含全部内容有：\n\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.6.9</version>\n    <relativePath/>\n</parent>\n\n\n1\n2\n3\n4\n5\n6\n\n\n<relativePath/> 元素，它可以单标签也可以是双标签 <relativePath>../my-parent</relativePath> 。它不是必需的，但可以用作 Maven 的指示符，然后先搜索该项目的父级的给定路径，然后再搜索本地和远程存储库，单标签为默认从当前 pom.xml 的父级目录查找。\n\n\n# properties 标签详解\n\n<properties></properties> 没有提供什么实质性的内容供我们使用，检查下来在里面最多可以在描述一个 <project></project> 标签可用，但作用并不是不大。实际作用更多在于描述我们依赖 jar 的版本等。\n\n<properties>\n    \x3c!-- java版本，但这个实际没什么用，单做一种描述信息看 --\x3e\n    <java.version>17</java.version>\n    \x3c!-- 实际指定编译版本可以使用如下 --\x3e\n    <maven.complier.source>17</maven.complier.source>\n    <maven.complier.target>17</maven.complier.target>\n    \x3c!-- 定义lombok版本 --\x3e\n    <lombok.version>1.18.24</lombok.version>\n    <project.version>0.0.1-SNAPSHOT</project.version>\n</properties>\n\x3c!-- 项目版本 --\x3e\n<version>${project.version}</version>\n\x3c!-- 依赖 --\x3e\n<dependencies>\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <version>${lombok.version}</version>\n    </dependency>\n</dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',normalizedContent:'# pom.xml 介绍\n\npom 作为项目对象模型。通过 xml 表示 maven 项目，使用 pom.xml 来实现。主要描述了项目：包括配置文件；开发者需要遵循的规则，缺陷管理系统，组织和 licenses，项目的 url，项目的依赖性，以及其他所有的项目相关因素。\n\npom 中的描述信息都是用 xml 标签的方式，其中包含双标签和单标签，最顶部用于描述 xml 得版本和编码，其次是以 project 开头得双标签并表示为一个项目，定义了该项目可用内容及规范。\n\n# 双标签\n<project></project>\n\n# 单标签\n<project/>\n\n\n1\n2\n3\n4\n5\n\n\n对于 pom 可用内容较多，一级标签有如下表所示，但常用的都会有对应的描述\n\n标签                       描述\nmodelversion             当前模型使用的版本\nparent                   继承某个 pom，部分是不可继承的\ngroupid                  公司或组织着唯一标识，如 org.springframework.boot 第一段是域（org、com\n                         非盈利组织、商业组织），第二段是公司名称，第三段是应用名称\nartifactid               项目的唯一 id\nversion                  项目所属的版本号\nname                     项目名称\ndescription              项目描述信息\nproperties               配置信息描述，更多的是描述依赖 jar 版本、项目版本等\ndependencies             所要依赖的 jar 都需要在这里描述\nbuild                    构建信息，包括插件，资源文件信息等\nprofiles                 作用于项目环境的切换（dev、test、produce）\npackaging                描述项目的类型，可选 pom、jar、war\nrepositories             用是用来配置 maven 项目的远程仓库，可以是私服（nexus）\nmodules                  用来配置子项目\ndependencymanagement     用来提供了一种管理依赖版本号的方式。通常会在项目的最顶层的父 pom 中看到该元素。使用 pom.xml 中的\n                         dependencymanagement 元素能让所有在子项目中引用一个依赖而不用显式的列出版本号\ndistributionmanagement   用于分发构件到远程仓库；mvn install 会将项目生成的构件安装到本地 maven 仓库，mvn deploy\n                         用来将项目生成的构件分发到远程 maven 仓库。本地 maven 仓库的构件只能供当前用户使用，在分发到远程\n                         maven 仓库之后，所有能访问该仓库的用户都能使用你的构件。\npluginrepositories       配置 maven 从什么地方下载插件\nscm                      集成了软件配置管理的，他可以支持我们常用 svn、cvs 等\ndevelopers               配置开发者信息，例如：一个开发者可以有多个 roles，properties\nissuemanagement          bug 跟踪管理系统，定义 defect tracking system 缺陷跟踪系统\nreporting                包含 site 生成阶段的一些元素，某些 maven plugin 可以生成 reports 并且在 reporting\n                         下配置\nurl                      开发团队的网站，无关紧要可选\nlicenses                 许可证信息配置\norganization             配置组织信息\ncimanagement             ?\ncontributors             ?\ninceptionyear            ?\nmailinglists             ?\nprerequisites            ?\nreports                  ?\n\n以一个 spring boot 常规项目做为示例：\n\n<?xml version="1.0" encoding="utf-8"?>\n<project xmlns="http://maven.apache.org/pom/4.0.0" xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n         xsi:schemalocation="http://maven.apache.org/pom/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelversion>4.0.0</modelversion>\n    \x3c!-- 继承spring-boot使用他的相关依赖 --\x3e\n    <parent>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-parent</artifactid>\n        <version>2.6.9</version>\n        <relativepath/> \x3c!-- lookup parent from repository --\x3e\n    </parent>\n    \x3c!-- 组织，应用 --\x3e\n    <groupid>com.xxx.boot</groupid>\n    \x3c!-- 项目id，一般都喜欢是名称 --\x3e\n    <artifactid>framework</artifactid>\n    \x3c!-- 版本 --\x3e\n    <version>0.0.1-snapshot</version>\n    \x3c!-- 项目名称 --\x3e\n    <name>newframework</name>\n    <description>demo project for spring boot</description>\n    \x3c!-- 配置描述 --\x3e\n    <properties>\n        \x3c!-- java版本，但这个实际没什么用，单做一种描述信息看 --\x3e\n        <java.version>17</java.version>\n        \x3c!-- 实际指定编译版本可以使用如下 --\x3e\n        <maven.complier.source>17</maven.complier.source>\n        <maven.complier.target>17</maven.complier.target>\n    </properties>\n    \n    \x3c!-- 依赖 --\x3e\n    <dependencies>\n        \x3c!-- 具体依赖 --\x3e\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-web</artifactid>\n        </dependency>\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-test</artifactid>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    \x3c!-- 构建信息 --\x3e\n    <build>\n        \x3c!-- 插件 --\x3e\n        <plugins>\n            <plugin>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-maven-plugin</artifactid>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n\n# parent 标签详解\n\n<parent></parent> 标签用于继承父项目的各类依赖及其他配置信息，如版本，构建信息，配置描述等，具体范围包括：\n\n# 可以继承部分\ngroupid、version、description、url、inceptionyear、organization、licenses、developers、contributors、mailinglists、scm、issuemanagement、cimanagement、properties、dependencymanagement、dependencies、repositories、pluginrepositories、build、reporting、profiles\n\n# 不可继承部分\nartifactid、name、prerequisites\n\n\n1\n2\n3\n4\n5\n\n\n一个 parent 里所包含全部内容有：\n\n<parent>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-parent</artifactid>\n    <version>2.6.9</version>\n    <relativepath/>\n</parent>\n\n\n1\n2\n3\n4\n5\n6\n\n\n<relativepath/> 元素，它可以单标签也可以是双标签 <relativepath>../my-parent</relativepath> 。它不是必需的，但可以用作 maven 的指示符，然后先搜索该项目的父级的给定路径，然后再搜索本地和远程存储库，单标签为默认从当前 pom.xml 的父级目录查找。\n\n\n# properties 标签详解\n\n<properties></properties> 没有提供什么实质性的内容供我们使用，检查下来在里面最多可以在描述一个 <project></project> 标签可用，但作用并不是不大。实际作用更多在于描述我们依赖 jar 的版本等。\n\n<properties>\n    \x3c!-- java版本，但这个实际没什么用，单做一种描述信息看 --\x3e\n    <java.version>17</java.version>\n    \x3c!-- 实际指定编译版本可以使用如下 --\x3e\n    <maven.complier.source>17</maven.complier.source>\n    <maven.complier.target>17</maven.complier.target>\n    \x3c!-- 定义lombok版本 --\x3e\n    <lombok.version>1.18.24</lombok.version>\n    <project.version>0.0.1-snapshot</project.version>\n</properties>\n\x3c!-- 项目版本 --\x3e\n<version>${project.version}</version>\n\x3c!-- 依赖 --\x3e\n<dependencies>\n    <dependency>\n        <groupid>org.projectlombok</groupid>\n        <artifactid>lombok</artifactid>\n        <version>${lombok.version}</version>\n    </dependency>\n</dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',charsets:{cjk:!0}},{title:"dependencies 标签详解",frontmatter:{title:"dependencies 标签详解",date:"2023-06-25T09:22:36.000Z",permalink:"/maven/2301/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/2300.maven/2301.dependencies%20%E6%A0%87%E7%AD%BE%E8%AF%A6%E8%A7%A3.html",relativePath:"00.java/2300.maven/2301.dependencies 标签详解.md",key:"v-13c2056a",path:"/maven/2301/",headers:[{level:2,title:"scop",slug:"scop",normalizedTitle:"scop",charIndex:320},{level:2,title:"optional",slug:"optional",normalizedTitle:"optional",charIndex:3888},{level:2,title:"exclusions",slug:"exclusions",normalizedTitle:"exclusions",charIndex:4485}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"scop optional exclusions",content:'dependencies 标签下只会有一个 dependency，dependency 作用于我们引用哪些 jar 来给我们提供更多的技术支持。一般用法:\n\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-pool2</artifactId>\n            <version>2.7.0</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# scop\n\n控制 dependency (依赖) 的使用范围。通俗的讲，就是控制 Jar 包在哪些范围被加载和使用。使用方式如下：\n\n<dependency>\n    <groupId>com.giant</groupId>\n    <artifactId>giant-core-security</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <scope>compile</scope>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n\n\nscop 一共有 6 个值可以使用：\n\n * compile（默认值）\n   如果没有指定 scope 值，该元素的默认值为 compile。被依赖（giant-core-securit）jar 需要参与到当前项目的编译，测试，打包，运行等阶段。打包的时候通常会包含被依赖（giant-core-securit）jar。\n\n * provided\n   被依赖 jar 理论上可以参与编译、测试、运行等阶段，相当于 compile，但是在打包阶段做了 exclude（排除） 的动作。例如， 如果我们在开发一个应用，在编译时我们需要依赖 xxxx.jar，但是在运行时我们不需要该 jar 包，因为这个 jar 包已由应用服务器或项目本身提供该依赖，此时我们需要使用 provided 进行范围修饰。\n\n * runtime\n   表示被依赖 jar 无需参与项目的编译阶段，但是会参与到项目的测试和运行阶段。与 compile 相比，被依赖 jar 无需参与项目的编译。适用场景：例如，在编译的时候我们不需要 JDBC API 的 jar 包，而在运行的时候我们才需要 JDBC 驱动包。\n\n * test\n   表示被依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。适用场景：例如，Junit 测试。\n\n * system\n   system 元素与 provided 元素类似，但是被依赖 jar 不会从 maven 仓库中查找，而是从本地系统中获取，systemPath 元素用于制定本地系统中 jar 文件的路径。例如：\n\n<dependency>\n    <groupId>sleepycat</groupId>\n    <artifactId>je</artifactId>\n    <version>7.0.6</version>\n    <scope>system</scope>\n    <systemPath>${project.basedir}/lib/je-7.0.6.jar</systemPath>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * import\n   它只使用在 <dependencyManagement> 中，表示从其它的 pom 中导入 dependency 的配置，例如（B 项目导入 A 项目中的包配置）。众所周知，当我们创建一个 SpringBoot 项目时，我们一定会写一个 <parent> 来继承 spring 所提供的所有依赖，但如果我又想使用 spring 提供的依赖，又想继承我自己的项目，此时 import 就有了用武之地\n\n# 普通 SpringBoot 依赖\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.6.RELEASE</version>\n        <relativePath/>\n    </parent>\n\n    <groupId>com.giant</groupId>\n    <artifactId>station</artifactId>\n    <version>${project-version}</version>\n    <packaging>pom</packaging>\n\n    <properties>\n        <project-version>1.0.0</project-version>\n    </properties>\n\n</project>\n\n## 更换继承项目，并使用springboot 依赖\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    \x3c!-- 变为我自己的父项目 --\x3e\n    <parent>\n        <groupId>com.giant.parent</groupId>\n        <artifactId>boot-parent</artifactId>\n        <version>1.0-SNAPSHOT</version>\n        <relativePath/>\n    </parent>\n\n    <groupId>com.giant</groupId>\n    <artifactId>station</artifactId>\n    <version>${project-version}</version>\n    <packaging>pom</packaging>\n\n    <properties>\n        <project-version>1.0.0</project-version>\n    </properties>\n\n    \x3c!-- spring boot 依赖 --\x3e\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-parent</artifactId>\n                <version>2.2.6.RELEASE</version>\n                \x3c!-- 需要指明时pom还是jar --\x3e\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n\n\n\n# optional\n\noptional 是 maven 依赖 jar 时的一个选项，表示该依赖是可选的，不会被依赖传递。例如：B 依赖了日志框架 logback、log4j、apache commons log，这时候 A 引用 B 的 jar，因为 maven 有依赖传递机制，那么 A 项目就会有 3 个 jar 包，logback、log4j、apache commons log。实际上我们一般只会在项目中使用一种日志框架，那么我们项目中就会有多余的依赖，当这种情况时越来越多时，最后整个项目的 jar 包就有很多的多余依赖，导致项目很臃肿。\n\n对于这种情况，我们只要在 B 项目中把 logback、log4j、apache commons log 设置成 <optional>true</optional> 的即可。这时候 A 项目依赖 B 的时候，项目中不会有 logback、log4j、apache commons log 相关 jar 包，可以根据情况自行选择一个即可。\n\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# exclusions\n\n用于排除依赖项中，不需要添加的 jar，或者使用自己版本的 jar 而不适用其他人所提供的 jar。如：引用的 spring-boot-starter-data-redis 会帮我们依赖 slf4j-api，但它使用的版本被爆出了 bug，那我要升级到更高版本，引入自己选中的版本。\n\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n    <version>2.2.6.RELEASE</version>\n    <exclusions>\n        \x3c!-- 排除spring-boot-starter-data-redis自带的 slf4j --\x3e\n        <exclusion>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n\x3c!-- 引用更改版本的slf4j --\x3e\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-api</artifactId>\n    <version>1.7.36</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n',normalizedContent:'dependencies 标签下只会有一个 dependency，dependency 作用于我们引用哪些 jar 来给我们提供更多的技术支持。一般用法:\n\n    <dependencies>\n        <dependency>\n            <groupid>org.apache.commons</groupid>\n            <artifactid>commons-pool2</artifactid>\n            <version>2.7.0</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# scop\n\n控制 dependency (依赖) 的使用范围。通俗的讲，就是控制 jar 包在哪些范围被加载和使用。使用方式如下：\n\n<dependency>\n    <groupid>com.giant</groupid>\n    <artifactid>giant-core-security</artifactid>\n    <version>1.0-snapshot</version>\n    <scope>compile</scope>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n\n\nscop 一共有 6 个值可以使用：\n\n * compile（默认值）\n   如果没有指定 scope 值，该元素的默认值为 compile。被依赖（giant-core-securit）jar 需要参与到当前项目的编译，测试，打包，运行等阶段。打包的时候通常会包含被依赖（giant-core-securit）jar。\n\n * provided\n   被依赖 jar 理论上可以参与编译、测试、运行等阶段，相当于 compile，但是在打包阶段做了 exclude（排除） 的动作。例如， 如果我们在开发一个应用，在编译时我们需要依赖 xxxx.jar，但是在运行时我们不需要该 jar 包，因为这个 jar 包已由应用服务器或项目本身提供该依赖，此时我们需要使用 provided 进行范围修饰。\n\n * runtime\n   表示被依赖 jar 无需参与项目的编译阶段，但是会参与到项目的测试和运行阶段。与 compile 相比，被依赖 jar 无需参与项目的编译。适用场景：例如，在编译的时候我们不需要 jdbc api 的 jar 包，而在运行的时候我们才需要 jdbc 驱动包。\n\n * test\n   表示被依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。适用场景：例如，junit 测试。\n\n * system\n   system 元素与 provided 元素类似，但是被依赖 jar 不会从 maven 仓库中查找，而是从本地系统中获取，systempath 元素用于制定本地系统中 jar 文件的路径。例如：\n\n<dependency>\n    <groupid>sleepycat</groupid>\n    <artifactid>je</artifactid>\n    <version>7.0.6</version>\n    <scope>system</scope>\n    <systempath>${project.basedir}/lib/je-7.0.6.jar</systempath>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * import\n   它只使用在 <dependencymanagement> 中，表示从其它的 pom 中导入 dependency 的配置，例如（b 项目导入 a 项目中的包配置）。众所周知，当我们创建一个 springboot 项目时，我们一定会写一个 <parent> 来继承 spring 所提供的所有依赖，但如果我又想使用 spring 提供的依赖，又想继承我自己的项目，此时 import 就有了用武之地\n\n# 普通 springboot 依赖\n<?xml version="1.0" encoding="utf-8"?>\n<project xmlns="http://maven.apache.org/pom/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n         xsi:schemalocation="http://maven.apache.org/pom/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelversion>4.0.0</modelversion>\n\n    <parent>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-parent</artifactid>\n        <version>2.2.6.release</version>\n        <relativepath/>\n    </parent>\n\n    <groupid>com.giant</groupid>\n    <artifactid>station</artifactid>\n    <version>${project-version}</version>\n    <packaging>pom</packaging>\n\n    <properties>\n        <project-version>1.0.0</project-version>\n    </properties>\n\n</project>\n\n## 更换继承项目，并使用springboot 依赖\n<?xml version="1.0" encoding="utf-8"?>\n<project xmlns="http://maven.apache.org/pom/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n         xsi:schemalocation="http://maven.apache.org/pom/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelversion>4.0.0</modelversion>\n\n    \x3c!-- 变为我自己的父项目 --\x3e\n    <parent>\n        <groupid>com.giant.parent</groupid>\n        <artifactid>boot-parent</artifactid>\n        <version>1.0-snapshot</version>\n        <relativepath/>\n    </parent>\n\n    <groupid>com.giant</groupid>\n    <artifactid>station</artifactid>\n    <version>${project-version}</version>\n    <packaging>pom</packaging>\n\n    <properties>\n        <project-version>1.0.0</project-version>\n    </properties>\n\n    \x3c!-- spring boot 依赖 --\x3e\n    <dependencymanagement>\n        <dependencies>\n            <dependency>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-starter-parent</artifactid>\n                <version>2.2.6.release</version>\n                \x3c!-- 需要指明时pom还是jar --\x3e\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencymanagement>\n\n</project>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n\n\n\n# optional\n\noptional 是 maven 依赖 jar 时的一个选项，表示该依赖是可选的，不会被依赖传递。例如：b 依赖了日志框架 logback、log4j、apache commons log，这时候 a 引用 b 的 jar，因为 maven 有依赖传递机制，那么 a 项目就会有 3 个 jar 包，logback、log4j、apache commons log。实际上我们一般只会在项目中使用一种日志框架，那么我们项目中就会有多余的依赖，当这种情况时越来越多时，最后整个项目的 jar 包就有很多的多余依赖，导致项目很臃肿。\n\n对于这种情况，我们只要在 b 项目中把 logback、log4j、apache commons log 设置成 <optional>true</optional> 的即可。这时候 a 项目依赖 b 的时候，项目中不会有 logback、log4j、apache commons log 相关 jar 包，可以根据情况自行选择一个即可。\n\n<dependency>\n    <groupid>org.projectlombok</groupid>\n    <artifactid>lombok</artifactid>\n    <optional>true</optional>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# exclusions\n\n用于排除依赖项中，不需要添加的 jar，或者使用自己版本的 jar 而不适用其他人所提供的 jar。如：引用的 spring-boot-starter-data-redis 会帮我们依赖 slf4j-api，但它使用的版本被爆出了 bug，那我要升级到更高版本，引入自己选中的版本。\n\n<dependency>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-data-redis</artifactid>\n    <version>2.2.6.release</version>\n    <exclusions>\n        \x3c!-- 排除spring-boot-starter-data-redis自带的 slf4j --\x3e\n        <exclusion>\n            <groupid>org.slf4j</groupid>\n            <artifactid>slf4j-api</artifactid>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n\x3c!-- 引用更改版本的slf4j --\x3e\n<dependency>\n    <groupid>org.slf4j</groupid>\n    <artifactid>slf4j-api</artifactid>\n    <version>1.7.36</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n',charsets:{cjk:!0}},{title:"使用 Nexus3.x 搭建私服",frontmatter:{title:"使用 Nexus3.x 搭建私服",date:"2023-06-25T09:22:36.000Z",permalink:"/maven/2302/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/2300.maven/2302.%E4%BD%BF%E7%94%A8%20Nexus3.x%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%8D.html",relativePath:"00.java/2300.maven/2302.使用 Nexus3.x 搭建私服.md",key:"v-5783fd5e",path:"/maven/2302/",lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:null,content:'下载地址 https://help.sonatype.com/repomanager3/product-information/download，下载好后进行解压缩会得到两个文件，nexus-3.39.0-01 和 sonatype-work。可以配置 nexus 变量到我们的环境中方便启动，也可以不配置每次都到 nexus-3.39.0-01/bin 下去启动。\n\nNEXUS_HOME: /opt/software/nexus3/nexus-3.39.0-01/\nPATH: %NEXUS_HOME%/bin\n\n\n1\n2\n\n\nnexus 默认使用的是 8081 端口，很多微服务的端口都会从 8080 等开始使用，可以修改 nexus 的端口，具体位置文件为 /opt/software/nexus3/nexus-3.39.0-01/etc/nexus-default.properties\n\n启动 nexus 命令\n\n./nexus {start|stop|run|run-redirect|status|restart|force-reload}\n\n# 提示信息\nWARNING: ************************************************************\nWARNING: Detected execution as "root" user.  This is NOT recommended!\nWARNING: ************************************************************\n\n# 这个信息需要修改 /opt/software/nexus3/nexus-3.39.0-01/bin/nexus 文件，找到 run_as_root=true，改为如下\nrun_as_root=false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n启动成功后就可以登录 nexus 所提供的客户端界面，登录的时候会问你要账号密码，账号默认是 admin，密码在 /opt/software/nexus3/sonatype-work/nexus3/admin.password 文件中，登录成功后会要求更改密码，密码更改后 admin.password 会自动删除。修改会会让你选择严格模式，建议允许所有人访问，毕竟是私服没太大必要严格。\n\n\n\n\n\n\n\n点击设置、点击仓库，我们可以看到仓库管理配置列表，其中跟 Maven 相关的有 4 个，Maven 相对有 3 个 Type\n\n * proxy，表示为代理仓库，下载组件时，如果代理仓库搜索不到，则把请求转发到远程仓库（默认 https://repo1.maven.org/maven2/，该地址可以修改），并从远程仓库下载，然后将该组件缓存到代理库，当再次请求该组件时，则直接到代理仓库下载，不会再从远程仓库下载。\n * hosted\n   表示宿主仓库，主要用来部署团队内部组件，其中 maven-releases 用来部署团队内部的发布版组件，maven-snapshots 用来部署团队内部的快照版组件。\n * group\n   表示分组仓库，默认将 maven-central、maven-releases、maven-snapshots 三个仓库组合在一起对外提供服务，简化了 maven 客户端在 setting.xml 或 pom.xml 的配置\n\n修改 maven-central 的 proxy 地址，你可以在列表中点击 maven-central，就会进到 maven-central 的编辑页，然后在 Remote storage 修改为阿里云的仓库点击保存即可。\n\nhttps://maven.aliyun.com/nexus/content/groups/public/\n\n\n1\n\n\n\n\nmaven 想使用我们自己搭建的 nexus，只需要在 maven-3.8.4\\conf\\settings.xml 文件修改镜像地址即可\n\n  <mirrors>\n\t\x3c!-- 阿里云 --\x3e\n\t\x3c!--\n    <mirror>\n      <id>alimaven</id>\n      <name>aliyun maven</name>\n      <url>https://maven.aliyun.com/nexus/content/groups/public/</url>\n      <mirrorOf>central</mirrorOf>\n    </mirror>\n\t--\x3e\n    <mirror>\n      <id>nexus</id>\n      <mirrorOf>*</mirrorOf>\n      <url>http://10.240.30.93:9527/repository/maven-public/</url>\n    </mirror>\n  </mirrors>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n> 按照以上的操作，我们只新启动一个项目，并在项目中指定该 maven，此时我们下载的 jar 就会缓存到 nexus 里，当其他同事使用该项目就会发现该项目的依赖下载为我们 nexus 的部署地址。\n\n但是这还不够，在实际开发中，除了我们本身使用的第三方依赖外，我们自己也会写一些依赖包或工具包等，此时若想让其他同事可以下载并依赖使用，我们就需要把我们制作的 jar 发布到 nexus 里去。我们先要在我们的 maven 的 settings.xml 中配置在 nexus 的账号密码\n\n  <servers>\n    <server>\n      \x3c!-- 注意id  nexus--\x3e\n      <id>nexus</id>\n      <username>admin</username>\n      <password>admin</password>\n    </server>\t\n  </servers>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n之后我们只需要创建我们的 jar 并添加一些配置即可，相应配置在代码中有说明\n\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>demoJar</artifactId>\n    \x3c!-- 后缀 SNAPSHOT 就会把 jar 发布到 nexus repository的 maven-snapshots --\x3e\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n    </properties>\n\n    \x3c!-- 配置 nexus --\x3e\n    <distributionManagement>\n        <repository>\n            \x3c!-- 这里的id邀约 setting.xml 配置的id相同 --\x3e\n            <id>nexus</id>\n            \x3c!-- 配置发布版的名称与路径 --\x3e\n            <name>Nexus Release Repository</name>\n            <url>>http://10.240.30.93:9527/repository/maven-releases/</url>\n        </repository>\n        <snapshotRepository>\n            <id>nexus</id>\n            <name>Nexus Snapshot Repository</name>\n            <url>http://10.240.30.93:9527/repository/maven-snapshots/</url>\n        </snapshotRepository>\n    </distributionManagement>\n\n</project>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n配置完成后，写好的你的工具类，然后对其进行 maven 包的发布\n\n\n\n\n\n\n\n然后让你的同事进行依赖引入，就可以调用你的方法了。\n\n        <dependency>\n            <groupId>org.example</groupId>\n            <artifactId>demoJar</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n\n\n> 相同版本的 jar 默认是不能重复发布到 nexus 中的，可以修改你要发布地址的配置，改为 Allow redeploy\n\n\n\n> 如果发现自己上传的包，确定无误后无法下载依赖，不管是自己还是别人，那么可能原因是 Maven 内置的插件远程仓库配置，关闭了对 SNAPSHOT 的支持，防止不稳定的构建。所以解决办法最关键的是：在 maven 的 conf 目录下的 setting.xml 文件中，添加 对 SNAPSHOT 的支持\n\n<snapshots>\n　　<enabled>true</enabled>\n</snapshots>\n\n\n1\n2\n3\n\n\n在你 maven setting.xml 里加，或者 pom.xml 里加都行\n\n    <profiles>\n        <profile>\n            <id>central-repo</id>\n            <repositories>\n                <repository>\n                    <id>central</id>\n                    <name>Central-repo</name>\n                    <url>http://******/central</url>\n                    <releases>\n                        <enabled>true</enabled>\n                    </releases>\n                    <snapshots>\n                        <enabled>true</enabled>\n                    </snapshots>\n                </repository>\n            </repositories>\n        </profile>\n    </profiles>\n \n    <activeProfiles>\n        <activeProfile>central-repo</activeProfile>\n    </activeProfiles>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n如果需要添加两个可以是\n\n    <profile>\n        <repositories>\n            <repository>\n                <releases>\n                    <enabled>true</enabled>\n                </releases>\n                <snapshots>\n                    <enabled>false</enabled>\n                </snapshots>\n                <id>releases</id>\n                <name>release</name>\n                <url>http://***********/maven-releases/</url>\n            </repository>\n            <repository>\n                <releases>\n                    <enabled>false</enabled>\n                </releases>\n                <snapshots>\n                    <enabled>true</enabled>\n                </snapshots>\n                <id>snapshots</id>\n                <name>libs-snapshot</name>\n                <url>http://***************/maven-snapshots/</url>\n            </repository>\n        </repositories>\n        <id>artifactory</id>\n    </profile>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n',normalizedContent:'下载地址 https://help.sonatype.com/repomanager3/product-information/download，下载好后进行解压缩会得到两个文件，nexus-3.39.0-01 和 sonatype-work。可以配置 nexus 变量到我们的环境中方便启动，也可以不配置每次都到 nexus-3.39.0-01/bin 下去启动。\n\nnexus_home: /opt/software/nexus3/nexus-3.39.0-01/\npath: %nexus_home%/bin\n\n\n1\n2\n\n\nnexus 默认使用的是 8081 端口，很多微服务的端口都会从 8080 等开始使用，可以修改 nexus 的端口，具体位置文件为 /opt/software/nexus3/nexus-3.39.0-01/etc/nexus-default.properties\n\n启动 nexus 命令\n\n./nexus {start|stop|run|run-redirect|status|restart|force-reload}\n\n# 提示信息\nwarning: ************************************************************\nwarning: detected execution as "root" user.  this is not recommended!\nwarning: ************************************************************\n\n# 这个信息需要修改 /opt/software/nexus3/nexus-3.39.0-01/bin/nexus 文件，找到 run_as_root=true，改为如下\nrun_as_root=false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n启动成功后就可以登录 nexus 所提供的客户端界面，登录的时候会问你要账号密码，账号默认是 admin，密码在 /opt/software/nexus3/sonatype-work/nexus3/admin.password 文件中，登录成功后会要求更改密码，密码更改后 admin.password 会自动删除。修改会会让你选择严格模式，建议允许所有人访问，毕竟是私服没太大必要严格。\n\n\n\n\n\n\n\n点击设置、点击仓库，我们可以看到仓库管理配置列表，其中跟 maven 相关的有 4 个，maven 相对有 3 个 type\n\n * proxy，表示为代理仓库，下载组件时，如果代理仓库搜索不到，则把请求转发到远程仓库（默认 https://repo1.maven.org/maven2/，该地址可以修改），并从远程仓库下载，然后将该组件缓存到代理库，当再次请求该组件时，则直接到代理仓库下载，不会再从远程仓库下载。\n * hosted\n   表示宿主仓库，主要用来部署团队内部组件，其中 maven-releases 用来部署团队内部的发布版组件，maven-snapshots 用来部署团队内部的快照版组件。\n * group\n   表示分组仓库，默认将 maven-central、maven-releases、maven-snapshots 三个仓库组合在一起对外提供服务，简化了 maven 客户端在 setting.xml 或 pom.xml 的配置\n\n修改 maven-central 的 proxy 地址，你可以在列表中点击 maven-central，就会进到 maven-central 的编辑页，然后在 remote storage 修改为阿里云的仓库点击保存即可。\n\nhttps://maven.aliyun.com/nexus/content/groups/public/\n\n\n1\n\n\n\n\nmaven 想使用我们自己搭建的 nexus，只需要在 maven-3.8.4\\conf\\settings.xml 文件修改镜像地址即可\n\n  <mirrors>\n\t\x3c!-- 阿里云 --\x3e\n\t\x3c!--\n    <mirror>\n      <id>alimaven</id>\n      <name>aliyun maven</name>\n      <url>https://maven.aliyun.com/nexus/content/groups/public/</url>\n      <mirrorof>central</mirrorof>\n    </mirror>\n\t--\x3e\n    <mirror>\n      <id>nexus</id>\n      <mirrorof>*</mirrorof>\n      <url>http://10.240.30.93:9527/repository/maven-public/</url>\n    </mirror>\n  </mirrors>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n> 按照以上的操作，我们只新启动一个项目，并在项目中指定该 maven，此时我们下载的 jar 就会缓存到 nexus 里，当其他同事使用该项目就会发现该项目的依赖下载为我们 nexus 的部署地址。\n\n但是这还不够，在实际开发中，除了我们本身使用的第三方依赖外，我们自己也会写一些依赖包或工具包等，此时若想让其他同事可以下载并依赖使用，我们就需要把我们制作的 jar 发布到 nexus 里去。我们先要在我们的 maven 的 settings.xml 中配置在 nexus 的账号密码\n\n  <servers>\n    <server>\n      \x3c!-- 注意id  nexus--\x3e\n      <id>nexus</id>\n      <username>admin</username>\n      <password>admin</password>\n    </server>\t\n  </servers>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n之后我们只需要创建我们的 jar 并添加一些配置即可，相应配置在代码中有说明\n\n<?xml version="1.0" encoding="utf-8"?>\n<project xmlns="http://maven.apache.org/pom/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n         xsi:schemalocation="http://maven.apache.org/pom/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelversion>4.0.0</modelversion>\n\n    <groupid>org.example</groupid>\n    <artifactid>demojar</artifactid>\n    \x3c!-- 后缀 snapshot 就会把 jar 发布到 nexus repository的 maven-snapshots --\x3e\n    <version>1.0-snapshot</version>\n\n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n    </properties>\n\n    \x3c!-- 配置 nexus --\x3e\n    <distributionmanagement>\n        <repository>\n            \x3c!-- 这里的id邀约 setting.xml 配置的id相同 --\x3e\n            <id>nexus</id>\n            \x3c!-- 配置发布版的名称与路径 --\x3e\n            <name>nexus release repository</name>\n            <url>>http://10.240.30.93:9527/repository/maven-releases/</url>\n        </repository>\n        <snapshotrepository>\n            <id>nexus</id>\n            <name>nexus snapshot repository</name>\n            <url>http://10.240.30.93:9527/repository/maven-snapshots/</url>\n        </snapshotrepository>\n    </distributionmanagement>\n\n</project>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n配置完成后，写好的你的工具类，然后对其进行 maven 包的发布\n\n\n\n\n\n\n\n然后让你的同事进行依赖引入，就可以调用你的方法了。\n\n        <dependency>\n            <groupid>org.example</groupid>\n            <artifactid>demojar</artifactid>\n            <version>1.0-snapshot</version>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n\n\n> 相同版本的 jar 默认是不能重复发布到 nexus 中的，可以修改你要发布地址的配置，改为 allow redeploy\n\n\n\n> 如果发现自己上传的包，确定无误后无法下载依赖，不管是自己还是别人，那么可能原因是 maven 内置的插件远程仓库配置，关闭了对 snapshot 的支持，防止不稳定的构建。所以解决办法最关键的是：在 maven 的 conf 目录下的 setting.xml 文件中，添加 对 snapshot 的支持\n\n<snapshots>\n　　<enabled>true</enabled>\n</snapshots>\n\n\n1\n2\n3\n\n\n在你 maven setting.xml 里加，或者 pom.xml 里加都行\n\n    <profiles>\n        <profile>\n            <id>central-repo</id>\n            <repositories>\n                <repository>\n                    <id>central</id>\n                    <name>central-repo</name>\n                    <url>http://******/central</url>\n                    <releases>\n                        <enabled>true</enabled>\n                    </releases>\n                    <snapshots>\n                        <enabled>true</enabled>\n                    </snapshots>\n                </repository>\n            </repositories>\n        </profile>\n    </profiles>\n \n    <activeprofiles>\n        <activeprofile>central-repo</activeprofile>\n    </activeprofiles>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n如果需要添加两个可以是\n\n    <profile>\n        <repositories>\n            <repository>\n                <releases>\n                    <enabled>true</enabled>\n                </releases>\n                <snapshots>\n                    <enabled>false</enabled>\n                </snapshots>\n                <id>releases</id>\n                <name>release</name>\n                <url>http://***********/maven-releases/</url>\n            </repository>\n            <repository>\n                <releases>\n                    <enabled>false</enabled>\n                </releases>\n                <snapshots>\n                    <enabled>true</enabled>\n                </snapshots>\n                <id>snapshots</id>\n                <name>libs-snapshot</name>\n                <url>http://***************/maven-snapshots/</url>\n            </repository>\n        </repositories>\n        <id>artifactory</id>\n    </profile>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n',charsets:{cjk:!0}},{title:"核心功能拆解 工作流程",frontmatter:{title:"核心功能拆解 工作流程",date:"2023-06-25T09:22:36.000Z",permalink:"/mybatis/300/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/30.Mybatis/300.%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E6%8B%86%E8%A7%A3%20%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.html",relativePath:"00.java/30.Mybatis/300.核心功能拆解 工作流程.md",key:"v-18fc13e0",path:"/mybatis/300/",headers:[{level:2,title:"解析",slug:"解析",normalizedTitle:"解析",charIndex:296},{level:3,title:"加载&解析XML",slug:"加载-解析xml",normalizedTitle:"加载 &amp; 解析 xml",charIndex:null},{level:4,title:"Configuration 初始化配置",slug:"configuration-初始化配置",normalizedTitle:"configuration 初始化配置",charIndex:2010},{level:4,title:"environments 环境解析",slug:"environments-环境解析",normalizedTitle:"environments 环境解析",charIndex:3821},{level:4,title:"mapper 解析",slug:"mapper-解析",normalizedTitle:"mapper 解析",charIndex:4351},{level:4,title:"plugins 插件解析",slug:"plugins-插件解析",normalizedTitle:"plugins 插件解析",charIndex:6323},{level:4,title:"settings 设置解析",slug:"settings-设置解析",normalizedTitle:"settings 设置解析",charIndex:6339},{level:2,title:"准备",slug:"准备",normalizedTitle:"准备",charIndex:299},{level:2,title:"执行",slug:"执行",normalizedTitle:"执行",charIndex:302}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"解析 加载&解析XML Configuration 初始化配置 environments 环境解析 mapper 解析 plugins 插件解析 settings 设置解析 准备 执行",content:'MyBatis 是一个 Java 的 ORM 框架，它使用 XML 或注解来配置和映射 SQL 语句，同时提供了增删改查等常用操作的 API。Mybatis 还提供了许多高级映射和查询功能，例如延迟加载、缓存和批量操作，这使得开发人员可以轻松地编写出高性能、可维护的数据访问层。\n\n关于 MyBatis 我们主要要了解他的工作流程，特性，和部分重要的知识点，就像 Spring，我们主要是了解他的生命周期，可扩展项等，所谓生命周期，也是 Spring 的工作流程。\n\n以下是整个 MyBatis 的工作流程图，对应图中会讲解每个节点重要的知识点。这里要记住 MyBatis 主要的工作模式就是解析、准备和执行，所谓解析就是得到 XML 的信息，维护到一个叫 Configuration 的配置类中；准备就是 opensession 部分，他会得到 Configuration 中的信息，根据执行部分所使用的执行器，数据源，事务等进行实例化和关系映射；使用就是当我们去进行查询或新增等操作，从资源和信息中拿取已被缓存的对象或执行器等，执行对应的方法。\n\n\n# 解析\n\n解析部分对应图中 加载&解析XML 至 XMLConfigBuilder#mapperElement 这里，可以说是读取 XML 到维护各类对象关系和信息的核心。下面我们分解讲解每个步骤都做了哪些事情以及核心部分解析得到了什么。\n\n\n# 加载 & 解析 XML\n\n这部分主要是读取 mybatis-config-datasource.xml 文件，该文件主要维护了一些公共资源信息，包括环境信息（数据库连接信息），对应的 mapper 文件信息，设置信息等。\n\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-config.dtd">\n<configuration>\n    \x3c!-- 设置信息 --\x3e\n    <settings>\n        \x3c!-- 全局缓存：true/false 管理一级缓存和二级缓存的是否使用 --\x3e\n        <setting name="cacheEnabled" value="true"/>\n        \x3c!--缓存级别：SESSION/STATEMENT--\x3e\n        <setting name="localCacheScope" value="STATEMENT"/>\n    </settings>\n    \x3c!-- 环境信息 --\x3e\n    <environments default="development">\n        <environment id="development">\n            <transactionManager type="JDBC"/>\n            <dataSource type="POOLED">\n                <property name="driver" value="com.mysql.jdbc.Driver"/>\n                <property name="url" value="jdbc:mysql://10.240.30.93:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false"/>\n                <property name="username" value="root"/>\n                <property name="password" value="Dev@root2021"/>\n            </dataSource>\n        </environment>\n    </environments>\n    \x3c!-- 维护所有mapper --\x3e\n    <mappers>\n        \x3c!-- XML 配置 --\x3e\n        <mapper resource="mapper/Activity_Mapper.xml"/>\n    </mappers>\n</configuration>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n读取到文件后调用 XMLConfigBuilder#parse 进行解析，解析内容如下。\n\n# Configuration 初始化配置\n\n在整个文件解析之前，MyBatis 会先把一些信息进行提前初始化，也就是上图中 new Configuration（） 阶段，该类最终会被多个 MyBatis 的类所引用并贯穿整个 MyBatis 工作流程，由于被引用的类太多，这里就不一一列举，我们只要知道他贯穿整个流程即可。\n\n\n\nConfiguration 被初始化时包含了大量的信息，这些信息就是在解析 xml 文件时维护的，逐一讲解下每个配置的具体作用：\n\n * environment：缓存了环境 ID（可设置默认环境，环境包括：开发环境、测试环境等），事务工厂，数据源（有池或无池或其他连接池）等\n * mapperRegistry：映射注册机，缓存每个接口（ 接口对象Class做为key ）所对应的 MapperProxyFactory ，提供添加映射代理类和获取代理类\n * mappedStatements：缓存 SQL 语句的拆解信息。XML 的 namespace.标签ID做为（key） ，value 为 MappedStatement，信息包括： mapper路径 ， SQL类型（SELECT|INSERT等） ， SQL语句 ， 条件 ， 该条语句的缓存信息 ， 返回结果对象 ， 是否缓存标志 等。\n * resultMaps：缓存 resultMap 标签的拆解信息。XML 的 namespace.resultMap做为（key） ，然后对应 value 存放 SQL字段，映射对象字段，字段JAVA数据类型，类型对应的执行器 等\n * interceptorChain：缓存 plugins 标签的拆解信息。会在执行 newParameterHandler，newResultSetHandler，newStatementHandler，newExecutor 进行拦截。\n * typeAliasRegistry：缓存了每个 java 基本类型的封装类，以及 JdbcTransactionFactory，DruidDataSourceFactory，UnpooledDataSourceFactory，PooledDataSourceFactory，PerpetualCache，FifoCache 等 Mybatis 提供的已知类，用于快速解析 XML 描述的值，便于快速得到 Class 信息并获取实例。\n * typeHandlerRegistry：存放对应数据类型的处理策略，比如 JAVA 类型，对应 SQL 类型的处理策略，或 JAVA 类型对应的处理策略。用于设置 SQL 语句参数和获取查询结果的数据类型转换策略。\n * objectFactory：对象工厂，用于创建对象实例，使用反射。\n * objectWrapperFactory：对象包装器，放着，被解析对象的实例，以及对应的 set，get，构造器，类型等信息。 objectFactory 与 objectWrapperFactory 是为 MetaObject 提供支持的，以解析对象信息进行，然后获取对象某个特定属性的数据，缓存是为了加快获取速度，如果属性也是一个对象则会递归缓存，获取值也会递归获取。\n * loadedResources：存放已被加载的 mapper.xml 文件，以防止重复加载\n * languageRegistry：存放默认的语言解析驱动器，比如存放了 XMLLanguageDriver ，提供快速获取这个解析器，然后提供 SQL 解析。\n * cacheEnabled：解析是否启用缓存，该配置对于二级缓存生效，一次缓存是默认缓存。\n * localCacheScope：一级缓存，缓存策略默认是永久缓存，缓存方式分为 SESSION 和 STATEMENT ， SESSION 在该会话中命中相同 sql 语句和条件，若在该 SESSION 中发生 insert/update/delete/commit/rollback/close 则会清除缓存，但是，并不会影响其它会话中的缓存； STATEMENT ，只针对当前会话执行的这一语句有效，执行完毕查询会立即清除缓存。\n * caches：二级缓存，基于 namespace 的缓存，可提供第三方其他方式实现。\n\n# environments 环境解析\n\n在环境解析过程中会得到下面几个重要的属性：\n\n * ID：表明使用哪一个环境做为主要环境配置，解析 XML 中的 <environment > 标签\n * TransactionFactory：解析 XML 中的 <transactionManager> 的 type 属性，如果是 JDBC 则就是 JdbcTransactionFactory ，也可以自行设置，需要自己注册到 typeAliasRegistry 中\n * DataSourceFactory：解析 XML 中 <dataSource> 的 type 属性，如果是 POOLED ，则对应 PooledDataSourceFactory ， UNPOOLED 对应 UnpooledDataSourceFactory ， DRUID 对应 DruidDataSourceFactory\n * DataSource：解析 XML 中 <property> 得到具体的连接信息，从 DataSourceFactory 中获取 DataSource\n\n当以上的信息组件完毕后会封装到 Environment 中，然后添加到 configuration\n\n# mapper 解析\n\n在 mapper 解析中有两种不同的解析，一个是我们常见的 XML 解析，一种是注解，如 @select，这里只讲 XML 解析，有关 @select 等注解解析，放在后续专开一章。那解析首先会读取所到所有的 mapper，在分别解析每个 mapper\n\n    <mappers>\n        \x3c!-- XML 配置 --\x3e\n        <mapper resource="mapper/Activity_Mapper.xml"/>\n    </mappers>\n\n\n1\n2\n3\n4\n\n\n一个完整的 Mapper 大致包含如下信息，所以内部会有多个解析分别解析，如 cache 解析，resultMap 解析，select 解析，insert 解析等，我们这里说下重要的解析对象和作用即可。\n\n<mapper namespace="cn.bugstack.mybatis.test.dao.IActivityDao">\n    <cache eviction="FIFO" flushInterval="600000" size="512" readOnly="true"/>\n    <resultMap id="activityMap" type="cn.bugstack.mybatis.test.po.Activity">\n        <id column="id" property="id"/>\n        <result column="activity_id" property="activityId"/>\n        <result column="activity_name" property="activityName"/>\n        <result column="activity_desc" property="activityDesc"/>\n        <result column="create_time" property="createTime"/>\n        <result column="update_time" property="updateTime"/>\n    </resultMap>\n    <select id="queryActivityById" parameterType="cn.bugstack.mybatis.test.po.Activity" resultMap="activityMap" flushCache="false" useCache="true">\n        SELECT activity_id, activity_name, activity_desc, create_time, update_time\n        FROM activity\n        <trim prefix="where" prefixOverrides="AND | OR" suffixOverrides="and">\n            <if test="null != activityId">\n                activity_id = #{activityId}\n            </if>\n        </trim>\n    </select>\n</mapper>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n<cache > 标签配置于二级缓存，对于缓存也会有单独的一章讲解，这里只讲解析得到的重要类及作用，通过标签会封装一个 Cache 对象，该对象以 namespace 做为 cache 的 Id ，并把 Cache 对象添加到 configuration 中\n\n<resultMap> 标签配置一个 <select > 标签的 resultMap 属性返回结果对象的关系映射，他会得到对象以及得到描述的各 java 属性类型和对应的 TypeHandler 类型处理器，在返回的时候使用类型处理器，处理查询返回结果的数据类型对应 java 的映射。 <resultMap> 标签可以有多个，所以会添加到集合中，然后维护到 configuration 中\n\n<select> or <insert> 这里最主要的部分就是在解析完成后会把 namespace.id 做为 key ，把解析的信息 MappedStatement 做为 value ，维护到 configuration 中，以便 Mybatis 在被代理类调用方法的时候快速找到，该方法对应的 SQL 信息等\n\n# plugins 插件解析\n\n# settings 设置解析\n\n\n# 准备\n\n\n# 执行',normalizedContent:'mybatis 是一个 java 的 orm 框架，它使用 xml 或注解来配置和映射 sql 语句，同时提供了增删改查等常用操作的 api。mybatis 还提供了许多高级映射和查询功能，例如延迟加载、缓存和批量操作，这使得开发人员可以轻松地编写出高性能、可维护的数据访问层。\n\n关于 mybatis 我们主要要了解他的工作流程，特性，和部分重要的知识点，就像 spring，我们主要是了解他的生命周期，可扩展项等，所谓生命周期，也是 spring 的工作流程。\n\n以下是整个 mybatis 的工作流程图，对应图中会讲解每个节点重要的知识点。这里要记住 mybatis 主要的工作模式就是解析、准备和执行，所谓解析就是得到 xml 的信息，维护到一个叫 configuration 的配置类中；准备就是 opensession 部分，他会得到 configuration 中的信息，根据执行部分所使用的执行器，数据源，事务等进行实例化和关系映射；使用就是当我们去进行查询或新增等操作，从资源和信息中拿取已被缓存的对象或执行器等，执行对应的方法。\n\n\n# 解析\n\n解析部分对应图中 加载&解析xml 至 xmlconfigbuilder#mapperelement 这里，可以说是读取 xml 到维护各类对象关系和信息的核心。下面我们分解讲解每个步骤都做了哪些事情以及核心部分解析得到了什么。\n\n\n# 加载 & 解析 xml\n\n这部分主要是读取 mybatis-config-datasource.xml 文件，该文件主要维护了一些公共资源信息，包括环境信息（数据库连接信息），对应的 mapper 文件信息，设置信息等。\n\n<?xml version="1.0" encoding="utf-8"?>\n<!doctype configuration public "-//mybatis.org//dtd config 3.0//en"\n        "http://mybatis.org/dtd/mybatis-3-config.dtd">\n<configuration>\n    \x3c!-- 设置信息 --\x3e\n    <settings>\n        \x3c!-- 全局缓存：true/false 管理一级缓存和二级缓存的是否使用 --\x3e\n        <setting name="cacheenabled" value="true"/>\n        \x3c!--缓存级别：session/statement--\x3e\n        <setting name="localcachescope" value="statement"/>\n    </settings>\n    \x3c!-- 环境信息 --\x3e\n    <environments default="development">\n        <environment id="development">\n            <transactionmanager type="jdbc"/>\n            <datasource type="pooled">\n                <property name="driver" value="com.mysql.jdbc.driver"/>\n                <property name="url" value="jdbc:mysql://10.240.30.93:3306/test?useunicode=true&amp;characterencoding=utf8&amp;usessl=false"/>\n                <property name="username" value="root"/>\n                <property name="password" value="dev@root2021"/>\n            </datasource>\n        </environment>\n    </environments>\n    \x3c!-- 维护所有mapper --\x3e\n    <mappers>\n        \x3c!-- xml 配置 --\x3e\n        <mapper resource="mapper/activity_mapper.xml"/>\n    </mappers>\n</configuration>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n读取到文件后调用 xmlconfigbuilder#parse 进行解析，解析内容如下。\n\n# configuration 初始化配置\n\n在整个文件解析之前，mybatis 会先把一些信息进行提前初始化，也就是上图中 new configuration（） 阶段，该类最终会被多个 mybatis 的类所引用并贯穿整个 mybatis 工作流程，由于被引用的类太多，这里就不一一列举，我们只要知道他贯穿整个流程即可。\n\n\n\nconfiguration 被初始化时包含了大量的信息，这些信息就是在解析 xml 文件时维护的，逐一讲解下每个配置的具体作用：\n\n * environment：缓存了环境 id（可设置默认环境，环境包括：开发环境、测试环境等），事务工厂，数据源（有池或无池或其他连接池）等\n * mapperregistry：映射注册机，缓存每个接口（ 接口对象class做为key ）所对应的 mapperproxyfactory ，提供添加映射代理类和获取代理类\n * mappedstatements：缓存 sql 语句的拆解信息。xml 的 namespace.标签id做为（key） ，value 为 mappedstatement，信息包括： mapper路径 ， sql类型（select|insert等） ， sql语句 ， 条件 ， 该条语句的缓存信息 ， 返回结果对象 ， 是否缓存标志 等。\n * resultmaps：缓存 resultmap 标签的拆解信息。xml 的 namespace.resultmap做为（key） ，然后对应 value 存放 sql字段，映射对象字段，字段java数据类型，类型对应的执行器 等\n * interceptorchain：缓存 plugins 标签的拆解信息。会在执行 newparameterhandler，newresultsethandler，newstatementhandler，newexecutor 进行拦截。\n * typealiasregistry：缓存了每个 java 基本类型的封装类，以及 jdbctransactionfactory，druiddatasourcefactory，unpooleddatasourcefactory，pooleddatasourcefactory，perpetualcache，fifocache 等 mybatis 提供的已知类，用于快速解析 xml 描述的值，便于快速得到 class 信息并获取实例。\n * typehandlerregistry：存放对应数据类型的处理策略，比如 java 类型，对应 sql 类型的处理策略，或 java 类型对应的处理策略。用于设置 sql 语句参数和获取查询结果的数据类型转换策略。\n * objectfactory：对象工厂，用于创建对象实例，使用反射。\n * objectwrapperfactory：对象包装器，放着，被解析对象的实例，以及对应的 set，get，构造器，类型等信息。 objectfactory 与 objectwrapperfactory 是为 metaobject 提供支持的，以解析对象信息进行，然后获取对象某个特定属性的数据，缓存是为了加快获取速度，如果属性也是一个对象则会递归缓存，获取值也会递归获取。\n * loadedresources：存放已被加载的 mapper.xml 文件，以防止重复加载\n * languageregistry：存放默认的语言解析驱动器，比如存放了 xmllanguagedriver ，提供快速获取这个解析器，然后提供 sql 解析。\n * cacheenabled：解析是否启用缓存，该配置对于二级缓存生效，一次缓存是默认缓存。\n * localcachescope：一级缓存，缓存策略默认是永久缓存，缓存方式分为 session 和 statement ， session 在该会话中命中相同 sql 语句和条件，若在该 session 中发生 insert/update/delete/commit/rollback/close 则会清除缓存，但是，并不会影响其它会话中的缓存； statement ，只针对当前会话执行的这一语句有效，执行完毕查询会立即清除缓存。\n * caches：二级缓存，基于 namespace 的缓存，可提供第三方其他方式实现。\n\n# environments 环境解析\n\n在环境解析过程中会得到下面几个重要的属性：\n\n * id：表明使用哪一个环境做为主要环境配置，解析 xml 中的 <environment > 标签\n * transactionfactory：解析 xml 中的 <transactionmanager> 的 type 属性，如果是 jdbc 则就是 jdbctransactionfactory ，也可以自行设置，需要自己注册到 typealiasregistry 中\n * datasourcefactory：解析 xml 中 <datasource> 的 type 属性，如果是 pooled ，则对应 pooleddatasourcefactory ， unpooled 对应 unpooleddatasourcefactory ， druid 对应 druiddatasourcefactory\n * datasource：解析 xml 中 <property> 得到具体的连接信息，从 datasourcefactory 中获取 datasource\n\n当以上的信息组件完毕后会封装到 environment 中，然后添加到 configuration\n\n# mapper 解析\n\n在 mapper 解析中有两种不同的解析，一个是我们常见的 xml 解析，一种是注解，如 @select，这里只讲 xml 解析，有关 @select 等注解解析，放在后续专开一章。那解析首先会读取所到所有的 mapper，在分别解析每个 mapper\n\n    <mappers>\n        \x3c!-- xml 配置 --\x3e\n        <mapper resource="mapper/activity_mapper.xml"/>\n    </mappers>\n\n\n1\n2\n3\n4\n\n\n一个完整的 mapper 大致包含如下信息，所以内部会有多个解析分别解析，如 cache 解析，resultmap 解析，select 解析，insert 解析等，我们这里说下重要的解析对象和作用即可。\n\n<mapper namespace="cn.bugstack.mybatis.test.dao.iactivitydao">\n    <cache eviction="fifo" flushinterval="600000" size="512" readonly="true"/>\n    <resultmap id="activitymap" type="cn.bugstack.mybatis.test.po.activity">\n        <id column="id" property="id"/>\n        <result column="activity_id" property="activityid"/>\n        <result column="activity_name" property="activityname"/>\n        <result column="activity_desc" property="activitydesc"/>\n        <result column="create_time" property="createtime"/>\n        <result column="update_time" property="updatetime"/>\n    </resultmap>\n    <select id="queryactivitybyid" parametertype="cn.bugstack.mybatis.test.po.activity" resultmap="activitymap" flushcache="false" usecache="true">\n        select activity_id, activity_name, activity_desc, create_time, update_time\n        from activity\n        <trim prefix="where" prefixoverrides="and | or" suffixoverrides="and">\n            <if test="null != activityid">\n                activity_id = #{activityid}\n            </if>\n        </trim>\n    </select>\n</mapper>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n<cache > 标签配置于二级缓存，对于缓存也会有单独的一章讲解，这里只讲解析得到的重要类及作用，通过标签会封装一个 cache 对象，该对象以 namespace 做为 cache 的 id ，并把 cache 对象添加到 configuration 中\n\n<resultmap> 标签配置一个 <select > 标签的 resultmap 属性返回结果对象的关系映射，他会得到对象以及得到描述的各 java 属性类型和对应的 typehandler 类型处理器，在返回的时候使用类型处理器，处理查询返回结果的数据类型对应 java 的映射。 <resultmap> 标签可以有多个，所以会添加到集合中，然后维护到 configuration 中\n\n<select> or <insert> 这里最主要的部分就是在解析完成后会把 namespace.id 做为 key ，把解析的信息 mappedstatement 做为 value ，维护到 configuration 中，以便 mybatis 在被代理类调用方法的时候快速找到，该方法对应的 sql 信息等\n\n# plugins 插件解析\n\n# settings 设置解析\n\n\n# 准备\n\n\n# 执行',charsets:{cjk:!0}},{title:"核心功能拆解 Plugin插件功能实现",frontmatter:{title:"核心功能拆解 Plugin插件功能实现",date:"2023-06-25T09:22:36.000Z",permalink:"/mybatis/301/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/30.Mybatis/301.%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E6%8B%86%E8%A7%A3%20Plugin%E6%8F%92%E4%BB%B6%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0.html",relativePath:"00.java/30.Mybatis/301.核心功能拆解 Plugin插件功能实现.md",key:"v-04bb8b53",path:"/mybatis/301/",headers:[{level:2,title:"解析",slug:"解析",normalizedTitle:"解析",charIndex:38},{level:2,title:"注册",slug:"注册",normalizedTitle:"注册",charIndex:42},{level:2,title:"执行",slug:"执行",normalizedTitle:"执行",charIndex:46},{level:2,title:"自定义",slug:"自定义",normalizedTitle:"自定义",charIndex:5721}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"解析 注册 执行 自定义",content:'Mybatis Plugin 是随着 Mybatis 的工作流程一起被进行 解析->注册->执行 的，了解每个步骤才能更好的对 Mybatis 所提供的 Plugin 机制进行实现和扩展。在我们已知的 Mybatis 的插件有分页插件、缓存插件等，之所以可以能做到扩展是因为他在自己本身的 Executor（生产执行器） ， StatementHandler（语句处理器） ， ParameterHandler（参数处理器） ， ResultSetHandler（结果集处理器） 这四个地方做了拦截，当介绍到执行步骤的时候就可以看到具体实现。\n\n\n# 解析\n\n常规的 XML 配置\n\n<plugins>\n    <plugin interceptor="cn.mybatis.test.plugin.TestPlugin">\n        <property name="test00" value="100"/>\n        <property name="test01" value="200"/>\n    </plugin>\n</plugins>\n\n\n1\n2\n3\n4\n5\n6\n\n\n核心解析方法\n\nprivate void pluginElement(Element parent) throws Exception {\n    if (parent == null) return;\n    List<Element> elements = parent.elements();\n    for (Element element : elements) {\n        // 解析类路径\n        String interceptor = element.attributeValue("interceptor");\n        // 参数配置\n        Properties properties = new Properties();\n        List<Element> propertyElementList = element.elements("property");\n        for (Element property : propertyElementList) {\n            properties.setProperty(property.attributeValue("name"), property.attributeValue("value"));\n        }\n        // 获取插件实现类并实例化：cn.mybatis.test.plugin.TestPlugin \n        // 通过 Resources.classForName(string) 获取实例\n        Interceptor interceptorInstance = (Interceptor) resolveClass(interceptor).newInstance();\n        // 设置配置属性\n        interceptorInstance.setProperties(properties);\n        // 注册到 configuration 中\n        configuration.addInterceptor(interceptorInstance);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 注册\n\n解析的时候会在方法内部执行 configuration.addInterceptor(interceptorInstance); 这一步是把插件维护到 Configuration 全局配置中，但插件其实应该有很多各，所以提供的是一个 InterceptorChain 对象由 Configuration 维护\n\npublic class Configuration {\n    // 插件拦截器链\n    protected final InterceptorChain interceptorChain = new InterceptorChain();\n    public void addInterceptor(Interceptor interceptorInstance) {\n        interceptorChain.addInterceptor(interceptorInstance);\n    }\n    // other 其他配置\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nInterceptorChain 里面维护的是一个集合，专门存放所有的 Plugin\n\npublic class InterceptorChain {\n    // 插件拦截器容器\n    private final List<Interceptor> interceptors = new ArrayList<>();\n    //\n    public Object pluginAll(Object target) {\n        for (Interceptor interceptor : interceptors) {\n            target = interceptor.plugin(target);\n        }\n        return target;\n    }\n    // 添加到插件容器\n    public void addInterceptor(Interceptor interceptor) {\n        interceptors.add(interceptor);\n    }\n    public List<Interceptor> getInterceptors(){\n        return Collections.unmodifiableList(interceptors);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n从解析到注册这两步就可以看出，MyBatis 是把插件以拦截器的形式存放到一个拦截器容器里，这个容器是 Configuration 全局配置类来进行维护的\n\n\n# 执行\n\n执行是在调用具体的查询方法活其他在 Mybatis 里所描述的 SQL 方法时进行的触发，触发会在如下代码中的位置中触发。\n\n  // 创建参数处理器\n  public ParameterHandler newParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {\n    ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);\n    parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);\n    return parameterHandler;\n  }\n \n  // 创建结果集处理器\n  public ResultSetHandler newResultSetHandler(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,\n      ResultHandler resultHandler, BoundSql boundSql) {\n    ResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);\n    resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);\n    return resultSetHandler;\n  }\n \n  // 创建语句处理器\n  public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {\n    StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);\n    statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);\n    return statementHandler;\n  }\n\n  // 生产执行器\n  public Executor newExecutor(Transaction transaction, ExecutorType executorType) {\n    executorType = executorType == null ? defaultExecutorType : executorType;\n    executorType = executorType == null ? ExecutorType.SIMPLE : executorType;\n    Executor executor;\n    if (ExecutorType.BATCH == executorType) {\n      // 批量处理器\n      executor = new BatchExecutor(this, transaction);\n    } else if (ExecutorType.REUSE == executorType) {\n      executor = new ReuseExecutor(this, transaction);\n    } else {\n      // 简单处理器\n      executor = new SimpleExecutor(this, transaction);\n    }\n    // 二级缓存处理器\n    if (cacheEnabled) {\n      executor = new CachingExecutor(executor);\n    }\n    executor = (Executor) interceptorChain.pluginAll(executor);\n    return executor;\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n会看到他会调用 InterceptorChain#pluginAll 方法，该类在注册步骤中有提及到，里面维护了所有的插件，那么在这里就会时循环所有的插件，每个插件调用 Interceptor#plugin\n\n// 循环调用\npublic Object pluginAll(Object target) {\n    for (Interceptor interceptor : interceptors) {\n        target = interceptor.plugin(target);\n    }\n    return target;\n}\n\n// 执行wrap\npublic interface Interceptor {\n    // 拦截，使用方实现\n    Object intercept(Invocation invocation) throws Throwable;\n    // 代理\n    default Object plugin(Object target) {\n        return Plugin.wrap(target, this);\n    }\n    // 设置属性\n    default void setProperties(Properties properties) {\n        // NOP\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\nInterceptor#plugin 方法内部也就是调用 Plugin#wrap 静态方法，该方法通过获取自定义插件的注解，来观察你需要对哪个处理器，哪个方法以及参数类型去匹配拦截对象的具体方法，如果多一个参数都可能找不到要拦截的方法。找到方法后然后去动态代理这个方法。\n\n// \npublic class Plugin implements InvocationHandler {\n    private Object target;\n    private Interceptor interceptor;\n    private Map<Class<?>, Set<Method>> signatureMap;\n\n    private Plugin(Object target, Interceptor interceptor, Map<Class<?>, Set<Method>> signatureMap) {\n        this.target = target;\n        this.interceptor = interceptor;\n        this.signatureMap = signatureMap;\n    }\n    // 具体的代理实现\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        // 获取声明的方法列表\n        Set<Method> methods = signatureMap.get(method.getDeclaringClass());\n        // 过滤需要拦截的方法\n        if (methods != null && methods.contains(method)) {\n            // 调用 Interceptor#intercept 插入自己的反射逻辑\n            return interceptor.intercept(new Invocation(target, method, args));\n        }\n        return method.invoke(target, args);\n    }\n    /**\n     * 用代理把自定义插件行为包裹到目标方法中，也就是 Plugin.invoke 的过滤调用\n     */\n    public static Object wrap(Object target, Interceptor interceptor) {\n        // 取得签名Map\n        Map<Class<?>, Set<Method>> signatureMap = getSignatureMap(interceptor);\n        // 取得要改变行为的类(ParameterHandler|ResultSetHandler|StatementHandler|Executor)\n        Class<?> type = target.getClass();\n        // 取得接口\n        Class<?>[] interfaces = getAllInterfaces(type, signatureMap);\n        // 创建代理(StatementHandler)\n        if (interfaces.length > 0) {\n            // 代理\n            return Proxy.newProxyInstance(\n                    type.getClassLoader(),\n                    interfaces,\n                    new Plugin(target, interceptor, signatureMap));\n        }\n        return target;\n    }\n    /**\n     * 获取方法签名组 Map\n     */\n    private static Map<Class<?>, Set<Method>> getSignatureMap(Interceptor interceptor) {\n        // 取 Intercepts 注解\n        Intercepts interceptsAnnotation = interceptor.getClass().getAnnotation(Intercepts.class);\n        // 必须得有 Intercepts 注解，没有报错\n        if (interceptsAnnotation == null) {\n            throw new RuntimeException("No @Intercepts annotation was found in interceptor " + interceptor.getClass().getName());\n        }\n        // value是数组型，Signature的数组\n        Signature[] sigs = interceptsAnnotation.value();\n        // 每个 class 类有多个可能有多个 Method 需要被拦截\n        Map<Class<?>, Set<Method>> signatureMap = new HashMap<>();\n        for (Signature sig : sigs) {\n            Set<Method> methods = signatureMap.computeIfAbsent(sig.type(), k -> new HashSet<>());\n            try {\n                // 例如获取到方法；StatementHandler.prepare(Connection connection)、StatementHandler.parameterize(Statement statement)...\n                Method method = sig.type().getMethod(sig.method(), sig.args());\n                methods.add(method);\n            } catch (NoSuchMethodException e) {\n                throw new RuntimeException("Could not find method on " + sig.type() + " named " + sig.method() + ". Cause: " + e, e);\n            }\n        }\n        return signatureMap;\n    }\n    /**\n     * 取得接口\n     */\n    private static Class<?>[] getAllInterfaces(Class<?> type, Map<Class<?>, Set<Method>> signatureMap) {\n        Set<Class<?>> interfaces = new HashSet<Class<?>>();\n        while (type != null) {\n            for (Class<?> c : type.getInterfaces()) {\n                // 拦截 ParameterHandler|ResultSetHandler|StatementHandler|Executor\n                if (signatureMap.containsKey(c)) {\n                    interfaces.add(c);\n                }\n            }\n            type = type.getSuperclass();\n        }\n        return interfaces.toArray(new Class<?>[interfaces.size()]);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n\n\n\n# 自定义\n\npackage cn.mybatis.test.plugin;\n\nimport cn.mybatis.executor.statement.StatementHandler;\nimport cn.mybatis.mapping.BoundSql;\nimport cn..mybatis.plugin.Interceptor;\nimport cn.mybatis.plugin.Intercepts;\nimport cn.mybatis.plugin.Invocation;\nimport cn.mybatis.plugin.Signature;\n\nimport java.sql.Connection;\nimport java.util.Properties;\n\n@Intercepts({@Signature(type = StatementHandler.class, method = "prepare", args = {Connection.class})})\npublic class TestPlugin implements Interceptor {\n\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n        // 获取StatementHandler\n        StatementHandler statementHandler = (StatementHandler) invocation.getTarget();\n        // 获取SQL信息\n        BoundSql boundSql = statementHandler.getBoundSql();\n        String sql = boundSql.getSql();\n        // 输出SQL\n        System.out.println("拦截SQL：" + sql);\n        // 放行\n        return invocation.proceed();\n    }\n\n    @Override\n    public void setProperties(Properties properties) {\n        System.out.println("参数输出：" + properties.getProperty("test00"));\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n',normalizedContent:'mybatis plugin 是随着 mybatis 的工作流程一起被进行 解析->注册->执行 的，了解每个步骤才能更好的对 mybatis 所提供的 plugin 机制进行实现和扩展。在我们已知的 mybatis 的插件有分页插件、缓存插件等，之所以可以能做到扩展是因为他在自己本身的 executor（生产执行器） ， statementhandler（语句处理器） ， parameterhandler（参数处理器） ， resultsethandler（结果集处理器） 这四个地方做了拦截，当介绍到执行步骤的时候就可以看到具体实现。\n\n\n# 解析\n\n常规的 xml 配置\n\n<plugins>\n    <plugin interceptor="cn.mybatis.test.plugin.testplugin">\n        <property name="test00" value="100"/>\n        <property name="test01" value="200"/>\n    </plugin>\n</plugins>\n\n\n1\n2\n3\n4\n5\n6\n\n\n核心解析方法\n\nprivate void pluginelement(element parent) throws exception {\n    if (parent == null) return;\n    list<element> elements = parent.elements();\n    for (element element : elements) {\n        // 解析类路径\n        string interceptor = element.attributevalue("interceptor");\n        // 参数配置\n        properties properties = new properties();\n        list<element> propertyelementlist = element.elements("property");\n        for (element property : propertyelementlist) {\n            properties.setproperty(property.attributevalue("name"), property.attributevalue("value"));\n        }\n        // 获取插件实现类并实例化：cn.mybatis.test.plugin.testplugin \n        // 通过 resources.classforname(string) 获取实例\n        interceptor interceptorinstance = (interceptor) resolveclass(interceptor).newinstance();\n        // 设置配置属性\n        interceptorinstance.setproperties(properties);\n        // 注册到 configuration 中\n        configuration.addinterceptor(interceptorinstance);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 注册\n\n解析的时候会在方法内部执行 configuration.addinterceptor(interceptorinstance); 这一步是把插件维护到 configuration 全局配置中，但插件其实应该有很多各，所以提供的是一个 interceptorchain 对象由 configuration 维护\n\npublic class configuration {\n    // 插件拦截器链\n    protected final interceptorchain interceptorchain = new interceptorchain();\n    public void addinterceptor(interceptor interceptorinstance) {\n        interceptorchain.addinterceptor(interceptorinstance);\n    }\n    // other 其他配置\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\ninterceptorchain 里面维护的是一个集合，专门存放所有的 plugin\n\npublic class interceptorchain {\n    // 插件拦截器容器\n    private final list<interceptor> interceptors = new arraylist<>();\n    //\n    public object pluginall(object target) {\n        for (interceptor interceptor : interceptors) {\n            target = interceptor.plugin(target);\n        }\n        return target;\n    }\n    // 添加到插件容器\n    public void addinterceptor(interceptor interceptor) {\n        interceptors.add(interceptor);\n    }\n    public list<interceptor> getinterceptors(){\n        return collections.unmodifiablelist(interceptors);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n从解析到注册这两步就可以看出，mybatis 是把插件以拦截器的形式存放到一个拦截器容器里，这个容器是 configuration 全局配置类来进行维护的\n\n\n# 执行\n\n执行是在调用具体的查询方法活其他在 mybatis 里所描述的 sql 方法时进行的触发，触发会在如下代码中的位置中触发。\n\n  // 创建参数处理器\n  public parameterhandler newparameterhandler(mappedstatement mappedstatement, object parameterobject, boundsql boundsql) {\n    parameterhandler parameterhandler = mappedstatement.getlang().createparameterhandler(mappedstatement, parameterobject, boundsql);\n    parameterhandler = (parameterhandler) interceptorchain.pluginall(parameterhandler);\n    return parameterhandler;\n  }\n \n  // 创建结果集处理器\n  public resultsethandler newresultsethandler(executor executor, mappedstatement mappedstatement, rowbounds rowbounds, parameterhandler parameterhandler,\n      resulthandler resulthandler, boundsql boundsql) {\n    resultsethandler resultsethandler = new defaultresultsethandler(executor, mappedstatement, parameterhandler, resulthandler, boundsql, rowbounds);\n    resultsethandler = (resultsethandler) interceptorchain.pluginall(resultsethandler);\n    return resultsethandler;\n  }\n \n  // 创建语句处理器\n  public statementhandler newstatementhandler(executor executor, mappedstatement mappedstatement, object parameterobject, rowbounds rowbounds, resulthandler resulthandler, boundsql boundsql) {\n    statementhandler statementhandler = new routingstatementhandler(executor, mappedstatement, parameterobject, rowbounds, resulthandler, boundsql);\n    statementhandler = (statementhandler) interceptorchain.pluginall(statementhandler);\n    return statementhandler;\n  }\n\n  // 生产执行器\n  public executor newexecutor(transaction transaction, executortype executortype) {\n    executortype = executortype == null ? defaultexecutortype : executortype;\n    executortype = executortype == null ? executortype.simple : executortype;\n    executor executor;\n    if (executortype.batch == executortype) {\n      // 批量处理器\n      executor = new batchexecutor(this, transaction);\n    } else if (executortype.reuse == executortype) {\n      executor = new reuseexecutor(this, transaction);\n    } else {\n      // 简单处理器\n      executor = new simpleexecutor(this, transaction);\n    }\n    // 二级缓存处理器\n    if (cacheenabled) {\n      executor = new cachingexecutor(executor);\n    }\n    executor = (executor) interceptorchain.pluginall(executor);\n    return executor;\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n会看到他会调用 interceptorchain#pluginall 方法，该类在注册步骤中有提及到，里面维护了所有的插件，那么在这里就会时循环所有的插件，每个插件调用 interceptor#plugin\n\n// 循环调用\npublic object pluginall(object target) {\n    for (interceptor interceptor : interceptors) {\n        target = interceptor.plugin(target);\n    }\n    return target;\n}\n\n// 执行wrap\npublic interface interceptor {\n    // 拦截，使用方实现\n    object intercept(invocation invocation) throws throwable;\n    // 代理\n    default object plugin(object target) {\n        return plugin.wrap(target, this);\n    }\n    // 设置属性\n    default void setproperties(properties properties) {\n        // nop\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\ninterceptor#plugin 方法内部也就是调用 plugin#wrap 静态方法，该方法通过获取自定义插件的注解，来观察你需要对哪个处理器，哪个方法以及参数类型去匹配拦截对象的具体方法，如果多一个参数都可能找不到要拦截的方法。找到方法后然后去动态代理这个方法。\n\n// \npublic class plugin implements invocationhandler {\n    private object target;\n    private interceptor interceptor;\n    private map<class<?>, set<method>> signaturemap;\n\n    private plugin(object target, interceptor interceptor, map<class<?>, set<method>> signaturemap) {\n        this.target = target;\n        this.interceptor = interceptor;\n        this.signaturemap = signaturemap;\n    }\n    // 具体的代理实现\n    @override\n    public object invoke(object proxy, method method, object[] args) throws throwable {\n        // 获取声明的方法列表\n        set<method> methods = signaturemap.get(method.getdeclaringclass());\n        // 过滤需要拦截的方法\n        if (methods != null && methods.contains(method)) {\n            // 调用 interceptor#intercept 插入自己的反射逻辑\n            return interceptor.intercept(new invocation(target, method, args));\n        }\n        return method.invoke(target, args);\n    }\n    /**\n     * 用代理把自定义插件行为包裹到目标方法中，也就是 plugin.invoke 的过滤调用\n     */\n    public static object wrap(object target, interceptor interceptor) {\n        // 取得签名map\n        map<class<?>, set<method>> signaturemap = getsignaturemap(interceptor);\n        // 取得要改变行为的类(parameterhandler|resultsethandler|statementhandler|executor)\n        class<?> type = target.getclass();\n        // 取得接口\n        class<?>[] interfaces = getallinterfaces(type, signaturemap);\n        // 创建代理(statementhandler)\n        if (interfaces.length > 0) {\n            // 代理\n            return proxy.newproxyinstance(\n                    type.getclassloader(),\n                    interfaces,\n                    new plugin(target, interceptor, signaturemap));\n        }\n        return target;\n    }\n    /**\n     * 获取方法签名组 map\n     */\n    private static map<class<?>, set<method>> getsignaturemap(interceptor interceptor) {\n        // 取 intercepts 注解\n        intercepts interceptsannotation = interceptor.getclass().getannotation(intercepts.class);\n        // 必须得有 intercepts 注解，没有报错\n        if (interceptsannotation == null) {\n            throw new runtimeexception("no @intercepts annotation was found in interceptor " + interceptor.getclass().getname());\n        }\n        // value是数组型，signature的数组\n        signature[] sigs = interceptsannotation.value();\n        // 每个 class 类有多个可能有多个 method 需要被拦截\n        map<class<?>, set<method>> signaturemap = new hashmap<>();\n        for (signature sig : sigs) {\n            set<method> methods = signaturemap.computeifabsent(sig.type(), k -> new hashset<>());\n            try {\n                // 例如获取到方法；statementhandler.prepare(connection connection)、statementhandler.parameterize(statement statement)...\n                method method = sig.type().getmethod(sig.method(), sig.args());\n                methods.add(method);\n            } catch (nosuchmethodexception e) {\n                throw new runtimeexception("could not find method on " + sig.type() + " named " + sig.method() + ". cause: " + e, e);\n            }\n        }\n        return signaturemap;\n    }\n    /**\n     * 取得接口\n     */\n    private static class<?>[] getallinterfaces(class<?> type, map<class<?>, set<method>> signaturemap) {\n        set<class<?>> interfaces = new hashset<class<?>>();\n        while (type != null) {\n            for (class<?> c : type.getinterfaces()) {\n                // 拦截 parameterhandler|resultsethandler|statementhandler|executor\n                if (signaturemap.containskey(c)) {\n                    interfaces.add(c);\n                }\n            }\n            type = type.getsuperclass();\n        }\n        return interfaces.toarray(new class<?>[interfaces.size()]);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n\n\n\n# 自定义\n\npackage cn.mybatis.test.plugin;\n\nimport cn.mybatis.executor.statement.statementhandler;\nimport cn.mybatis.mapping.boundsql;\nimport cn..mybatis.plugin.interceptor;\nimport cn.mybatis.plugin.intercepts;\nimport cn.mybatis.plugin.invocation;\nimport cn.mybatis.plugin.signature;\n\nimport java.sql.connection;\nimport java.util.properties;\n\n@intercepts({@signature(type = statementhandler.class, method = "prepare", args = {connection.class})})\npublic class testplugin implements interceptor {\n\n    @override\n    public object intercept(invocation invocation) throws throwable {\n        // 获取statementhandler\n        statementhandler statementhandler = (statementhandler) invocation.gettarget();\n        // 获取sql信息\n        boundsql boundsql = statementhandler.getboundsql();\n        string sql = boundsql.getsql();\n        // 输出sql\n        system.out.println("拦截sql：" + sql);\n        // 放行\n        return invocation.proceed();\n    }\n\n    @override\n    public void setproperties(properties properties) {\n        system.out.println("参数输出：" + properties.getproperty("test00"));\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n',charsets:{cjk:!0}},{title:"核心功能拆解 一二级缓存原理",frontmatter:{title:"核心功能拆解 一二级缓存原理",date:"2023-06-25T09:22:36.000Z",permalink:"/mybatis/302/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/30.Mybatis/302.%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E6%8B%86%E8%A7%A3%20%E4%B8%80%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86.html",relativePath:"00.java/30.Mybatis/302.核心功能拆解 一二级缓存原理.md",key:"v-676a4bcc",path:"/mybatis/302/",headers:[{level:2,title:"一级缓存",slug:"一级缓存",normalizedTitle:"一级缓存",charIndex:13},{level:3,title:"解析",slug:"解析",normalizedTitle:"解析",charIndex:292},{level:3,title:"准备",slug:"准备",normalizedTitle:"准备",charIndex:1240},{level:3,title:"执行",slug:"执行",normalizedTitle:"执行",charIndex:1271},{level:2,title:"二级缓存",slug:"二级缓存",normalizedTitle:"二级缓存",charIndex:18},{level:3,title:"解析",slug:"解析-2",normalizedTitle:"解析",charIndex:292},{level:2,title:"准备",slug:"准备-2",normalizedTitle:"准备",charIndex:1240},{level:2,title:"执行",slug:"执行-2",normalizedTitle:"执行",charIndex:1271}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"一级缓存 解析 准备 执行 二级缓存 解析 准备 执行",content:'MyBatis 的缓存分为一级缓存和二级缓存，缓存情况如下图，单服务架构中（有且仅有只有一个程序提供相同服务），一级缓存开启不会影响业务，只会提高性能。 微服务架构中需要关闭一级缓存，原因：Service1 先查询数据，若之后 Service2 修改了数据，之后 Service1 又再次以同样的查询条件查询数据，因走缓存会出现查处的数据不是最新数据\n\n\n\n\n# 一级缓存\n\n一级缓存是基于 SQLSession 级别的，在同一个 Session 的相同查询语句会才会从缓存中查询，所谓相同包括 SQL 相同，条件相同等，那么我们看下在源码中具体是怎么维护和使用这个缓存的。\n\n\n# 解析\n\n描述一级缓存只需要在 <configuration> 标签中描述即可，而一级缓存的 value 值有 SESSION 和 STATEMENT 两种，如果设置为 STATEMENT 基本可以算是关闭一级缓存，一级缓存是 MyBatis 提供的默认缓存，所以不会在代码中看到判断一级缓存的条件\n\n<configuration>\n    <settings>\n        \x3c!--缓存级别：SESSION/STATEMENT--\x3e\n        <setting name="localCacheScope" value="SESSION"/>\n    </settings>\n</configuration>\n\n\n1\n2\n3\n4\n5\n6\n\n\n解析核心代码会得到 localCacheScope的值 ，维护到 configuration 全局配置中\n\nprivate void settingsElement(Element context) {\n    if (context == null) return;\n    List<Element> elements = context.elements();\n    Properties props = new Properties();\n    for (Element element : elements) {\n        props.setProperty(element.attributeValue("name"), element.attributeValue("value"));\n    }\n    // 是否启用二级缓存\n    configuration.setCacheEnabled(booleanValueOf(props.getProperty("cacheEnabled"), true));\n    // 一级缓存的配置\n    configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty("localCacheScope")));\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 准备\n\n准备阶段主要是在 openSession 方法，他会在执行器里面去直接 new PerpetualCache 永久缓存，执行器就拥有了这个缓存对象\n\n// 打开一个 session\n@Override\npublic SqlSession openSession() {\n    Transaction tx = null;\n    try {\n        final Environment environment = configuration.getEnvironment();\n        TransactionFactory transactionFactory = environment.getTransactionFactory();\n        tx = transactionFactory.newTransaction(configuration.getEnvironment().getDataSource(), TransactionIsolationLevel.READ_COMMITTED, false);\n        // 创建执行器\n        final Executor executor = configuration.newExecutor(tx);\n        // 创建DefaultSqlSession\n        return new DefaultSqlSession(configuration, executor);\n    } catch (Exception e) {\n        try {\n            assert tx != null;\n            tx.close();\n        } catch (SQLException ignore) {\n        }\n        throw new RuntimeException("Error opening session.  Cause: " + e);\n    }\n}\n\n// 创建执行器\npublic Executor newExecutor(Transaction transaction) {\n    Executor executor = new SimpleExecutor(this, transaction);\n    // 配置开启二级缓存，创建 CachingExecutor(默认就是有缓存)装饰者模式，\n    if (cacheEnabled) {\n        executor = new CachingExecutor(executor);\n    }\n    return executor;\n}\n\n// SimpleExecutor 简单执行器的构造方法\npublic class SimpleExecutor extends BaseExecutor {\n    public SimpleExecutor(Configuration configuration, Transaction transaction) {\n        super(configuration, transaction);\n    }\n}\n\n// 基础执行器的构造方法\nprotected BaseExecutor(Configuration configuration, Transaction transaction) {\n    this.configuration = configuration;\n    this.transaction = transaction;\n    this.wrapper = this;\n    // new 一个永久缓存\n    this.localCache = new PerpetualCache("LocalCache");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\nPerpetualCache 继承了 Cache ，并实现了基本的对缓存的操作\n\npublic class PerpetualCache implements Cache {\n    private String id;\n    // 使用HashMap存放一级缓存数据，session 生命周期较短，正常情况下数据不会一直在缓存存放\n    private Map<Object, Object> cache = new HashMap<>();\n    public PerpetualCache(String id) {\n        this.id = id;\n    }\n    @Override\n    public String getId() {\n        return id;\n    }\n    @Override\n    public void putObject(Object key, Object value) {\n        cache.put(key, value);\n    }\n    @Override\n    public Object getObject(Object key) {\n        return cache.get(key);\n    }\n    @Override\n    public Object removeObject(Object key) {\n        return cache.remove(key);\n    }\n    @Override\n    public void clear() {\n        cache.clear();\n    }\n    @Override\n    public int getSize() {\n        return cache.size();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 执行\n\n在准备阶段已经得到了执行器，并在执行器里面得到了 PerpetualCache 缓存，只需要知道客户使用的是查询还是修改等操作后，执行执行器里面对应的 query or update 方法即可\n\npublic abstract class BaseExecutor implements Executor {\n\n    private org.slf4j.Logger logger = LoggerFactory.getLogger(BaseExecutor.class);\n\n    protected Configuration configuration;\n    protected Transaction transaction;\n    protected Executor wrapper;\n\n    // 本地缓存\n    protected PerpetualCache localCache;\n\n    private boolean closed;\n    // 查询堆栈\n    protected int queryStack = 0;\n\n    protected BaseExecutor(Configuration configuration, Transaction transaction) {\n        this.configuration = configuration;\n        this.transaction = transaction;\n        this.wrapper = this;\n        this.localCache = new PerpetualCache("LocalCache");\n    }\n\n    @Override\n    public int update(MappedStatement ms, Object parameter) throws SQLException {\n        if (closed) {\n            throw new RuntimeException("Executor was closed.");\n        }\n        clearLocalCache();\n        return doUpdate(ms, parameter);\n    }\n\n    @Override\n    public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {\n        // 1. 获取绑定SQL\n        BoundSql boundSql = ms.getBoundSql(parameter);\n        // 2. 创建缓存Key\n        CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);\n        return query(ms, parameter, rowBounds, resultHandler, key, boundSql);\n    }\n\n    @Override\n    public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n        if (closed) {\n            throw new RuntimeException("Executor was closed.");\n        }\n        // 清理局部缓存，查询堆栈为0则清理。queryStack 避免递归调用清理\n        if (queryStack == 0 && ms.isFlushCacheRequired()) {\n            clearLocalCache();\n        }\n        List<E> list;\n        try {\n            queryStack++;\n            // 根据cacheKey从localCache中查询数据\n            list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;\n            if (list == null) {\n                list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);\n            }\n        } finally {\n            queryStack--;\n        }\n        if (queryStack == 0) {\n            if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {\n                clearLocalCache();\n            }\n        }\n        return list;\n    }\n\n    private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n        List<E> list;\n        localCache.putObject(key, ExecutionPlaceholder.EXECUTION_PLACEHOLDER);\n        try {\n            list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);\n        } finally {\n            localCache.removeObject(key);\n        }\n        // 存入缓存\n        localCache.putObject(key, list);\n        return list;\n    }\n\n    protected abstract int doUpdate(MappedStatement ms, Object parameter) throws SQLException;\n\n    protected abstract <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException;\n\n    @Override\n    public Transaction getTransaction() {\n        if (closed) {\n            throw new RuntimeException("Executor was closed.");\n        }\n        return transaction;\n    }\n\n    @Override\n    public void commit(boolean required) throws SQLException {\n        if (closed) {\n            throw new RuntimeException("Cannot commit, transaction is already closed");\n        }\n        clearLocalCache();\n        if (required) {\n            transaction.commit();\n        }\n    }\n\n    @Override\n    public void rollback(boolean required) throws SQLException {\n        if (!closed) {\n            try {\n                clearLocalCache();\n            } finally {\n                if (required) {\n                    transaction.rollback();\n                }\n            }\n        }\n    }\n\n    @Override\n    public void clearLocalCache() {\n        if (!closed) {\n            localCache.clear();\n        }\n    }\n\n    @Override\n    public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {\n        if (closed) {\n            throw new RuntimeException("Executor was closed.");\n        }\n        CacheKey cacheKey = new CacheKey();\n        cacheKey.update(ms.getId());\n        cacheKey.update(rowBounds.getOffset());\n        cacheKey.update(rowBounds.getLimit());\n        cacheKey.update(boundSql.getSql());\n        List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n        TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();\n        for (ParameterMapping parameterMapping : parameterMappings) {\n            Object value;\n            String propertyName = parameterMapping.getProperty();\n            if (boundSql.hasAdditionalParameter(propertyName)) {\n                value = boundSql.getAdditionalParameter(propertyName);\n            } else if (parameterObject == null) {\n                value = null;\n            } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {\n                value = parameterObject;\n            } else {\n                MetaObject metaObject = configuration.newMetaObject(parameterObject);\n                value = metaObject.getValue(propertyName);\n            }\n            cacheKey.update(value);\n        }\n        if (configuration.getEnvironment() != null) {\n            cacheKey.update(configuration.getEnvironment().getId());\n        }\n        return cacheKey;\n    }\n\n    @Override\n    public void setExecutorWrapper(Executor executor) {\n        this.wrapper = wrapper;\n    }\n\n    @Override\n    public void close(boolean forceRollback) {\n        try {\n            try {\n                rollback(forceRollback);\n            } finally {\n                transaction.close();\n            }\n        } catch (SQLException e) {\n            logger.warn("Unexpected exception on closing transaction.  Cause: " + e);\n        } finally {\n            transaction = null;\n            localCache = null;\n            closed = true;\n        }\n    }\n\n    protected void closeStatement(Statement statement) {\n        if (statement != null) {\n            try {\n                statement.close();\n            } catch (SQLException ignore) {\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n\n\n可以看到 执行器里面维护了 query update commit 等方法，在执行查询的时候会先生成 CacheKey ，会按照 namespace.id + 分页offset + 分页limit + 执行的SQL语句 + 查询条件的值 + 环境ID 生成唯一的 key，然后做为查询缓存的 key，查询结果做为 value，如果同一各 SQLSession 执行相同语句和条件以及分页等，就会从缓存中命中并返回结果。缓存的清除，就是当该 SQLSession 执行 update，commit，close，rollback 时该 SQLSession 就清除缓存。\n\n在 SQL 语句中也可以设置清除缓存，只需要在 <select>、<insert> 和 <update> 等 SQL 标签中设置 flushCache="true" 属性会强制清空本地缓存，使得下次查询时重新从数据库中获取数据。适用于一级缓存和二级缓存\n\n<select id="selectById" resultType="com.example.User" flushCache="true">\n  select * from user where id = #{id}\n</select>\n\n\n1\n2\n3\n\n\n\n# 二级缓存\n\n二级缓存是为 Namespace 也叫 mapper 级别的缓存，是跨 SQLSession 的，他会在原有的执行器上封装一个 CachingExecutor ，来管理缓存， CachingExecutor 使用了装饰器模式来装饰基础的 Executor 执行器。\n\n\n# 解析\n\n在二级缓存中的配置方式具体如下\n\n\x3c!-- 必须先开启缓存 --\x3e\n<configuration>\n    <settings>\n        \x3c!--  true/false 二级缓存是否使用 --\x3e\n        <setting name="cacheEnabled" value="true"/>\n    </settings>\n</configuration>\n\n\x3c!-- 指定在某个mapper中使用 --\x3e\n<mapper namespace="com.example.MyMapper">\n    \x3c!-- 设置该mapper的二级缓存 --\x3e\n    <cache eviction="LRU" flushInterval="100000" readOnly="true" size="1024"/>\n    \x3c!-- useCache：表示是否使用二级缓存，如果设置为 true，则会使用二级缓存。对于 select 元素，默认值为 true。 --\x3e\n    \x3c!-- useCache 属性只能控制是否使用二级缓存，它不能关闭一级缓存。一级缓存是 MyBatis 的默认行为，它总是开启的，无法关闭。 --\x3e\n    <select id="queryActivityById" parameterType="cn.bugstack.mybatis.test.po.Activity" flushCache="false" useCache="true">\n        SELECT activity_id, activity_name, activity_desc, create_time, update_time\n        FROM activity\n        <trim prefix="where" prefixOverrides="AND | OR" suffixOverrides="and">\n            <if test="null != activityId">\n                activity_id = #{activityId}\n            </if>\n        </trim>\n    </select>\n</mapper>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n其中 <cache > 标签有多个属性，这里一一介绍一下：\n\n * type：可以指定自定义缓存，但是该类必须实现，而且是全类名\n * eviction：缓存回收策略，默认为 LRU（Least Recently Used），策略介绍如下：\n   LRU：按照访问时间排序，最近未使用的数据优先清除。\n   FIFO：按照插入时间排序，先插入的数据先清除。\n   SOFT：基于垃圾回收算法，当系统内存不足时，会优先清理不常用的、占用内存较多的数据。\n   WEAK：弱引用机制，当 JVM 进行垃圾回收时，如果判断一个对象只被弱引用指向，则会将其回收。\n * flushInterval：刷新间隔时间，表示多长时间刷新一次缓存，单位为毫秒，默认不刷新。\n * size：缓存的大小，表示最多可以缓存多少个对象。\n * readOnly：是否只读，默认为 false，表示启用缓存更新机制。\n * blocking：是否启用阻塞，默认为 false，表示不启用。\n\n> flushInterval 默认情况下，MyBatis 采用基于 PerpetualCache (永久缓存) 的缓存实现方式，即缓存会一直保存在内存中，直到会话关闭时才被清除。而当我们使用基于 Ehcache 的缓存实现时，可以通过设置 flushInterval 属性控制缓存的刷新时间，即定时将缓存中的数据写入到磁盘或持久化存储中，以避免缓存过期、失效或内存溢出等问题。\n\n当 Mybaits 启动后会读到二级缓存的配置，先会进行 <cache> 基础的解析，得到 XML 里面的属性值，其次用值信息组成一个 Cache 对象，并把这个 Cache 对象维护到全局配置 Configuration 中，该全局配置里面是维护一个 Map 结构的容器\n\n// 开始解析\nprivate void cacheElement(Element context) {\n    if (context == null) return;\n    // 基础配置信息，默认是永恒缓存\n    String type = context.attributeValue("type", "PERPETUAL");\n    Class<? extends Cache> typeClass = typeAliasRegistry.resolveAlias(type);\n    // 缓存队列 FIFO\n    String eviction = context.attributeValue("eviction", "FIFO");\n    Class<? extends Cache> evictionClass = typeAliasRegistry.resolveAlias(eviction);\n    Long flushInterval = Long.valueOf(context.attributeValue("flushInterval"));\n    Integer size = Integer.valueOf(context.attributeValue("size"));\n    boolean readWrite = !Boolean.parseBoolean(context.attributeValue("readOnly", "false"));\n    boolean blocking = !Boolean.parseBoolean(context.attributeValue("blocking", "false"));\n\n    // 解析额外属性信息；<property name="cacheFile" value="/tmp/xxx-cache.tmp"/>\n    List<Element> elements = context.elements();\n    Properties props = new Properties();\n    for (Element element : elements) {\n        props.setProperty(element.attributeValue("name"), element.attributeValue("value"));\n    }\n    // 构建缓存\n    builderAssistant.useNewCache(typeClass, evictionClass, flushInterval, size, readWrite, blocking, props);\n}\n\n// 构建Cache\npublic Cache useNewCache(Class<? extends Cache> typeClass,\n                        Class<? extends Cache> evictionClass,\n                        Long flushInterval,\n                        Integer size,\n                        boolean readWrite,\n                        boolean blocking,\n                        Properties props) {\n    // 判断为null，则用默认值\n    typeClass = valueOrDefault(typeClass, PerpetualCache.class);\n    evictionClass = valueOrDefault(evictionClass, FifoCache.class);\n\n    // 建造者模式构建 Cache [currentNamespace=cn.bugstack.mybatis.test.dao.IActivityDao]\n    Cache cache = new CacheBuilder(currentNamespace)\n            .implementation(typeClass)\n            .addDecorator(evictionClass)\n            .clearInterval(flushInterval)\n            .size(size)\n            .readWrite(readWrite)\n            .blocking(blocking)\n            .properties(props)\n            .build();\n\n    // 添加缓存\n    configuration.addCache(cache);\n    // 给自己维护一个 cache 以便后续 MappedStatement 用到\n    currentCache = cache;\n    return cache;\n}\n\n// 添加到 configuration全局配置维护的 caches中\npublic class Configuration {\n    // 缓存,存在Map里\n    protected final Map<String, Cache> caches = new HashMap<>();\n    public void addCache(Cache cache) {\n        caches.put(cache.getId(), cache);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n\n\n缓存解析过了，但是最主要的还是 <select> 标签着一些，标签上面描述了具体的缓存是否使用，缓存是否清除，所以还需要解析标签上的缓存信息，主要是 flushCache 和 useCache 这两个属性\n\n// 解析操作\npublic void parseStatementNode() {\n    String id = element.attributeValue("id");\n    // 参数类型\n    String parameterType = element.attributeValue("parameterType");\n    Class<?> parameterTypeClass = resolveAlias(parameterType);\n    // 外部应用 resultMap\n    String resultMap = element.attributeValue("resultMap");\n    // 结果类型\n    String resultType = element.attributeValue("resultType");\n    Class<?> resultTypeClass = resolveAlias(resultType);\n    // 获取命令类型(select|insert|update|delete)\n    String nodeName = element.getName();\n    SqlCommandType sqlCommandType = SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));\n\n    boolean isSelect = sqlCommandType == SqlCommandType.SELECT;\n    boolean flushCache = Boolean.parseBoolean(element.attributeValue("flushCache", String.valueOf(!isSelect)));\n    boolean useCache = Boolean.parseBoolean(element.attributeValue("useCache", String.valueOf(isSelect)));\n\n    // 获取默认语言驱动器\n    Class<?> langClass = configuration.getLanguageRegistry().getDefaultDriverClass();\n    LanguageDriver langDriver = configuration.getLanguageRegistry().getDriver(langClass);\n\n    // 解析<selectKey> step-14 新增\n    processSelectKeyNodes(id, parameterTypeClass, langDriver);\n\n    // 解析成SqlSource，DynamicSqlSource/RawSqlSource\n    SqlSource sqlSource = langDriver.createSqlSource(configuration, element, parameterTypeClass);\n\n    // 属性标记【仅对 insert 有用】, MyBatis 会通过 getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值 step-14 新增\n    String keyProperty = element.attributeValue("keyProperty");\n\n    KeyGenerator keyGenerator = null;\n    String keyStatementId = id + SelectKeyGenerator.SELECT_KEY_SUFFIX;\n    keyStatementId = builderAssistant.applyCurrentNamespace(keyStatementId, true);\n\n    if (configuration.hasKeyGenerator(keyStatementId)) {\n        keyGenerator = configuration.getKeyGenerator(keyStatementId);\n    } else {\n        keyGenerator = configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType) ? new Jdbc3KeyGenerator() : new NoKeyGenerator();\n    }\n    // 调用助手类\n    builderAssistant.addMappedStatement(id,\n            sqlSource,\n            sqlCommandType,\n            parameterTypeClass,\n            resultMap,\n            resultTypeClass,\n            flushCache,\n            useCache,\n            keyGenerator,\n            keyProperty,\n            langDriver);\n}\n\n// 把信息添加到 MappedStatement对象\npublic MappedStatement addMappedStatement(\n        String id,\n        SqlSource sqlSource,\n        SqlCommandType sqlCommandType,\n        Class<?> parameterType,\n        String resultMap,\n        Class<?> resultType,\n        boolean flushCache,\n        boolean useCache,\n        KeyGenerator keyGenerator,\n        String keyProperty,\n        LanguageDriver lang\n) {\n    // 给id加上namespace前缀：cn.bugstack.mybatis.test.dao.IUserDao.queryUserInfoById\n    id = applyCurrentNamespace(id, false);\n    //是否是select语句\n    boolean isSelect = sqlCommandType == SqlCommandType.SELECT;\n\n    MappedStatement.Builder statementBuilder = new MappedStatement.Builder(configuration, id, sqlCommandType, sqlSource, resultType);\n    statementBuilder.resource(resource);\n    statementBuilder.keyGenerator(keyGenerator);\n    statementBuilder.keyProperty(keyProperty);\n\n    // 结果映射，给 MappedStatement#resultMaps\n    setStatementResultMap(resultMap, resultType, statementBuilder);\n    // 维护缓存信息\n    setStatementCache(isSelect, flushCache, useCache, currentCache, statementBuilder);\n    MappedStatement statement = statementBuilder.build();\n    // 映射语句信息，建造完存放到配置项中\n    configuration.addMappedStatement(statement);\n    return statement;\n}\n\n// 给Statement添加缓存信息\nprivate void setStatementCache(\n        boolean isSelect,\n        boolean flushCache,\n        boolean useCache,\n        Cache cache,\n        MappedStatement.Builder statementBuilder) {\n    flushCache = valueOrDefault(flushCache, !isSelect);\n    useCache = valueOrDefault(useCache, isSelect);\n    statementBuilder.flushCacheRequired(flushCache);\n    statementBuilder.useCache(useCache);\n    statementBuilder.cache(cache);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n\n\n在具体的 addMappedStatement 的时候，可以看到会得到一个 MappedStatement 对象，该对象就是封装了 SQL 标签的所有信息，在 setStatementCache 方法中，不仅只把 flushCache和useCache 进行了设置，额外的还带有一个 cache ，该 cache 就是在调用 useNewCache 方法，内部赋值的 currentCache ，他们的方法是在同一个类中，因此可以使用。这样 MappedStatement 对象也就拥有了 <cache> 标签的能力，到此解析完毕\n\n\n# 准备\n\n和一级缓存一样，都是在 openSession 的时候去做实例化，但是不同的是，二级缓存会在一级缓存上进行一个装饰，并且首要会判断是否允许开启二级缓存。\n\nif (cacheEnabled) {\n    executor = new CachingExecutor(executor);\n}\n\n\n1\n2\n3\n\n\nCachingExecutor 接收 executor ，并对其进行包装，内部方法依然调用的是 BaseExecutor 的相关方法。 CachingExecutor 内部还维护了 TransactionalCacheManager 事务缓存管理器，该管理器内部维护 Map<Cache, TransactionalCache> ， TransactionalCache 内部又维护了 Cache 以及 entriesMissedInCache 和 entriesToAddOnCommit\n\n\n# 执行\n\npublic class CachingExecutor implements Executor {\n\n    private Logger logger = LoggerFactory.getLogger(CachingExecutor.class);\n    private Executor delegate;\n    // 事务缓存管理器\n    private TransactionalCacheManager tcm = new TransactionalCacheManager();\n\n    public CachingExecutor(Executor delegate) {\n        this.delegate = delegate;\n        delegate.setExecutorWrapper(this);\n    }\n\n    @Override\n    public int update(MappedStatement ms, Object parameter) throws SQLException {\n        return delegate.update(ms, parameter);\n    }\n\n    @Override\n    public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n        Cache cache = ms.getCache();\n        if (cache != null) {\n            flushCacheIfRequired(ms);\n            if (ms.isUseCache() && resultHandler == null) {\n                @SuppressWarnings("unchecked")\n                List<E> list = (List<E>) tcm.getObject(cache, key);\n                if (list == null) {\n                    list = delegate.<E>query(ms, parameter, rowBounds, resultHandler, key, boundSql);\n                    // cache：缓存队列实现类，FIFO\n                    // key：哈希值 [mappedStatementId + offset + limit + SQL + queryParams + environment]\n                    // list：查询的数据\n                    tcm.putObject(cache, key, list);\n                }\n                // 打印调试日志，记录二级缓存获取数据\n                if (logger.isDebugEnabled() && cache.getSize() > 0) {\n                    logger.debug("二级缓存：{}", JSON.toJSONString(list));\n                }\n                return list;\n            }\n        }\n        return delegate.<E>query(ms, parameter, rowBounds, resultHandler, key, boundSql);\n    }\n\n    @Override\n    public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {\n        // 1. 获取绑定SQL\n        BoundSql boundSql = ms.getBoundSql(parameter);\n        // 2. 创建缓存Key\n        CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);\n        return query(ms, parameter, rowBounds, resultHandler, key, boundSql);\n    }\n\n    @Override\n    public Transaction getTransaction() {\n        return delegate.getTransaction();\n    }\n\n    @Override\n    public void commit(boolean required) throws SQLException {\n        delegate.commit(required);\n        tcm.commit();\n    }\n\n    @Override\n    public void rollback(boolean required) throws SQLException {\n        try {\n            delegate.rollback(required);\n        } finally {\n            if (required) {\n                tcm.rollback();\n            }\n        }\n    }\n\n    @Override\n    public void close(boolean forceRollback) {\n        try {\n            if (forceRollback) {\n                tcm.rollback();\n            } else {\n                tcm.commit();\n            }\n        } finally {\n            delegate.close(forceRollback);\n        }\n    }\n\n    @Override\n    public void clearLocalCache() {\n        delegate.clearLocalCache();\n    }\n\n    @Override\n    public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {\n        return delegate.createCacheKey(ms, parameterObject, rowBounds, boundSql);\n    }\n\n    @Override\n    public void setExecutorWrapper(Executor executor) {\n        throw new UnsupportedOperationException("This method should not be called");\n    }\n\n    private void flushCacheIfRequired(MappedStatement ms) {\n        Cache cache = ms.getCache();\n        if (cache != null && ms.isFlushCacheRequired()) {\n            tcm.clear(cache);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n\n\npublic class TransactionalCacheManager {\n\n    private Map<Cache, TransactionalCache> transactionalCaches = new HashMap<>();\n\n    public void clear(Cache cache) {\n        getTransactionalCache(cache).clear();\n    }\n\n    /**\n     * 得到某个TransactionalCache的值\n     */\n    public Object getObject(Cache cache, CacheKey key) {\n        return getTransactionalCache(cache).getObject(key);\n    }\n\n    public void putObject(Cache cache, CacheKey key, Object value) {\n        getTransactionalCache(cache).putObject(key, value);\n    }\n\n    /**\n     * 提交时全部提交\n     */\n    public void commit() {\n        for (TransactionalCache txCache : transactionalCaches.values()) {\n            txCache.commit();\n        }\n    }\n\n    /**\n     * 回滚时全部回滚\n     */\n    public void rollback() {\n        for (TransactionalCache txCache : transactionalCaches.values()) {\n            txCache.rollback();\n        }\n    }\n\n    private TransactionalCache getTransactionalCache(Cache cache) {\n        TransactionalCache txCache = transactionalCaches.get(cache);\n        if (txCache == null) {\n            txCache = new TransactionalCache(cache);\n            transactionalCaches.put(cache, txCache);\n        }\n        return txCache;\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\npublic class TransactionalCache implements Cache {\n\n    private Cache delegate;\n    // commit 时要不要清缓存\n    private boolean clearOnCommit;\n    // commit 时要添加的元素\n    private Map<Object, Object> entriesToAddOnCommit;\n    private Set<Object> entriesMissedInCache;\n\n    public TransactionalCache(Cache delegate) {\n        // delegate = FifoCache\n        this.delegate = delegate;\n        // 默认 commit 时不清缓存\n        this.clearOnCommit = false;\n        this.entriesToAddOnCommit = new HashMap<>();\n        this.entriesMissedInCache = new HashSet<>();\n    }\n\n    @Override\n    public String getId() {\n        return delegate.getId();\n    }\n\n    @Override\n    public int getSize() {\n        return delegate.getSize();\n    }\n\n    @Override\n    public Object getObject(Object key) {\n        // key：CacheKey 拼装后的哈希码\n        Object object = delegate.getObject(key);\n        if (object == null) {\n            entriesMissedInCache.add(key);\n        }\n        return clearOnCommit ? null : object;\n    }\n\n    @Override\n    public void putObject(Object key, Object object) {\n        entriesToAddOnCommit.put(key, object);\n    }\n\n    @Override\n    public Object removeObject(Object key) {\n        return null;\n    }\n\n    @Override\n    public void clear() {\n        clearOnCommit = true;\n        entriesToAddOnCommit.clear();\n    }\n\n    public void commit() {\n        if (clearOnCommit) {\n            delegate.clear();\n        }\n        flushPendingEntries();\n        reset();\n    }\n\n    public void rollback() {\n        unlockMissedEntries();\n        reset();\n    }\n\n    private void reset() {\n        clearOnCommit = false;\n        entriesToAddOnCommit.clear();\n        entriesMissedInCache.clear();\n    }\n\n    /**\n     * 刷新数据到 MappedStatement#Cache 中，也就是把数据填充到 Mapper XML 级别下。\n     * flushPendingEntries 方法把事务缓存下的数据，填充到 FifoCache 中。\n     */\n    private void flushPendingEntries() {\n        for (Map.Entry<Object, Object> entry : entriesToAddOnCommit.entrySet()) {\n            delegate.putObject(entry.getKey(), entry.getValue());\n        }\n        for (Object entry : entriesMissedInCache) {\n            if (!entriesToAddOnCommit.containsKey(entry)) {\n                delegate.putObject(entry, null);\n            }\n        }\n    }\n\n    private void unlockMissedEntries() {\n        for (Object entry : entriesMissedInCache) {\n            delegate.putObject(entry, null);\n        }\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n\n\n其实上面饶了一圈下来，最终操作的是 MappedStatement 维护的 Cache 对象， MappedStatement 是被全局 Configuration 在缓存的，所以查询结束不会清除 MappedStatement 对象和缓存信息，只有当触发 update，commit，rollback 等才会清除 MappedStatement 里维护的缓存信息',normalizedContent:'mybatis 的缓存分为一级缓存和二级缓存，缓存情况如下图，单服务架构中（有且仅有只有一个程序提供相同服务），一级缓存开启不会影响业务，只会提高性能。 微服务架构中需要关闭一级缓存，原因：service1 先查询数据，若之后 service2 修改了数据，之后 service1 又再次以同样的查询条件查询数据，因走缓存会出现查处的数据不是最新数据\n\n\n\n\n# 一级缓存\n\n一级缓存是基于 sqlsession 级别的，在同一个 session 的相同查询语句会才会从缓存中查询，所谓相同包括 sql 相同，条件相同等，那么我们看下在源码中具体是怎么维护和使用这个缓存的。\n\n\n# 解析\n\n描述一级缓存只需要在 <configuration> 标签中描述即可，而一级缓存的 value 值有 session 和 statement 两种，如果设置为 statement 基本可以算是关闭一级缓存，一级缓存是 mybatis 提供的默认缓存，所以不会在代码中看到判断一级缓存的条件\n\n<configuration>\n    <settings>\n        \x3c!--缓存级别：session/statement--\x3e\n        <setting name="localcachescope" value="session"/>\n    </settings>\n</configuration>\n\n\n1\n2\n3\n4\n5\n6\n\n\n解析核心代码会得到 localcachescope的值 ，维护到 configuration 全局配置中\n\nprivate void settingselement(element context) {\n    if (context == null) return;\n    list<element> elements = context.elements();\n    properties props = new properties();\n    for (element element : elements) {\n        props.setproperty(element.attributevalue("name"), element.attributevalue("value"));\n    }\n    // 是否启用二级缓存\n    configuration.setcacheenabled(booleanvalueof(props.getproperty("cacheenabled"), true));\n    // 一级缓存的配置\n    configuration.setlocalcachescope(localcachescope.valueof(props.getproperty("localcachescope")));\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 准备\n\n准备阶段主要是在 opensession 方法，他会在执行器里面去直接 new perpetualcache 永久缓存，执行器就拥有了这个缓存对象\n\n// 打开一个 session\n@override\npublic sqlsession opensession() {\n    transaction tx = null;\n    try {\n        final environment environment = configuration.getenvironment();\n        transactionfactory transactionfactory = environment.gettransactionfactory();\n        tx = transactionfactory.newtransaction(configuration.getenvironment().getdatasource(), transactionisolationlevel.read_committed, false);\n        // 创建执行器\n        final executor executor = configuration.newexecutor(tx);\n        // 创建defaultsqlsession\n        return new defaultsqlsession(configuration, executor);\n    } catch (exception e) {\n        try {\n            assert tx != null;\n            tx.close();\n        } catch (sqlexception ignore) {\n        }\n        throw new runtimeexception("error opening session.  cause: " + e);\n    }\n}\n\n// 创建执行器\npublic executor newexecutor(transaction transaction) {\n    executor executor = new simpleexecutor(this, transaction);\n    // 配置开启二级缓存，创建 cachingexecutor(默认就是有缓存)装饰者模式，\n    if (cacheenabled) {\n        executor = new cachingexecutor(executor);\n    }\n    return executor;\n}\n\n// simpleexecutor 简单执行器的构造方法\npublic class simpleexecutor extends baseexecutor {\n    public simpleexecutor(configuration configuration, transaction transaction) {\n        super(configuration, transaction);\n    }\n}\n\n// 基础执行器的构造方法\nprotected baseexecutor(configuration configuration, transaction transaction) {\n    this.configuration = configuration;\n    this.transaction = transaction;\n    this.wrapper = this;\n    // new 一个永久缓存\n    this.localcache = new perpetualcache("localcache");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\nperpetualcache 继承了 cache ，并实现了基本的对缓存的操作\n\npublic class perpetualcache implements cache {\n    private string id;\n    // 使用hashmap存放一级缓存数据，session 生命周期较短，正常情况下数据不会一直在缓存存放\n    private map<object, object> cache = new hashmap<>();\n    public perpetualcache(string id) {\n        this.id = id;\n    }\n    @override\n    public string getid() {\n        return id;\n    }\n    @override\n    public void putobject(object key, object value) {\n        cache.put(key, value);\n    }\n    @override\n    public object getobject(object key) {\n        return cache.get(key);\n    }\n    @override\n    public object removeobject(object key) {\n        return cache.remove(key);\n    }\n    @override\n    public void clear() {\n        cache.clear();\n    }\n    @override\n    public int getsize() {\n        return cache.size();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 执行\n\n在准备阶段已经得到了执行器，并在执行器里面得到了 perpetualcache 缓存，只需要知道客户使用的是查询还是修改等操作后，执行执行器里面对应的 query or update 方法即可\n\npublic abstract class baseexecutor implements executor {\n\n    private org.slf4j.logger logger = loggerfactory.getlogger(baseexecutor.class);\n\n    protected configuration configuration;\n    protected transaction transaction;\n    protected executor wrapper;\n\n    // 本地缓存\n    protected perpetualcache localcache;\n\n    private boolean closed;\n    // 查询堆栈\n    protected int querystack = 0;\n\n    protected baseexecutor(configuration configuration, transaction transaction) {\n        this.configuration = configuration;\n        this.transaction = transaction;\n        this.wrapper = this;\n        this.localcache = new perpetualcache("localcache");\n    }\n\n    @override\n    public int update(mappedstatement ms, object parameter) throws sqlexception {\n        if (closed) {\n            throw new runtimeexception("executor was closed.");\n        }\n        clearlocalcache();\n        return doupdate(ms, parameter);\n    }\n\n    @override\n    public <e> list<e> query(mappedstatement ms, object parameter, rowbounds rowbounds, resulthandler resulthandler) throws sqlexception {\n        // 1. 获取绑定sql\n        boundsql boundsql = ms.getboundsql(parameter);\n        // 2. 创建缓存key\n        cachekey key = createcachekey(ms, parameter, rowbounds, boundsql);\n        return query(ms, parameter, rowbounds, resulthandler, key, boundsql);\n    }\n\n    @override\n    public <e> list<e> query(mappedstatement ms, object parameter, rowbounds rowbounds, resulthandler resulthandler, cachekey key, boundsql boundsql) throws sqlexception {\n        if (closed) {\n            throw new runtimeexception("executor was closed.");\n        }\n        // 清理局部缓存，查询堆栈为0则清理。querystack 避免递归调用清理\n        if (querystack == 0 && ms.isflushcacherequired()) {\n            clearlocalcache();\n        }\n        list<e> list;\n        try {\n            querystack++;\n            // 根据cachekey从localcache中查询数据\n            list = resulthandler == null ? (list<e>) localcache.getobject(key) : null;\n            if (list == null) {\n                list = queryfromdatabase(ms, parameter, rowbounds, resulthandler, key, boundsql);\n            }\n        } finally {\n            querystack--;\n        }\n        if (querystack == 0) {\n            if (configuration.getlocalcachescope() == localcachescope.statement) {\n                clearlocalcache();\n            }\n        }\n        return list;\n    }\n\n    private <e> list<e> queryfromdatabase(mappedstatement ms, object parameter, rowbounds rowbounds, resulthandler resulthandler, cachekey key, boundsql boundsql) throws sqlexception {\n        list<e> list;\n        localcache.putobject(key, executionplaceholder.execution_placeholder);\n        try {\n            list = doquery(ms, parameter, rowbounds, resulthandler, boundsql);\n        } finally {\n            localcache.removeobject(key);\n        }\n        // 存入缓存\n        localcache.putobject(key, list);\n        return list;\n    }\n\n    protected abstract int doupdate(mappedstatement ms, object parameter) throws sqlexception;\n\n    protected abstract <e> list<e> doquery(mappedstatement ms, object parameter, rowbounds rowbounds, resulthandler resulthandler, boundsql boundsql) throws sqlexception;\n\n    @override\n    public transaction gettransaction() {\n        if (closed) {\n            throw new runtimeexception("executor was closed.");\n        }\n        return transaction;\n    }\n\n    @override\n    public void commit(boolean required) throws sqlexception {\n        if (closed) {\n            throw new runtimeexception("cannot commit, transaction is already closed");\n        }\n        clearlocalcache();\n        if (required) {\n            transaction.commit();\n        }\n    }\n\n    @override\n    public void rollback(boolean required) throws sqlexception {\n        if (!closed) {\n            try {\n                clearlocalcache();\n            } finally {\n                if (required) {\n                    transaction.rollback();\n                }\n            }\n        }\n    }\n\n    @override\n    public void clearlocalcache() {\n        if (!closed) {\n            localcache.clear();\n        }\n    }\n\n    @override\n    public cachekey createcachekey(mappedstatement ms, object parameterobject, rowbounds rowbounds, boundsql boundsql) {\n        if (closed) {\n            throw new runtimeexception("executor was closed.");\n        }\n        cachekey cachekey = new cachekey();\n        cachekey.update(ms.getid());\n        cachekey.update(rowbounds.getoffset());\n        cachekey.update(rowbounds.getlimit());\n        cachekey.update(boundsql.getsql());\n        list<parametermapping> parametermappings = boundsql.getparametermappings();\n        typehandlerregistry typehandlerregistry = ms.getconfiguration().gettypehandlerregistry();\n        for (parametermapping parametermapping : parametermappings) {\n            object value;\n            string propertyname = parametermapping.getproperty();\n            if (boundsql.hasadditionalparameter(propertyname)) {\n                value = boundsql.getadditionalparameter(propertyname);\n            } else if (parameterobject == null) {\n                value = null;\n            } else if (typehandlerregistry.hastypehandler(parameterobject.getclass())) {\n                value = parameterobject;\n            } else {\n                metaobject metaobject = configuration.newmetaobject(parameterobject);\n                value = metaobject.getvalue(propertyname);\n            }\n            cachekey.update(value);\n        }\n        if (configuration.getenvironment() != null) {\n            cachekey.update(configuration.getenvironment().getid());\n        }\n        return cachekey;\n    }\n\n    @override\n    public void setexecutorwrapper(executor executor) {\n        this.wrapper = wrapper;\n    }\n\n    @override\n    public void close(boolean forcerollback) {\n        try {\n            try {\n                rollback(forcerollback);\n            } finally {\n                transaction.close();\n            }\n        } catch (sqlexception e) {\n            logger.warn("unexpected exception on closing transaction.  cause: " + e);\n        } finally {\n            transaction = null;\n            localcache = null;\n            closed = true;\n        }\n    }\n\n    protected void closestatement(statement statement) {\n        if (statement != null) {\n            try {\n                statement.close();\n            } catch (sqlexception ignore) {\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n\n\n可以看到 执行器里面维护了 query update commit 等方法，在执行查询的时候会先生成 cachekey ，会按照 namespace.id + 分页offset + 分页limit + 执行的sql语句 + 查询条件的值 + 环境id 生成唯一的 key，然后做为查询缓存的 key，查询结果做为 value，如果同一各 sqlsession 执行相同语句和条件以及分页等，就会从缓存中命中并返回结果。缓存的清除，就是当该 sqlsession 执行 update，commit，close，rollback 时该 sqlsession 就清除缓存。\n\n在 sql 语句中也可以设置清除缓存，只需要在 <select>、<insert> 和 <update> 等 sql 标签中设置 flushcache="true" 属性会强制清空本地缓存，使得下次查询时重新从数据库中获取数据。适用于一级缓存和二级缓存\n\n<select id="selectbyid" resulttype="com.example.user" flushcache="true">\n  select * from user where id = #{id}\n</select>\n\n\n1\n2\n3\n\n\n\n# 二级缓存\n\n二级缓存是为 namespace 也叫 mapper 级别的缓存，是跨 sqlsession 的，他会在原有的执行器上封装一个 cachingexecutor ，来管理缓存， cachingexecutor 使用了装饰器模式来装饰基础的 executor 执行器。\n\n\n# 解析\n\n在二级缓存中的配置方式具体如下\n\n\x3c!-- 必须先开启缓存 --\x3e\n<configuration>\n    <settings>\n        \x3c!--  true/false 二级缓存是否使用 --\x3e\n        <setting name="cacheenabled" value="true"/>\n    </settings>\n</configuration>\n\n\x3c!-- 指定在某个mapper中使用 --\x3e\n<mapper namespace="com.example.mymapper">\n    \x3c!-- 设置该mapper的二级缓存 --\x3e\n    <cache eviction="lru" flushinterval="100000" readonly="true" size="1024"/>\n    \x3c!-- usecache：表示是否使用二级缓存，如果设置为 true，则会使用二级缓存。对于 select 元素，默认值为 true。 --\x3e\n    \x3c!-- usecache 属性只能控制是否使用二级缓存，它不能关闭一级缓存。一级缓存是 mybatis 的默认行为，它总是开启的，无法关闭。 --\x3e\n    <select id="queryactivitybyid" parametertype="cn.bugstack.mybatis.test.po.activity" flushcache="false" usecache="true">\n        select activity_id, activity_name, activity_desc, create_time, update_time\n        from activity\n        <trim prefix="where" prefixoverrides="and | or" suffixoverrides="and">\n            <if test="null != activityid">\n                activity_id = #{activityid}\n            </if>\n        </trim>\n    </select>\n</mapper>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n其中 <cache > 标签有多个属性，这里一一介绍一下：\n\n * type：可以指定自定义缓存，但是该类必须实现，而且是全类名\n * eviction：缓存回收策略，默认为 lru（least recently used），策略介绍如下：\n   lru：按照访问时间排序，最近未使用的数据优先清除。\n   fifo：按照插入时间排序，先插入的数据先清除。\n   soft：基于垃圾回收算法，当系统内存不足时，会优先清理不常用的、占用内存较多的数据。\n   weak：弱引用机制，当 jvm 进行垃圾回收时，如果判断一个对象只被弱引用指向，则会将其回收。\n * flushinterval：刷新间隔时间，表示多长时间刷新一次缓存，单位为毫秒，默认不刷新。\n * size：缓存的大小，表示最多可以缓存多少个对象。\n * readonly：是否只读，默认为 false，表示启用缓存更新机制。\n * blocking：是否启用阻塞，默认为 false，表示不启用。\n\n> flushinterval 默认情况下，mybatis 采用基于 perpetualcache (永久缓存) 的缓存实现方式，即缓存会一直保存在内存中，直到会话关闭时才被清除。而当我们使用基于 ehcache 的缓存实现时，可以通过设置 flushinterval 属性控制缓存的刷新时间，即定时将缓存中的数据写入到磁盘或持久化存储中，以避免缓存过期、失效或内存溢出等问题。\n\n当 mybaits 启动后会读到二级缓存的配置，先会进行 <cache> 基础的解析，得到 xml 里面的属性值，其次用值信息组成一个 cache 对象，并把这个 cache 对象维护到全局配置 configuration 中，该全局配置里面是维护一个 map 结构的容器\n\n// 开始解析\nprivate void cacheelement(element context) {\n    if (context == null) return;\n    // 基础配置信息，默认是永恒缓存\n    string type = context.attributevalue("type", "perpetual");\n    class<? extends cache> typeclass = typealiasregistry.resolvealias(type);\n    // 缓存队列 fifo\n    string eviction = context.attributevalue("eviction", "fifo");\n    class<? extends cache> evictionclass = typealiasregistry.resolvealias(eviction);\n    long flushinterval = long.valueof(context.attributevalue("flushinterval"));\n    integer size = integer.valueof(context.attributevalue("size"));\n    boolean readwrite = !boolean.parseboolean(context.attributevalue("readonly", "false"));\n    boolean blocking = !boolean.parseboolean(context.attributevalue("blocking", "false"));\n\n    // 解析额外属性信息；<property name="cachefile" value="/tmp/xxx-cache.tmp"/>\n    list<element> elements = context.elements();\n    properties props = new properties();\n    for (element element : elements) {\n        props.setproperty(element.attributevalue("name"), element.attributevalue("value"));\n    }\n    // 构建缓存\n    builderassistant.usenewcache(typeclass, evictionclass, flushinterval, size, readwrite, blocking, props);\n}\n\n// 构建cache\npublic cache usenewcache(class<? extends cache> typeclass,\n                        class<? extends cache> evictionclass,\n                        long flushinterval,\n                        integer size,\n                        boolean readwrite,\n                        boolean blocking,\n                        properties props) {\n    // 判断为null，则用默认值\n    typeclass = valueordefault(typeclass, perpetualcache.class);\n    evictionclass = valueordefault(evictionclass, fifocache.class);\n\n    // 建造者模式构建 cache [currentnamespace=cn.bugstack.mybatis.test.dao.iactivitydao]\n    cache cache = new cachebuilder(currentnamespace)\n            .implementation(typeclass)\n            .adddecorator(evictionclass)\n            .clearinterval(flushinterval)\n            .size(size)\n            .readwrite(readwrite)\n            .blocking(blocking)\n            .properties(props)\n            .build();\n\n    // 添加缓存\n    configuration.addcache(cache);\n    // 给自己维护一个 cache 以便后续 mappedstatement 用到\n    currentcache = cache;\n    return cache;\n}\n\n// 添加到 configuration全局配置维护的 caches中\npublic class configuration {\n    // 缓存,存在map里\n    protected final map<string, cache> caches = new hashmap<>();\n    public void addcache(cache cache) {\n        caches.put(cache.getid(), cache);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n\n\n缓存解析过了，但是最主要的还是 <select> 标签着一些，标签上面描述了具体的缓存是否使用，缓存是否清除，所以还需要解析标签上的缓存信息，主要是 flushcache 和 usecache 这两个属性\n\n// 解析操作\npublic void parsestatementnode() {\n    string id = element.attributevalue("id");\n    // 参数类型\n    string parametertype = element.attributevalue("parametertype");\n    class<?> parametertypeclass = resolvealias(parametertype);\n    // 外部应用 resultmap\n    string resultmap = element.attributevalue("resultmap");\n    // 结果类型\n    string resulttype = element.attributevalue("resulttype");\n    class<?> resulttypeclass = resolvealias(resulttype);\n    // 获取命令类型(select|insert|update|delete)\n    string nodename = element.getname();\n    sqlcommandtype sqlcommandtype = sqlcommandtype.valueof(nodename.touppercase(locale.english));\n\n    boolean isselect = sqlcommandtype == sqlcommandtype.select;\n    boolean flushcache = boolean.parseboolean(element.attributevalue("flushcache", string.valueof(!isselect)));\n    boolean usecache = boolean.parseboolean(element.attributevalue("usecache", string.valueof(isselect)));\n\n    // 获取默认语言驱动器\n    class<?> langclass = configuration.getlanguageregistry().getdefaultdriverclass();\n    languagedriver langdriver = configuration.getlanguageregistry().getdriver(langclass);\n\n    // 解析<selectkey> step-14 新增\n    processselectkeynodes(id, parametertypeclass, langdriver);\n\n    // 解析成sqlsource，dynamicsqlsource/rawsqlsource\n    sqlsource sqlsource = langdriver.createsqlsource(configuration, element, parametertypeclass);\n\n    // 属性标记【仅对 insert 有用】, mybatis 会通过 getgeneratedkeys 或者通过 insert 语句的 selectkey 子元素设置它的值 step-14 新增\n    string keyproperty = element.attributevalue("keyproperty");\n\n    keygenerator keygenerator = null;\n    string keystatementid = id + selectkeygenerator.select_key_suffix;\n    keystatementid = builderassistant.applycurrentnamespace(keystatementid, true);\n\n    if (configuration.haskeygenerator(keystatementid)) {\n        keygenerator = configuration.getkeygenerator(keystatementid);\n    } else {\n        keygenerator = configuration.isusegeneratedkeys() && sqlcommandtype.insert.equals(sqlcommandtype) ? new jdbc3keygenerator() : new nokeygenerator();\n    }\n    // 调用助手类\n    builderassistant.addmappedstatement(id,\n            sqlsource,\n            sqlcommandtype,\n            parametertypeclass,\n            resultmap,\n            resulttypeclass,\n            flushcache,\n            usecache,\n            keygenerator,\n            keyproperty,\n            langdriver);\n}\n\n// 把信息添加到 mappedstatement对象\npublic mappedstatement addmappedstatement(\n        string id,\n        sqlsource sqlsource,\n        sqlcommandtype sqlcommandtype,\n        class<?> parametertype,\n        string resultmap,\n        class<?> resulttype,\n        boolean flushcache,\n        boolean usecache,\n        keygenerator keygenerator,\n        string keyproperty,\n        languagedriver lang\n) {\n    // 给id加上namespace前缀：cn.bugstack.mybatis.test.dao.iuserdao.queryuserinfobyid\n    id = applycurrentnamespace(id, false);\n    //是否是select语句\n    boolean isselect = sqlcommandtype == sqlcommandtype.select;\n\n    mappedstatement.builder statementbuilder = new mappedstatement.builder(configuration, id, sqlcommandtype, sqlsource, resulttype);\n    statementbuilder.resource(resource);\n    statementbuilder.keygenerator(keygenerator);\n    statementbuilder.keyproperty(keyproperty);\n\n    // 结果映射，给 mappedstatement#resultmaps\n    setstatementresultmap(resultmap, resulttype, statementbuilder);\n    // 维护缓存信息\n    setstatementcache(isselect, flushcache, usecache, currentcache, statementbuilder);\n    mappedstatement statement = statementbuilder.build();\n    // 映射语句信息，建造完存放到配置项中\n    configuration.addmappedstatement(statement);\n    return statement;\n}\n\n// 给statement添加缓存信息\nprivate void setstatementcache(\n        boolean isselect,\n        boolean flushcache,\n        boolean usecache,\n        cache cache,\n        mappedstatement.builder statementbuilder) {\n    flushcache = valueordefault(flushcache, !isselect);\n    usecache = valueordefault(usecache, isselect);\n    statementbuilder.flushcacherequired(flushcache);\n    statementbuilder.usecache(usecache);\n    statementbuilder.cache(cache);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n\n\n在具体的 addmappedstatement 的时候，可以看到会得到一个 mappedstatement 对象，该对象就是封装了 sql 标签的所有信息，在 setstatementcache 方法中，不仅只把 flushcache和usecache 进行了设置，额外的还带有一个 cache ，该 cache 就是在调用 usenewcache 方法，内部赋值的 currentcache ，他们的方法是在同一个类中，因此可以使用。这样 mappedstatement 对象也就拥有了 <cache> 标签的能力，到此解析完毕\n\n\n# 准备\n\n和一级缓存一样，都是在 opensession 的时候去做实例化，但是不同的是，二级缓存会在一级缓存上进行一个装饰，并且首要会判断是否允许开启二级缓存。\n\nif (cacheenabled) {\n    executor = new cachingexecutor(executor);\n}\n\n\n1\n2\n3\n\n\ncachingexecutor 接收 executor ，并对其进行包装，内部方法依然调用的是 baseexecutor 的相关方法。 cachingexecutor 内部还维护了 transactionalcachemanager 事务缓存管理器，该管理器内部维护 map<cache, transactionalcache> ， transactionalcache 内部又维护了 cache 以及 entriesmissedincache 和 entriestoaddoncommit\n\n\n# 执行\n\npublic class cachingexecutor implements executor {\n\n    private logger logger = loggerfactory.getlogger(cachingexecutor.class);\n    private executor delegate;\n    // 事务缓存管理器\n    private transactionalcachemanager tcm = new transactionalcachemanager();\n\n    public cachingexecutor(executor delegate) {\n        this.delegate = delegate;\n        delegate.setexecutorwrapper(this);\n    }\n\n    @override\n    public int update(mappedstatement ms, object parameter) throws sqlexception {\n        return delegate.update(ms, parameter);\n    }\n\n    @override\n    public <e> list<e> query(mappedstatement ms, object parameter, rowbounds rowbounds, resulthandler resulthandler, cachekey key, boundsql boundsql) throws sqlexception {\n        cache cache = ms.getcache();\n        if (cache != null) {\n            flushcacheifrequired(ms);\n            if (ms.isusecache() && resulthandler == null) {\n                @suppresswarnings("unchecked")\n                list<e> list = (list<e>) tcm.getobject(cache, key);\n                if (list == null) {\n                    list = delegate.<e>query(ms, parameter, rowbounds, resulthandler, key, boundsql);\n                    // cache：缓存队列实现类，fifo\n                    // key：哈希值 [mappedstatementid + offset + limit + sql + queryparams + environment]\n                    // list：查询的数据\n                    tcm.putobject(cache, key, list);\n                }\n                // 打印调试日志，记录二级缓存获取数据\n                if (logger.isdebugenabled() && cache.getsize() > 0) {\n                    logger.debug("二级缓存：{}", json.tojsonstring(list));\n                }\n                return list;\n            }\n        }\n        return delegate.<e>query(ms, parameter, rowbounds, resulthandler, key, boundsql);\n    }\n\n    @override\n    public <e> list<e> query(mappedstatement ms, object parameter, rowbounds rowbounds, resulthandler resulthandler) throws sqlexception {\n        // 1. 获取绑定sql\n        boundsql boundsql = ms.getboundsql(parameter);\n        // 2. 创建缓存key\n        cachekey key = createcachekey(ms, parameter, rowbounds, boundsql);\n        return query(ms, parameter, rowbounds, resulthandler, key, boundsql);\n    }\n\n    @override\n    public transaction gettransaction() {\n        return delegate.gettransaction();\n    }\n\n    @override\n    public void commit(boolean required) throws sqlexception {\n        delegate.commit(required);\n        tcm.commit();\n    }\n\n    @override\n    public void rollback(boolean required) throws sqlexception {\n        try {\n            delegate.rollback(required);\n        } finally {\n            if (required) {\n                tcm.rollback();\n            }\n        }\n    }\n\n    @override\n    public void close(boolean forcerollback) {\n        try {\n            if (forcerollback) {\n                tcm.rollback();\n            } else {\n                tcm.commit();\n            }\n        } finally {\n            delegate.close(forcerollback);\n        }\n    }\n\n    @override\n    public void clearlocalcache() {\n        delegate.clearlocalcache();\n    }\n\n    @override\n    public cachekey createcachekey(mappedstatement ms, object parameterobject, rowbounds rowbounds, boundsql boundsql) {\n        return delegate.createcachekey(ms, parameterobject, rowbounds, boundsql);\n    }\n\n    @override\n    public void setexecutorwrapper(executor executor) {\n        throw new unsupportedoperationexception("this method should not be called");\n    }\n\n    private void flushcacheifrequired(mappedstatement ms) {\n        cache cache = ms.getcache();\n        if (cache != null && ms.isflushcacherequired()) {\n            tcm.clear(cache);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n\n\npublic class transactionalcachemanager {\n\n    private map<cache, transactionalcache> transactionalcaches = new hashmap<>();\n\n    public void clear(cache cache) {\n        gettransactionalcache(cache).clear();\n    }\n\n    /**\n     * 得到某个transactionalcache的值\n     */\n    public object getobject(cache cache, cachekey key) {\n        return gettransactionalcache(cache).getobject(key);\n    }\n\n    public void putobject(cache cache, cachekey key, object value) {\n        gettransactionalcache(cache).putobject(key, value);\n    }\n\n    /**\n     * 提交时全部提交\n     */\n    public void commit() {\n        for (transactionalcache txcache : transactionalcaches.values()) {\n            txcache.commit();\n        }\n    }\n\n    /**\n     * 回滚时全部回滚\n     */\n    public void rollback() {\n        for (transactionalcache txcache : transactionalcaches.values()) {\n            txcache.rollback();\n        }\n    }\n\n    private transactionalcache gettransactionalcache(cache cache) {\n        transactionalcache txcache = transactionalcaches.get(cache);\n        if (txcache == null) {\n            txcache = new transactionalcache(cache);\n            transactionalcaches.put(cache, txcache);\n        }\n        return txcache;\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\npublic class transactionalcache implements cache {\n\n    private cache delegate;\n    // commit 时要不要清缓存\n    private boolean clearoncommit;\n    // commit 时要添加的元素\n    private map<object, object> entriestoaddoncommit;\n    private set<object> entriesmissedincache;\n\n    public transactionalcache(cache delegate) {\n        // delegate = fifocache\n        this.delegate = delegate;\n        // 默认 commit 时不清缓存\n        this.clearoncommit = false;\n        this.entriestoaddoncommit = new hashmap<>();\n        this.entriesmissedincache = new hashset<>();\n    }\n\n    @override\n    public string getid() {\n        return delegate.getid();\n    }\n\n    @override\n    public int getsize() {\n        return delegate.getsize();\n    }\n\n    @override\n    public object getobject(object key) {\n        // key：cachekey 拼装后的哈希码\n        object object = delegate.getobject(key);\n        if (object == null) {\n            entriesmissedincache.add(key);\n        }\n        return clearoncommit ? null : object;\n    }\n\n    @override\n    public void putobject(object key, object object) {\n        entriestoaddoncommit.put(key, object);\n    }\n\n    @override\n    public object removeobject(object key) {\n        return null;\n    }\n\n    @override\n    public void clear() {\n        clearoncommit = true;\n        entriestoaddoncommit.clear();\n    }\n\n    public void commit() {\n        if (clearoncommit) {\n            delegate.clear();\n        }\n        flushpendingentries();\n        reset();\n    }\n\n    public void rollback() {\n        unlockmissedentries();\n        reset();\n    }\n\n    private void reset() {\n        clearoncommit = false;\n        entriestoaddoncommit.clear();\n        entriesmissedincache.clear();\n    }\n\n    /**\n     * 刷新数据到 mappedstatement#cache 中，也就是把数据填充到 mapper xml 级别下。\n     * flushpendingentries 方法把事务缓存下的数据，填充到 fifocache 中。\n     */\n    private void flushpendingentries() {\n        for (map.entry<object, object> entry : entriestoaddoncommit.entryset()) {\n            delegate.putobject(entry.getkey(), entry.getvalue());\n        }\n        for (object entry : entriesmissedincache) {\n            if (!entriestoaddoncommit.containskey(entry)) {\n                delegate.putobject(entry, null);\n            }\n        }\n    }\n\n    private void unlockmissedentries() {\n        for (object entry : entriesmissedincache) {\n            delegate.putobject(entry, null);\n        }\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n\n\n其实上面饶了一圈下来，最终操作的是 mappedstatement 维护的 cache 对象， mappedstatement 是被全局 configuration 在缓存的，所以查询结束不会清除 mappedstatement 对象和缓存信息，只有当触发 update，commit，rollback 等才会清除 mappedstatement 里维护的缓存信息',charsets:{cjk:!0}},{title:"MyBatis Plus+Spring Boot 实现一二级缓存以及自定义缓存",frontmatter:{title:"MyBatis Plus+Spring Boot 实现一二级缓存以及自定义缓存",date:"2023-06-25T09:22:36.000Z",permalink:"/mybatis/303/",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/00.java/30.Mybatis/303.MyBatis%20Plus+Spring%20Boot%20%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BC%93%E5%AD%98.html",relativePath:"00.java/30.Mybatis/303.MyBatis Plus+Spring Boot 实现一二级缓存以及自定义缓存.md",key:"v-4167bf9c",path:"/mybatis/303/",headers:[{level:2,title:"一级缓存",slug:"一级缓存",normalizedTitle:"一级缓存",charIndex:2},{level:2,title:"二级缓存",slug:"二级缓存",normalizedTitle:"二级缓存",charIndex:667},{level:2,title:"自定义缓存",slug:"自定义缓存",normalizedTitle:"自定义缓存",charIndex:1802}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"一级缓存 二级缓存 自定义缓存",content:'# 一级缓存\n\n首先需要在 application.yml 中进行配置\n\nmybatis-plus:\n  # 指定具体xml路径 全路径\n  mapper-locations: classpath*:/com/fengqianrun/mybatisplus/**/*Mapper.xml\n  # 设置实体路径位置\n  type-aliases-package: com.fengqianrun.mybatisplus.bean\n  configuration:\n    # 开启一级缓存,默认是开启的\n    local-cache-scope: SESSION\n  GlobalConfig:\n    # 关闭 banner 效果\n    banner: false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n其次在查询方法上使用注解 @Transactional，@Transactional 代表就像一个 session，我们在这里面重复执行查询，就只会查询一次\n\n@Transactional\n@GetMapping("/testOne")\npublic UserBean testOne(){\n    UserBean userBean = cacheOneMapper.testOne();\n    userBean = null;\n    userBean = cacheOneMapper.testOne();\n    return userBean;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 二级缓存\n\n首先，在 application.yml 配置文件中添加如下配置：\n\nmybatis-plus:\n  configuration:\n    # 开启二级缓存\n    cache-enabled: true\n\n\n1\n2\n3\n4\n\n\n必须实现要给对象进行 Serializable，例如：\n\n@Data\n@TableName("user")\npublic class UserBean implements Serializable {\n    // ...\n}\n\n\n1\n2\n3\n4\n5\n\n\n最后，需要在 Mapper 接口中使用 @CacheNamespace ，使用该注解可以方便地为每个 Mapper 接口定义独立的缓存空间，并指定不同的缓存实现和缓存策略，从而更好地控制缓存效果。\n\n@Mapper\n@CacheNamespace(eviction = FifoCache.class)\npublic interface CacheTwoMapper extends BaseMapper<UserBean> {\n    List<UserBean> testAll();\n    UserBean testOne();\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n但如果 Mapper 接口有对应的 XML，则需要在 XML 描述 cache，使用注解 @CacheNamespace 就会失效，两个一起存在就会报错\n\n<mapper namespace="com.fengqianrun.mybatisplus.cache2.CacheTwoMapper">\n    <cache eviction="fifo"/>\n    <select id="testAll" resultType="com.fengqianrun.mybatisplus.bean.UserBean">\n        select * from user\n    </select>\n    <select id="testOne" resultType="com.fengqianrun.mybatisplus.bean.UserBean">\n        select * from user where id = 1\n    </select>\n</mapper>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n二级缓存默认情况下是使用 MyBatis 自带的 PerpetualCache 实现，可以通过配置文件中的属性来设置缓存实现类和其他参数。另外，在使用二级缓存时，\n需要注意避免数据并发更新导致脏数据的问题，可以通过设置缓存刷新时间等方式来解决这个问题。\n\n\n# 自定义缓存\n\n如果你是但应用程序的话，使用以上的配置方式没有问题，但如果你是分布式或微服务，那么就会造成数据不一致的问题，此时我们需要借助其他缓存，比如 Redis 来缓存我们的查询数据。自定义缓存也只是在二级缓存基础上的改造，所以规则和二级缓存一样。\n\n实现 org.apache.ibatis.cache.Cache 类\n\npublic class MyCache implements Cache {\n\n    /**\n     * id 会是 mapper 接口的名称\n     */\n    private final String id;\n\n    /**\n     * 可以替换为 Redis\n     */\n    private Map<Object, Object> cache = new ConcurrentHashMap<Object, Object>();\n\n    public MyCache(String id) {\n        this.id = id;\n    }\n\n    /**\n     * 缓存唯一标识\n     * @return\n     */\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    /**\n     * 将键值对放入缓存中\n     * @param key\n     * @param value\n     */\n    @Override\n    public void putObject(Object key, Object value) {\n        System.out.println("添加-自定义缓存: "+key+"  "+value);\n        cache.put(key, value);\n    }\n\n    /**\n     * 从缓存中获取指定键的值\n     * @param key\n     */\n    @Override\n    public Object getObject(Object key) {\n        System.out.println("查询-自定义缓存: "+key);\n        return cache.get(key);\n    }\n\n    /**\n     * 从缓存中移除指定键的值\n     * @param key\n     */\n    @Override\n    public Object removeObject(Object key) {\n        return cache.remove(key);\n    }\n\n    /**\n     * 清空缓存\n     */\n    @Override\n    public void clear() {\n        cache.clear();\n    }\n\n    /**\n     * 获取缓存中键值对的数量\n     * @return\n     */\n    @Override\n    public int getSize() {\n        return cache.size();\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n\n\n具体的 mapper\n\n@Mapper\n@CacheNamespace(implementation = MyCache.class,eviction = FifoCache.class)\npublic interface CacheThreeMapper extends BaseMapper<UserBean> {\n\n    @Select("select * from user")\n    List<UserBean> testAll();\n\n    @Select("select * from user where id = 1")\n    UserBean testOne();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n> 我们还可以在 mapper 接口上加 @CacheNamespaceRef 注解，当我们在一个 Mapper 接口中需要使用其他 Mapper 接口所定义的缓存时，可以通过 @CacheNamespaceRef 注解来实现。该注解用于指定另一个 Mapper 接口的 Class 对象，表示当前 Mapper 接口需要引用该接口所定义的缓存命名空间。@CacheNamespaceRef (XXXXXMapper.class)',normalizedContent:'# 一级缓存\n\n首先需要在 application.yml 中进行配置\n\nmybatis-plus:\n  # 指定具体xml路径 全路径\n  mapper-locations: classpath*:/com/fengqianrun/mybatisplus/**/*mapper.xml\n  # 设置实体路径位置\n  type-aliases-package: com.fengqianrun.mybatisplus.bean\n  configuration:\n    # 开启一级缓存,默认是开启的\n    local-cache-scope: session\n  globalconfig:\n    # 关闭 banner 效果\n    banner: false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n其次在查询方法上使用注解 @transactional，@transactional 代表就像一个 session，我们在这里面重复执行查询，就只会查询一次\n\n@transactional\n@getmapping("/testone")\npublic userbean testone(){\n    userbean userbean = cacheonemapper.testone();\n    userbean = null;\n    userbean = cacheonemapper.testone();\n    return userbean;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 二级缓存\n\n首先，在 application.yml 配置文件中添加如下配置：\n\nmybatis-plus:\n  configuration:\n    # 开启二级缓存\n    cache-enabled: true\n\n\n1\n2\n3\n4\n\n\n必须实现要给对象进行 serializable，例如：\n\n@data\n@tablename("user")\npublic class userbean implements serializable {\n    // ...\n}\n\n\n1\n2\n3\n4\n5\n\n\n最后，需要在 mapper 接口中使用 @cachenamespace ，使用该注解可以方便地为每个 mapper 接口定义独立的缓存空间，并指定不同的缓存实现和缓存策略，从而更好地控制缓存效果。\n\n@mapper\n@cachenamespace(eviction = fifocache.class)\npublic interface cachetwomapper extends basemapper<userbean> {\n    list<userbean> testall();\n    userbean testone();\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n但如果 mapper 接口有对应的 xml，则需要在 xml 描述 cache，使用注解 @cachenamespace 就会失效，两个一起存在就会报错\n\n<mapper namespace="com.fengqianrun.mybatisplus.cache2.cachetwomapper">\n    <cache eviction="fifo"/>\n    <select id="testall" resulttype="com.fengqianrun.mybatisplus.bean.userbean">\n        select * from user\n    </select>\n    <select id="testone" resulttype="com.fengqianrun.mybatisplus.bean.userbean">\n        select * from user where id = 1\n    </select>\n</mapper>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n二级缓存默认情况下是使用 mybatis 自带的 perpetualcache 实现，可以通过配置文件中的属性来设置缓存实现类和其他参数。另外，在使用二级缓存时，\n需要注意避免数据并发更新导致脏数据的问题，可以通过设置缓存刷新时间等方式来解决这个问题。\n\n\n# 自定义缓存\n\n如果你是但应用程序的话，使用以上的配置方式没有问题，但如果你是分布式或微服务，那么就会造成数据不一致的问题，此时我们需要借助其他缓存，比如 redis 来缓存我们的查询数据。自定义缓存也只是在二级缓存基础上的改造，所以规则和二级缓存一样。\n\n实现 org.apache.ibatis.cache.cache 类\n\npublic class mycache implements cache {\n\n    /**\n     * id 会是 mapper 接口的名称\n     */\n    private final string id;\n\n    /**\n     * 可以替换为 redis\n     */\n    private map<object, object> cache = new concurrenthashmap<object, object>();\n\n    public mycache(string id) {\n        this.id = id;\n    }\n\n    /**\n     * 缓存唯一标识\n     * @return\n     */\n    @override\n    public string getid() {\n        return id;\n    }\n\n    /**\n     * 将键值对放入缓存中\n     * @param key\n     * @param value\n     */\n    @override\n    public void putobject(object key, object value) {\n        system.out.println("添加-自定义缓存: "+key+"  "+value);\n        cache.put(key, value);\n    }\n\n    /**\n     * 从缓存中获取指定键的值\n     * @param key\n     */\n    @override\n    public object getobject(object key) {\n        system.out.println("查询-自定义缓存: "+key);\n        return cache.get(key);\n    }\n\n    /**\n     * 从缓存中移除指定键的值\n     * @param key\n     */\n    @override\n    public object removeobject(object key) {\n        return cache.remove(key);\n    }\n\n    /**\n     * 清空缓存\n     */\n    @override\n    public void clear() {\n        cache.clear();\n    }\n\n    /**\n     * 获取缓存中键值对的数量\n     * @return\n     */\n    @override\n    public int getsize() {\n        return cache.size();\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n\n\n具体的 mapper\n\n@mapper\n@cachenamespace(implementation = mycache.class,eviction = fifocache.class)\npublic interface cachethreemapper extends basemapper<userbean> {\n\n    @select("select * from user")\n    list<userbean> testall();\n\n    @select("select * from user where id = 1")\n    userbean testone();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n> 我们还可以在 mapper 接口上加 @cachenamespaceref 注解，当我们在一个 mapper 接口中需要使用其他 mapper 接口所定义的缓存时，可以通过 @cachenamespaceref 注解来实现。该注解用于指定另一个 mapper 接口的 class 对象，表示当前 mapper 接口需要引用该接口所定义的缓存命名空间。@cachenamespaceref (xxxxxmapper.class)',charsets:{cjk:!0}},{title:"Docker 概念、命令及Dockerfile介绍",frontmatter:{title:"Docker 概念、命令及Dockerfile介绍",date:"2023-06-25T09:22:36.000Z",permalink:"/docker/400",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/01.%E8%BF%90%E7%BB%B4/40.Docker/400.Docker%20%E6%A6%82%E5%BF%B5%E3%80%81%E5%91%BD%E4%BB%A4%E5%8F%8ADockerfile%E4%BB%8B%E7%BB%8D.html",relativePath:"01.运维/40.Docker/400.Docker 概念、命令及Dockerfile介绍.md",key:"v-7dd6a16f",path:"/docker/400/",headers:[{level:2,title:"1.docker的感念，docker是什么",slug:"_1-docker的感念-docker是什么",normalizedTitle:"1.docker 的感念，docker 是什么",charIndex:2},{level:2,title:"2.docker基础命令",slug:"_2-docker基础命令",normalizedTitle:"2.docker 基础命令",charIndex:228},{level:2,title:"3.修改已经存在容器的端口",slug:"_3-修改已经存在容器的端口",normalizedTitle:"3. 修改已经存在容器的端口",charIndex:1900},{level:2,title:"4.制作镜像的基本命令",slug:"_4-制作镜像的基本命令",normalizedTitle:"4. 制作镜像的基本命令",charIndex:2414},{level:3,title:"概念",slug:"概念",normalizedTitle:"概念",charIndex:2431},{level:3,title:"命令",slug:"命令",normalizedTitle:"命令",charIndex:239},{level:3,title:"实战构建SpringBoot应用",slug:"实战构建springboot应用",normalizedTitle:"实战构建 springboot 应用",charIndex:4504},{level:2,title:"5. Docker 使用阿里云仓库或自建仓库",slug:"_5-docker-使用阿里云仓库或自建仓库",normalizedTitle:"5. docker 使用阿里云仓库或自建仓库",charIndex:5485},{level:3,title:"阿里云仓库",slug:"阿里云仓库",normalizedTitle:"阿里云仓库",charIndex:5497},{level:3,title:"自建仓库",slug:"自建仓库",normalizedTitle:"自建仓库",charIndex:5503},{level:2,title:"6. 上传DockerHub",slug:"_6-上传dockerhub",normalizedTitle:"6. 上传 dockerhub",charIndex:5889}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"1.docker的感念，docker是什么 2.docker基础命令 3.修改已经存在容器的端口 4.制作镜像的基本命令 概念 命令 实战构建SpringBoot应用 5. Docker 使用阿里云仓库或自建仓库 阿里云仓库 自建仓库 6. 上传DockerHub",content:'# 1.docker 的感念，docker 是什么\n\ndocker 分为三种感念：镜像 容器 仓库\n镜像：类似于一个模板，里面包含了一些内容\n容器：容器是一个镜像的实例，如果理解镜像为一个 class，那么容器就被理解为是 new class (); 是镜像的实例\n仓库：就是下载镜像资源的地方。\ndocker 容器不是虚拟机，容器可以说是一个进程，我们可以给容器分配内存。就像 windows 安装了虚拟机，可以给虚拟机分配内存大小，磁盘空间。\n\n\n# 2.docker 基础命令\n\n搜索镜像，从 maven 仓库中查询\n\ndocker search mysql\n\n\n1\n\n\n列出当前系统存在的镜像\n\ndocker images\n\n\n1\n\n\n给镜像更换名称\n\ndocker tag imageId repository:tag\n\n\n1\n\n\n删除镜像 (-f 强制) 必须知道镜像的 imageId\n\ndocker rmi -f imageId\n\n\n1\n\n\nrepository:tag (镜像的仓库源：镜像的标签) 拉取\n\ndocker pull repository:tag\n\n\n1\n\n\n运行一个容器\n\ndocker run -it  -d --name "xxx" -p port1:port2 -p port3:port4 -v home/data:/data repository:tag \n\n\n1\n\n * run：运行容器命令\n * -it：运行后直接与终端交互，比如运行 jar 或其他应用的时候 查看他们的启动信息\n * -d：后台运行\n * -p port1:port2：端口映射 port1 (宿主机) port2 (容器) 容器的端口是可以重复的，所以容器和物理机的端口可以一致。rabbitmq 有两个端口 5672 和 15672 所以会用到双 -p repository:tag -> 如果不指定 tag，默认使用最新的\n * --name "xxx"：指定容器名称\n * -v /home/data:/data：/home/data (宿主机):/data (容器) 本地地址和容器地址产生挂载关系， 在容器内部该目录下，或者宿主机内部该目录下，修改文件、创建文件，彼此都会同步修改\n * --restart=always：总是运行，当重启 docker 后会自动运行起来\n * repository:tag：指定运行镜像的名称\n\n查看运行的容器\n\ndocker ps \n\n\n1\n\n\n查看所有状态的容器\n\ndocker ps -a\n\n\n1\n\n\n检查容器内部信息\n\ndocker inspect 容器名称|容器前12位id\n\n\n1\n\n\n停止容器\n\ndocker stop 容器名称|容器前12位id\n\n\n1\n\n\n开启容器运行\n\ndocker start 容器名称\n\n\n1\n\n\n删除容器之前必须先停止容器运行\n\ndocker rm 容器名称\n\n\n1\n\n\n查看容器日志\n\ndokcer logs -f 容器id\n\n\n1\n\n\n进入容器内部\n\ndocker exec -it mysql bash#  进入mysql内部\nmysql -uroot -p123456#  登录mysql服务 注意这里mysql -uroot -p123456 是连起来的\n\n\n1\n2\n\n\n把一个容器制作为一个新的镜像\n\ndocker commit \n -m="提交信息" \n -a="作者" \n 容器id\n 自定义镜像名称:[自定义标签名]\n\n\n1\n2\n3\n4\n5\n\n\n查看容器的信息\n\ndocker inspect 容器ID\n\n\n1\n\n\n对于没有私有仓库的要使服务器间共享一个 docker 镜像，可以先把某台机器上的进行先导出，然后其他服务器在导入即可\n\n# 导出\ndocker save \n 镜像ID\n -o /本地路径/文件.tar  这句话意思导出到你宿主机的一个地址，文件名随便起后缀为tar，路径要提前建好\n\n# 导入\ndocker load < /上传文件的地址/导出的文件名.tar\n\n# 查看导入的镜像\ndocker images\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n容器之间共享，容器 2 共用 容器 1\n\ndocker tun -it \n  -- name 容器2\n  --volumes-from 容器1(容器1必须已启动)\n  镜像名称\n\n\n1\n2\n3\n4\n\n\n查看制作镜像时叠加其他镜像的操作\n\ndocker history 镜像ID\n\n\n1\n\n\n\n# 3. 修改已经存在容器的端口\n\n1、停止容器 (docker stop d00254ce3af7)\n2、停止 docker 服务 (systemctl stop docker)\n3、修改这个容器的 hostconfig.json 文件中的端口（原帖有人提到，如果 config.v2.json 里面也记录了端口，也要修改）\n\ncd /var/lib/docker/containers/d00254ce3af7*    # 这里是CONTAINER ID\n\nvim hostconfig.json\n如果之前没有端口映射, 应该有这样的一段:\n"PortBindings":{}\n\n增加一个映射, 这样写:\n"PortBindings":{"8080/tcp":[{"HostIp":"","HostPort":"60000"}]}\n前一个数字是容器端口, 后一个是宿主机端口。将宿主机的60000端口映射到容器的8080端口\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n4、启动 docker 服务 (systemctl start docker)\n5、启动容器 (docker start d00254ce3af7)\n\n\n# 4. 制作镜像的基本命令\n\n\n# 概念\n\n\n\nDockerfile 默认会把当前所在文件的上下问都发送给 Docker Server，最终制作成一个镜像，比如你得 DockerFile 在 linux 的根 (/) 目录，那么就会递归根目录下的所有文件，发送到 Docker Server 制作镜像，所以制作 Dockerfile 最好是在某一个地方新建文件夹去制作。制作过程都是依赖于一个个的镜像，所以会有缓存加速下次制作，如果不需要依赖缓存 可以在命令制作的最后面加 --no-cache\n\n.dockerIgnore 是用来忽略哪些文件或目录不参与到制作镜像中\n\n制作命令： docker build -f /home/docker/nginx/Dockerfile . -f 用来指定 Dockerfile 所在的位置，一般会使用 docker build -t nginx2 . -t 在当前目录制作镜像， nginx2 镜像的名字， . 代表 Dockerfile 就在当前目录\n\n\n# 命令\n\n指令            描述\nFROM          构建的新镜像是基于哪个镜像。例如：FROM centos:6，第一个指令必须是 FROM\nMAINTAINER    镜像维护者姓名或邮箱地址。例如：MAINTAINER Mr.chen\nRUN           构建镜像时运行的 Shell 命令。例如：RUN ["yum","install","httpd"] 也可以直接 RUN\n              yum install httpd 或者 RUN yum install httpd\nCMD           容器运行时执行的Shell命令 （编写的 dockerfile 中多个 cmd 都会执行，但默认保留最后一个命令，如果\n              docker run 运行时传递 command，会覆盖 cmd 的保留命令），启动容器会执行 CMD\n              的保留命令。例如：CMD ["-c","/start.sh"] 也可以是 CMD echo \'hello docker\'\nEXPOSE        声明容器运行的服务端口。例如：EXPOSE 80 443，但是默认都是 tcp 协议，如果想要暴漏 udp 协议，则是\n              EXPOSE 80/udp ，注意只能是 tcp 或 udp\nENV           设置容器内的环境变量。例如：ENV MYSQL_ROOT_PASSWORD 123456\nADD           将宿主机目录下的文件拷贝进镜像且 ADD 命令会自动处理 URL 和解压 tar 包 例如：ADD\n              ["src","dest"] 或者 ADD https://xxx.com/html.tar.gz\n              /var/www/html 或者：ADD html.tar.gz/var/www/html\nCOPY          拷贝文件或目录到镜像（不能自动解压缩）。例如：COPY ./start.sh/start.sh\nENTRYPOINT    运行容器时执行的 Shell 命令（不能被运行时传递的参数覆盖)，比 CMD 牛皮一些。例如：ENTRYPOINT\n              ["/bin/bash","-c","/start.sh"] 或者 ENTRYPOINT /bin/bash -c\n              "/start.sh"\nVOLUME        指定容器挂载点到宿主机自动生成的目录或其他容器 例如：VOLUME ["/var/lib/mysql"]\nUSER          为 RUN，CMD 和 ENTRYPOINT 执行命令指定运行用户 例如：USER Mr_chen\nWORKDIR       指定在创建容器后，终端默认登录进来的工作目录，一个落脚点 例如：WORKDIR /data， 该命令也会影响\n              ENTRYPOINT 运行例如jar包时的位置，默认会自带WORKDIR的路径\nHEALTHCHECK   健康检查。例如：HEALTHCHECK --interval=5m --timeout=3s --retries=3\n              CMD curl -f http://localhost/ exit 1\nARG           在构建镜像时指定一些参数。例如：ARG user\nONBUILD       当镜像被继承后触发在 ONBUILD 里写的命令，继承者直接使用 FROM 命令继承当前镜像的名称即可，在 build\n              的时候触发\n\n提示\n\n从 docker17.05 版本开始，dockerfile 中允许使用多个 FROM 指令\n\n\n# 实战构建 SpringBoot 应用\n\n在应用的根目录中创建 Dockerfile，具体构建之前一定要了解 SpringBoot 配置文件的加载路径优先级，这里牵扯到我们在修改配置文件时，可以指定挂载外部文件修改后同步到容器，否则，每改一次都要重新制作镜像\n\n提示\n\nSpringBoot 配置文件的加载路径优先级：\n工程根目录:./config/\n工程根目录：./\nclasspath:/config/\nclasspath:/\n\n# 基础镜像\nFROM openjdk:8-jre-slim\n# 作者\nMAINTAINER biguncle\n# 配置\nENV PARAMS=""\nEXPOSE 8081\n# 时区\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n# 添加应用\nADD ./target/tool-boot-0.0.1-SNAPSHOT.jar /server/tool-boot.jar\n# 创建一个工作目录，并将外部配置文件复制到镜像中\nRUN mkdir /server/config\nCOPY /src/main/resources/application.yml /app/config/\nWORKDIR /server\n## 在镜像运行为容器后执行的命令\nENTRYPOINT java -jar -Dpolyglot.engine.WarnInterpreterOnly=false tool-boot.jar  $PARAMS\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n执行命令\n\n#build 构建应用的镜像\ndocker build -f ./Dockerfile -t 875730567/easy-manager-tool .\n\n\n1\n2\n\n\n运行容器\n\n#build 构建应用的镜像\ndocker run -p 8081:8081 --name -v /opt:/server/config easy-manager-tool -d 875730567/easy-manager-tool\n\n\n1\n2\n\n\n\n# 5. Docker 使用阿里云仓库或自建仓库\n\n\n# 阿里云仓库\n\n 1. 先登录阿里云镜像服务，地址\n 2. 创建个人或企业实例\n 3. 创建镜像仓库，这个仓库可以建多个，看自己\n 4. 创建完毕之后可以根据阿里云提供的步骤进行推送或拉取\n\n\n\n如果我们只是想用阿里云的镜像加速器，可以找到如下图操作即可。\n\n\n\n\n# 自建仓库\n\n 1. 拉取仓库镜像\n\ndocker pull registry\n\n\n1\n\n 2. 运行镜像\n\ndocker run -d -v /edc/images/registry:/var/lib/registry \n-p 5000:5000 \n--restart=always \n--name xdp-registry registry\n\n\n1\n2\n3\n4\n\n 3. 查看镜像信息\n\ncurl http://127.0.0.1:5000/v2/_catalog\n\n\n1\n\n\n\n# 6. 上传 DockerHub\n\n 1. 首先保证你登录\n\ndocker login --username=xxxx\n\n\n1\n\n 2. 构建镜像\n\ndocker build -t 账号/应用名称 -f Dockerfile .\n\n\n1\n\n 3. 在 DockerHub 新建仓库 https://hub.docker.com/\n 4. 给镜像打一个 tag 标签\n\ndocker tag 账号/应用名称 账号/标签名称:标签版本\n\n\n1\n\n 5. 上传\n\ndocker push 账号/标签名称:标签版本\n\n\n1\n',normalizedContent:'# 1.docker 的感念，docker 是什么\n\ndocker 分为三种感念：镜像 容器 仓库\n镜像：类似于一个模板，里面包含了一些内容\n容器：容器是一个镜像的实例，如果理解镜像为一个 class，那么容器就被理解为是 new class (); 是镜像的实例\n仓库：就是下载镜像资源的地方。\ndocker 容器不是虚拟机，容器可以说是一个进程，我们可以给容器分配内存。就像 windows 安装了虚拟机，可以给虚拟机分配内存大小，磁盘空间。\n\n\n# 2.docker 基础命令\n\n搜索镜像，从 maven 仓库中查询\n\ndocker search mysql\n\n\n1\n\n\n列出当前系统存在的镜像\n\ndocker images\n\n\n1\n\n\n给镜像更换名称\n\ndocker tag imageid repository:tag\n\n\n1\n\n\n删除镜像 (-f 强制) 必须知道镜像的 imageid\n\ndocker rmi -f imageid\n\n\n1\n\n\nrepository:tag (镜像的仓库源：镜像的标签) 拉取\n\ndocker pull repository:tag\n\n\n1\n\n\n运行一个容器\n\ndocker run -it  -d --name "xxx" -p port1:port2 -p port3:port4 -v home/data:/data repository:tag \n\n\n1\n\n * run：运行容器命令\n * -it：运行后直接与终端交互，比如运行 jar 或其他应用的时候 查看他们的启动信息\n * -d：后台运行\n * -p port1:port2：端口映射 port1 (宿主机) port2 (容器) 容器的端口是可以重复的，所以容器和物理机的端口可以一致。rabbitmq 有两个端口 5672 和 15672 所以会用到双 -p repository:tag -> 如果不指定 tag，默认使用最新的\n * --name "xxx"：指定容器名称\n * -v /home/data:/data：/home/data (宿主机):/data (容器) 本地地址和容器地址产生挂载关系， 在容器内部该目录下，或者宿主机内部该目录下，修改文件、创建文件，彼此都会同步修改\n * --restart=always：总是运行，当重启 docker 后会自动运行起来\n * repository:tag：指定运行镜像的名称\n\n查看运行的容器\n\ndocker ps \n\n\n1\n\n\n查看所有状态的容器\n\ndocker ps -a\n\n\n1\n\n\n检查容器内部信息\n\ndocker inspect 容器名称|容器前12位id\n\n\n1\n\n\n停止容器\n\ndocker stop 容器名称|容器前12位id\n\n\n1\n\n\n开启容器运行\n\ndocker start 容器名称\n\n\n1\n\n\n删除容器之前必须先停止容器运行\n\ndocker rm 容器名称\n\n\n1\n\n\n查看容器日志\n\ndokcer logs -f 容器id\n\n\n1\n\n\n进入容器内部\n\ndocker exec -it mysql bash#  进入mysql内部\nmysql -uroot -p123456#  登录mysql服务 注意这里mysql -uroot -p123456 是连起来的\n\n\n1\n2\n\n\n把一个容器制作为一个新的镜像\n\ndocker commit \n -m="提交信息" \n -a="作者" \n 容器id\n 自定义镜像名称:[自定义标签名]\n\n\n1\n2\n3\n4\n5\n\n\n查看容器的信息\n\ndocker inspect 容器id\n\n\n1\n\n\n对于没有私有仓库的要使服务器间共享一个 docker 镜像，可以先把某台机器上的进行先导出，然后其他服务器在导入即可\n\n# 导出\ndocker save \n 镜像id\n -o /本地路径/文件.tar  这句话意思导出到你宿主机的一个地址，文件名随便起后缀为tar，路径要提前建好\n\n# 导入\ndocker load < /上传文件的地址/导出的文件名.tar\n\n# 查看导入的镜像\ndocker images\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n容器之间共享，容器 2 共用 容器 1\n\ndocker tun -it \n  -- name 容器2\n  --volumes-from 容器1(容器1必须已启动)\n  镜像名称\n\n\n1\n2\n3\n4\n\n\n查看制作镜像时叠加其他镜像的操作\n\ndocker history 镜像id\n\n\n1\n\n\n\n# 3. 修改已经存在容器的端口\n\n1、停止容器 (docker stop d00254ce3af7)\n2、停止 docker 服务 (systemctl stop docker)\n3、修改这个容器的 hostconfig.json 文件中的端口（原帖有人提到，如果 config.v2.json 里面也记录了端口，也要修改）\n\ncd /var/lib/docker/containers/d00254ce3af7*    # 这里是container id\n\nvim hostconfig.json\n如果之前没有端口映射, 应该有这样的一段:\n"portbindings":{}\n\n增加一个映射, 这样写:\n"portbindings":{"8080/tcp":[{"hostip":"","hostport":"60000"}]}\n前一个数字是容器端口, 后一个是宿主机端口。将宿主机的60000端口映射到容器的8080端口\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n4、启动 docker 服务 (systemctl start docker)\n5、启动容器 (docker start d00254ce3af7)\n\n\n# 4. 制作镜像的基本命令\n\n\n# 概念\n\n\n\ndockerfile 默认会把当前所在文件的上下问都发送给 docker server，最终制作成一个镜像，比如你得 dockerfile 在 linux 的根 (/) 目录，那么就会递归根目录下的所有文件，发送到 docker server 制作镜像，所以制作 dockerfile 最好是在某一个地方新建文件夹去制作。制作过程都是依赖于一个个的镜像，所以会有缓存加速下次制作，如果不需要依赖缓存 可以在命令制作的最后面加 --no-cache\n\n.dockerignore 是用来忽略哪些文件或目录不参与到制作镜像中\n\n制作命令： docker build -f /home/docker/nginx/dockerfile . -f 用来指定 dockerfile 所在的位置，一般会使用 docker build -t nginx2 . -t 在当前目录制作镜像， nginx2 镜像的名字， . 代表 dockerfile 就在当前目录\n\n\n# 命令\n\n指令            描述\nfrom          构建的新镜像是基于哪个镜像。例如：from centos:6，第一个指令必须是 from\nmaintainer    镜像维护者姓名或邮箱地址。例如：maintainer mr.chen\nrun           构建镜像时运行的 shell 命令。例如：run ["yum","install","httpd"] 也可以直接 run\n              yum install httpd 或者 run yum install httpd\ncmd           容器运行时执行的shell命令 （编写的 dockerfile 中多个 cmd 都会执行，但默认保留最后一个命令，如果\n              docker run 运行时传递 command，会覆盖 cmd 的保留命令），启动容器会执行 cmd\n              的保留命令。例如：cmd ["-c","/start.sh"] 也可以是 cmd echo \'hello docker\'\nexpose        声明容器运行的服务端口。例如：expose 80 443，但是默认都是 tcp 协议，如果想要暴漏 udp 协议，则是\n              expose 80/udp ，注意只能是 tcp 或 udp\nenv           设置容器内的环境变量。例如：env mysql_root_password 123456\nadd           将宿主机目录下的文件拷贝进镜像且 add 命令会自动处理 url 和解压 tar 包 例如：add\n              ["src","dest"] 或者 add https://xxx.com/html.tar.gz\n              /var/www/html 或者：add html.tar.gz/var/www/html\ncopy          拷贝文件或目录到镜像（不能自动解压缩）。例如：copy ./start.sh/start.sh\nentrypoint    运行容器时执行的 shell 命令（不能被运行时传递的参数覆盖)，比 cmd 牛皮一些。例如：entrypoint\n              ["/bin/bash","-c","/start.sh"] 或者 entrypoint /bin/bash -c\n              "/start.sh"\nvolume        指定容器挂载点到宿主机自动生成的目录或其他容器 例如：volume ["/var/lib/mysql"]\nuser          为 run，cmd 和 entrypoint 执行命令指定运行用户 例如：user mr_chen\nworkdir       指定在创建容器后，终端默认登录进来的工作目录，一个落脚点 例如：workdir /data， 该命令也会影响\n              entrypoint 运行例如jar包时的位置，默认会自带workdir的路径\nhealthcheck   健康检查。例如：healthcheck --interval=5m --timeout=3s --retries=3\n              cmd curl -f http://localhost/ exit 1\narg           在构建镜像时指定一些参数。例如：arg user\nonbuild       当镜像被继承后触发在 onbuild 里写的命令，继承者直接使用 from 命令继承当前镜像的名称即可，在 build\n              的时候触发\n\n提示\n\n从 docker17.05 版本开始，dockerfile 中允许使用多个 from 指令\n\n\n# 实战构建 springboot 应用\n\n在应用的根目录中创建 dockerfile，具体构建之前一定要了解 springboot 配置文件的加载路径优先级，这里牵扯到我们在修改配置文件时，可以指定挂载外部文件修改后同步到容器，否则，每改一次都要重新制作镜像\n\n提示\n\nspringboot 配置文件的加载路径优先级：\n工程根目录:./config/\n工程根目录：./\nclasspath:/config/\nclasspath:/\n\n# 基础镜像\nfrom openjdk:8-jre-slim\n# 作者\nmaintainer biguncle\n# 配置\nenv params=""\nexpose 8081\n# 时区\nenv tz=asia/shanghai\nrun ln -snf /usr/share/zoneinfo/$tz /etc/localtime && echo $tz > /etc/timezone\n# 添加应用\nadd ./target/tool-boot-0.0.1-snapshot.jar /server/tool-boot.jar\n# 创建一个工作目录，并将外部配置文件复制到镜像中\nrun mkdir /server/config\ncopy /src/main/resources/application.yml /app/config/\nworkdir /server\n## 在镜像运行为容器后执行的命令\nentrypoint java -jar -dpolyglot.engine.warninterpreteronly=false tool-boot.jar  $params\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n执行命令\n\n#build 构建应用的镜像\ndocker build -f ./dockerfile -t 875730567/easy-manager-tool .\n\n\n1\n2\n\n\n运行容器\n\n#build 构建应用的镜像\ndocker run -p 8081:8081 --name -v /opt:/server/config easy-manager-tool -d 875730567/easy-manager-tool\n\n\n1\n2\n\n\n\n# 5. docker 使用阿里云仓库或自建仓库\n\n\n# 阿里云仓库\n\n 1. 先登录阿里云镜像服务，地址\n 2. 创建个人或企业实例\n 3. 创建镜像仓库，这个仓库可以建多个，看自己\n 4. 创建完毕之后可以根据阿里云提供的步骤进行推送或拉取\n\n\n\n如果我们只是想用阿里云的镜像加速器，可以找到如下图操作即可。\n\n\n\n\n# 自建仓库\n\n 1. 拉取仓库镜像\n\ndocker pull registry\n\n\n1\n\n 2. 运行镜像\n\ndocker run -d -v /edc/images/registry:/var/lib/registry \n-p 5000:5000 \n--restart=always \n--name xdp-registry registry\n\n\n1\n2\n3\n4\n\n 3. 查看镜像信息\n\ncurl http://127.0.0.1:5000/v2/_catalog\n\n\n1\n\n\n\n# 6. 上传 dockerhub\n\n 1. 首先保证你登录\n\ndocker login --username=xxxx\n\n\n1\n\n 2. 构建镜像\n\ndocker build -t 账号/应用名称 -f dockerfile .\n\n\n1\n\n 3. 在 dockerhub 新建仓库 https://hub.docker.com/\n 4. 给镜像打一个 tag 标签\n\ndocker tag 账号/应用名称 账号/标签名称:标签版本\n\n\n1\n\n 5. 上传\n\ndocker push 账号/标签名称:标签版本\n\n\n1\n',charsets:{cjk:!0}},{title:"Docker-Compose 命令及基本使用",frontmatter:{title:"Docker-Compose 命令及基本使用",date:"2023-06-25T09:22:36.000Z",permalink:"/docker/401",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/01.%E8%BF%90%E7%BB%B4/40.Docker/401.Docker-Compose%20%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html",relativePath:"01.运维/40.Docker/401.Docker-Compose 命令及基本使用.md",key:"v-12a39364",path:"/docker/401/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"安装与卸载",slug:"安装与卸载",normalizedTitle:"安装与卸载",charIndex:638},{level:2,title:"命令",slug:"命令",normalizedTitle:"命令",charIndex:503},{level:2,title:"Compose文件编写",slug:"compose文件编写",normalizedTitle:"compose 文件编写",charIndex:1790},{level:3,title:"示例1",slug:"示例1",normalizedTitle:"示例 1",charIndex:1807},{level:3,title:"示例2",slug:"示例2",normalizedTitle:"示例 2",charIndex:3203},{level:3,title:"Compose 指令",slug:"compose-指令",normalizedTitle:"compose 指令",charIndex:5784},{level:3,title:"命令选项",slug:"命令选项",normalizedTitle:"命令选项",charIndex:5952},{level:3,title:"命令使用说明",slug:"命令使用说明",normalizedTitle:"命令使用说明",charIndex:6176},{level:4,title:"up",slug:"up",normalizedTitle:"up",charIndex:2309},{level:4,title:"down",slug:"down",normalizedTitle:"down",charIndex:809},{level:4,title:"exec",slug:"exec",normalizedTitle:"exec",charIndex:6686},{level:4,title:"ps",slug:"ps",normalizedTitle:"ps",charIndex:769},{level:4,title:"restart",slug:"restart",normalizedTitle:"restart",charIndex:6824},{level:4,title:"rm",slug:"rm",normalizedTitle:"rm",charIndex:6925},{level:4,title:"start",slug:"start",normalizedTitle:"start",charIndex:6826},{level:4,title:"stop",slug:"stop",normalizedTitle:"stop",charIndex:7013},{level:4,title:"top",slug:"top",normalizedTitle:"top",charIndex:666},{level:4,title:"pause,unpause",slug:"pause-unpause",normalizedTitle:"pause,unpause",charIndex:7337},{level:4,title:"logs",slug:"logs",normalizedTitle:"logs",charIndex:7464}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"简介 安装与卸载 命令 Compose文件编写 示例1 示例2 Compose 指令 命令选项 命令使用说明 up down exec ps restart rm start stop top pause,unpause logs",content:'# 简介\n\nCompose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排，帮助定义和运行多个 Docker 容器的应用，其前身是开源项目 Fig。所谓编排就是能把一个项目的依赖（如 mysql，redis，服务间的依赖等）按照有序的方式启动容器\n\nDockerFile 可以让用户很方便的定义一个单独的应用容器，然而在日常工作中们经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 web 项目，除了 web 服务容器本身，往往还需要再加上后端的数据库服务器容器，甚至还包括负载均衡容器等。\n\nCompose 恰好满足了这样的需求，它允许通过一个单独的 docker-compose.yml 模板文件，来定义一组相关联的应用容器为一个项目。\n\nCompose 中有两个重要的概念\n\n 1. 服务（service），一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。\n 2. 项目（project），由一组关联的应用容器组成的一个完整业务单元，再 docker-compose.yml 文件中定义。\n\nCompose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。\n\nCompose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以再其上利用 Compose 来进行编排管理。\n\n\n# 安装与卸载\n\n安装的话，可以安装 Docker Desktop ，它包含了 Docker 以及 Compose 和 K8s，也可以单独安装，但建议先了解清楚官方对 Compose 的一些安装限制。官方地址\n\nlinux 安装\n\nsudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\ndocker-compose --version\n\n\n1\n2\n3\n\n\n\n# 命令\n\n命令            描述\nversion       版本目前 4 以下的都可以写，如 3.9，3.8 等，最好保持和 docker 版本兼容\nservices      可以里面描述你的所有服务，以及依赖关系等\nimage         指定为镜像名称或镜像 ID，如果镜像在本地不存在，Compose 将会尝试拉取这个镜像\nports         指定与宿主机与容器映射的端口，是一个数组，每个数组的元素建议用字符形式，如 "80:80"\nvolumes       挂载路径设置，类型为数组，可以挂载多个，在制作容器的时候可以显示的声明挂载路径，也可以在容器运行时直接使用 -v 命令。\nnetworks      配置容器连接的网络 docker network ls 查看网络列表， docker network inspect\n              <container id> 可以查看对应网络的配置\nenvironment   设置环境变量。你可以使用数组或字典两种方式\nenv_file      从文件中获取环境变量，可以为单独的文件路径或列表，文件内必须是字典方式编写\ncommand       覆盖容器启动后默认执行的命令\ndepends_on    解决容器的依赖、启动先后的问题，填写的值为 服务名，会等依赖的服务启动一定程度才启动自己\nhealthcheck   通过命令检查容器是否监控运行\nsysctls       配置容器内核参数，如 ES 等都需要修改内核的环境参数\nulimits       指定容器的 ulimits 限制值，如 ES、Clickhouse 会有修改需求\nbuild         用来将指定 Dockerfile 打包成对应镜像，然后再运行该镜像\n\n这些命令其实就类似于我们在 Docker 中启动一个容器的命令。\n\n\n# Compose 文件编写\n\n\n# 示例 1\n\n### 版本\nversion: "3.2"\n\nservices:\n  ### 服务名称\n  tomcat:\n    ### 指定容器的名称 相当于 --name\n    container_name: tomcat_1\n    ### 使用哪个镜像 相当于 docket run image\n    image: tomcat:8.0-jre8\n    ### 指定宿主机与容器端口的映射 相当于 -p\n    ports:\n      ### 宿主机:容器\n      - "8080:8080"\n    ### 宿主机与容器的数据共享 挂载目录 相当于 -v\n    volumes:\n      ### 方式1：指定绝对明确(绝对路径)的挂载目录\n      - /home/server:/user\n      ### 方式2：声明了自定创建卷名的变量\n      - tomcatwebapps:/user\n    ### 代表当前服务处于那个网络，作用是网络隔离用，会把相网络名称相同的容器的网段统一。相当于 --network\n    networks:\n      - group1\n\n  mysql:\n    image: mysql:5.7.32\n    container_name: mysql\n    ports:\n    - "3306:3306"\n    volumes:\n    - mysqldata:/var/lib/mysql\n    - mysqlconf:/etc/mysql\n    environment:\n      -MYSQL_ROOT_PASSWORD=root\n    networks:\n      group1\n\n\n### 描述 挂在卷里的变量\nvolumes:\n  ### 指定变量 tomcatwebapps，如果不写 external，默认会是 docker-compose.yml 所在当前文件夹的名称(会自动创建)\n  tomcatwebapps:\n    ### 使用自定义卷毛\n    external:\n      ### true 确定使用指定卷名，注意：一旦使用外部自定义卷名，启动服务之前必须手动创建 docker volume create 卷名\n      false\n  mysqldata:\n  mysqlconf:\n\n### 定义服务用到的网络\nnetworks:\n  ### 定义上面的服务用到的网络的名称，默认是驱动属于 bridge，自定义的网络名称 group1，在实际中会变为 项目名(或所在文件目录名)\n  group1:\n    ### 使用外部指定的网络，为 true 就标识网络必须存在\n    external:\n      ### docker network create -d bridge 网络名称\n      true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n\n# 示例 2\n\n### 指定版本，版本的关系和Docker 引擎有关\n### https://docs.docker.com/compose/compose-file/compose-file-v3/#profiles 版本关系及说明\nversion: \'3.7\'\n\n### 指定服务\nservices:\n  ### 服务名称 唯一\n  monitor-web-server-service:\n    ### 构建镜像的项目路径\n    build:\n      ### 指定上下文路径，默认是微服务项目的根目录\n      context: ./monitor-web/monitor-web-server/\n      ### 指定\n      dockerfile: monitor-web-server-service\n    ### 指定镜像名称\n    image: monitor-web-server-service\n    ### .env的环境变量\n    env_file:\n      - ./.env\n    ### 网络配置\n    networks:\n      - internal_access\n      - external_access ### db access\n\n  monitor-web-socket-service:\n    build: ./monitor-web/monitor-web-socket/monitor-web-socket-service\n    image: boboweike/monitor-web-socket-service\n    env_file:\n      - ./.env\n    ### 依赖的项目，启动的时候根据依赖关系定义启动顺序\n    depends_on:\n      - monitor-web-server-service\n    networks:\n      - internal_access\n      - external_access ### db access\n\n  monitor-gateway:\n    build: ./monitor-gateway\n    image: boboweike/monitor-gateway\n    ### 设置内部和外部端口\n    ports:\n    - 80:80\n    env_file:\n      - ./.env\n    ### 依赖的项目，启动的时候根据依赖关系定义启动顺序\n    depends_on:\n      - monitor-web-server-service\n      - monitor-web-server-service\n    networks:\n      - internal_access\n      - external_access\n    ### 心跳检查\n    healthcheck:\n      ### 访问 monitor-gateway 网关的命令\n      test: [ "CMD","curl","-f","http://localhost:80" ]\n      ### 间隔时间\n      interval: 1m30s\n      ### 超时时间\n      timeout: 10s\n      ### 重试次数\n      retries: 3\n\n  mysql:\n    image: mysql:5.7.32\n    container_name: mysql\n    ports:\n      - "3306:3306"\n    volumes:\n      - mysqldata:/var/lib/mysql\n      - mysqlconf:/etc/mysql\n    env_file:\n      - ./mysql.env\n    networks:\n      - external_access\n    ### 修改内核参数，也可以是数组的方式\n    sysctls:\n      net.core.somaxconn: 1024\n      net.ipv4.tcp_syncookies: 0\n    ### 指定容器的 ulimits 限制值，例如 ，\n    ulimits:\n      ### 指定最大进程数为 65535\n      nproc: 65535\n      ### 指定文件句柄数为\n      nofile:\n        ### 软限制 200000（软限制，应用可以随时修改，不能超过硬限制）\n        soft: 20000\n        ### 硬限制（系统硬限制，只能root用户提高）\n        hard: 40000\n\n\n  myaccount-service:\n    build:\n      context: ./frontend\n      dockerfile: myaccount/Dockerfile\n    image: boboweike/myaccount-spa\n    networks:\n      - internal_access\n\n\nnetworks:\n  internal_access:\n    internal: true\n  external_access:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n\n\n\n# Compose 指令\n\n对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到影响。\n\ndocker-compose [-f=<arg>...] [options] [COMMAND] [ARGS...]\n\n\n1\n\n\n\n# 命令选项\n\n * -f -> --file FILE 指定使用的 Compose 模板把文件，默认为 docker-compose.yml，可以多次指定。\n * -p -> --project-name NAME 指定项目名称，默认将使用所在目录名称作为项目名\n * --x-networking 使用 Docker 可插拔网络后端特性\n * --verbose 输出更多调试信息。\n * -v -> --version 打印版本并退出。\n\n\n# 命令使用说明\n\n# up\n\ndocker-compose up [options] [SERVICE...]\n\n\n1\n\n * 该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。\n * 连接的服务都将会被自动启动，除非已经处于运行状态\n * 大部分的时候都可以直接通过该命令来启动一个项目。\n * 默认情况，docker-compose up 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。\n * 当通过 Ctrl-c 停止命令时，所有容器将会停止\n * 如果使用 docker-compose up -d，将会再后台启动并运行所有的容器，一般推荐生产环境下使用该选项。\n * 默认情况，如果服务容器已经存在，docker-compose up 将会尝试停止容器，然后重新创建（保持使用 volumes-from 挂载的卷），以保证新启动的服务匹配 docker-compose.yml 文件的最新内容。\n\n# down\n\ndocker-compose down\n\n\n1\n\n\n此命令将会停止 up 命令所启动的容器，并移除网络\n\n# exec\n\ndocker-compose exec 服务名\n\n\n1\n\n\n进入指定的容器\n\n# ps\n\ndocker-compose ps [options] [SERVICE...]\n\n\n1\n\n\n列出项目中目前的所有容器。\n\n * -q ，可以以打印容器的 ID 信息\n\n# restart\n\ndocker-compose restart [options] [service...]\n\n\n1\n\n\n重启项目中的服务，选项 -t 指定重启前停止容的超时时间（默认 10s）\n\n# rm\n\ndocker-compose rm [options] [service...]\n\n\n1\n\n\n删除所有（停止状态的）服务容器。推荐先执行 docker-compose stop 命令来停止容器。\n\n * -f 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。\n * -v 删除容器所挂载的数据卷。\n\n# start\n\ndocker-compose start [service...]\n\n\n1\n\n\n启动已经存在的服务容器\n\n# stop\n\ndocker-compose stop [options] [service...]\n\n\n1\n\n\n停止已经处于运行状态的容器，但不删除它。通过 docker-compose start 可以再次启动这些容器\n\n * -t 停止容器的超时时间（默认为 10s）\n\n# top\n\ndocker-compose top\n\n\n1\n\n\n查看各个服务容器内运行的进程。\n\n# pause,unpause\n\ndocker-compose pause [service...]\n\n\n1\n\n\n暂停处于运行中的服务。\n\ndocker-compose unpause [service...]\n\n\n1\n\n\n恢复处于暂停状态中的服务。\n\n# logs\n\ndocker-compose logs [service...]\n\n\n1\n\n\n查看某个服务的日志',normalizedContent:'# 简介\n\ncompose 项目是 docker 官方的开源项目，负责实现对 docker 容器集群的快速编排，帮助定义和运行多个 docker 容器的应用，其前身是开源项目 fig。所谓编排就是能把一个项目的依赖（如 mysql，redis，服务间的依赖等）按照有序的方式启动容器\n\ndockerfile 可以让用户很方便的定义一个单独的应用容器，然而在日常工作中们经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 web 项目，除了 web 服务容器本身，往往还需要再加上后端的数据库服务器容器，甚至还包括负载均衡容器等。\n\ncompose 恰好满足了这样的需求，它允许通过一个单独的 docker-compose.yml 模板文件，来定义一组相关联的应用容器为一个项目。\n\ncompose 中有两个重要的概念\n\n 1. 服务（service），一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。\n 2. 项目（project），由一组关联的应用容器组成的一个完整业务单元，再 docker-compose.yml 文件中定义。\n\ncompose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。\n\ncompose 项目由 python 编写，实现上调用了 docker 服务提供的 api 来对容器进行管理。因此，只要所操作的平台支持 docker api，就可以再其上利用 compose 来进行编排管理。\n\n\n# 安装与卸载\n\n安装的话，可以安装 docker desktop ，它包含了 docker 以及 compose 和 k8s，也可以单独安装，但建议先了解清楚官方对 compose 的一些安装限制。官方地址\n\nlinux 安装\n\nsudo curl -l "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\ndocker-compose --version\n\n\n1\n2\n3\n\n\n\n# 命令\n\n命令            描述\nversion       版本目前 4 以下的都可以写，如 3.9，3.8 等，最好保持和 docker 版本兼容\nservices      可以里面描述你的所有服务，以及依赖关系等\nimage         指定为镜像名称或镜像 id，如果镜像在本地不存在，compose 将会尝试拉取这个镜像\nports         指定与宿主机与容器映射的端口，是一个数组，每个数组的元素建议用字符形式，如 "80:80"\nvolumes       挂载路径设置，类型为数组，可以挂载多个，在制作容器的时候可以显示的声明挂载路径，也可以在容器运行时直接使用 -v 命令。\nnetworks      配置容器连接的网络 docker network ls 查看网络列表， docker network inspect\n              <container id> 可以查看对应网络的配置\nenvironment   设置环境变量。你可以使用数组或字典两种方式\nenv_file      从文件中获取环境变量，可以为单独的文件路径或列表，文件内必须是字典方式编写\ncommand       覆盖容器启动后默认执行的命令\ndepends_on    解决容器的依赖、启动先后的问题，填写的值为 服务名，会等依赖的服务启动一定程度才启动自己\nhealthcheck   通过命令检查容器是否监控运行\nsysctls       配置容器内核参数，如 es 等都需要修改内核的环境参数\nulimits       指定容器的 ulimits 限制值，如 es、clickhouse 会有修改需求\nbuild         用来将指定 dockerfile 打包成对应镜像，然后再运行该镜像\n\n这些命令其实就类似于我们在 docker 中启动一个容器的命令。\n\n\n# compose 文件编写\n\n\n# 示例 1\n\n### 版本\nversion: "3.2"\n\nservices:\n  ### 服务名称\n  tomcat:\n    ### 指定容器的名称 相当于 --name\n    container_name: tomcat_1\n    ### 使用哪个镜像 相当于 docket run image\n    image: tomcat:8.0-jre8\n    ### 指定宿主机与容器端口的映射 相当于 -p\n    ports:\n      ### 宿主机:容器\n      - "8080:8080"\n    ### 宿主机与容器的数据共享 挂载目录 相当于 -v\n    volumes:\n      ### 方式1：指定绝对明确(绝对路径)的挂载目录\n      - /home/server:/user\n      ### 方式2：声明了自定创建卷名的变量\n      - tomcatwebapps:/user\n    ### 代表当前服务处于那个网络，作用是网络隔离用，会把相网络名称相同的容器的网段统一。相当于 --network\n    networks:\n      - group1\n\n  mysql:\n    image: mysql:5.7.32\n    container_name: mysql\n    ports:\n    - "3306:3306"\n    volumes:\n    - mysqldata:/var/lib/mysql\n    - mysqlconf:/etc/mysql\n    environment:\n      -mysql_root_password=root\n    networks:\n      group1\n\n\n### 描述 挂在卷里的变量\nvolumes:\n  ### 指定变量 tomcatwebapps，如果不写 external，默认会是 docker-compose.yml 所在当前文件夹的名称(会自动创建)\n  tomcatwebapps:\n    ### 使用自定义卷毛\n    external:\n      ### true 确定使用指定卷名，注意：一旦使用外部自定义卷名，启动服务之前必须手动创建 docker volume create 卷名\n      false\n  mysqldata:\n  mysqlconf:\n\n### 定义服务用到的网络\nnetworks:\n  ### 定义上面的服务用到的网络的名称，默认是驱动属于 bridge，自定义的网络名称 group1，在实际中会变为 项目名(或所在文件目录名)\n  group1:\n    ### 使用外部指定的网络，为 true 就标识网络必须存在\n    external:\n      ### docker network create -d bridge 网络名称\n      true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n\n# 示例 2\n\n### 指定版本，版本的关系和docker 引擎有关\n### https://docs.docker.com/compose/compose-file/compose-file-v3/#profiles 版本关系及说明\nversion: \'3.7\'\n\n### 指定服务\nservices:\n  ### 服务名称 唯一\n  monitor-web-server-service:\n    ### 构建镜像的项目路径\n    build:\n      ### 指定上下文路径，默认是微服务项目的根目录\n      context: ./monitor-web/monitor-web-server/\n      ### 指定\n      dockerfile: monitor-web-server-service\n    ### 指定镜像名称\n    image: monitor-web-server-service\n    ### .env的环境变量\n    env_file:\n      - ./.env\n    ### 网络配置\n    networks:\n      - internal_access\n      - external_access ### db access\n\n  monitor-web-socket-service:\n    build: ./monitor-web/monitor-web-socket/monitor-web-socket-service\n    image: boboweike/monitor-web-socket-service\n    env_file:\n      - ./.env\n    ### 依赖的项目，启动的时候根据依赖关系定义启动顺序\n    depends_on:\n      - monitor-web-server-service\n    networks:\n      - internal_access\n      - external_access ### db access\n\n  monitor-gateway:\n    build: ./monitor-gateway\n    image: boboweike/monitor-gateway\n    ### 设置内部和外部端口\n    ports:\n    - 80:80\n    env_file:\n      - ./.env\n    ### 依赖的项目，启动的时候根据依赖关系定义启动顺序\n    depends_on:\n      - monitor-web-server-service\n      - monitor-web-server-service\n    networks:\n      - internal_access\n      - external_access\n    ### 心跳检查\n    healthcheck:\n      ### 访问 monitor-gateway 网关的命令\n      test: [ "cmd","curl","-f","http://localhost:80" ]\n      ### 间隔时间\n      interval: 1m30s\n      ### 超时时间\n      timeout: 10s\n      ### 重试次数\n      retries: 3\n\n  mysql:\n    image: mysql:5.7.32\n    container_name: mysql\n    ports:\n      - "3306:3306"\n    volumes:\n      - mysqldata:/var/lib/mysql\n      - mysqlconf:/etc/mysql\n    env_file:\n      - ./mysql.env\n    networks:\n      - external_access\n    ### 修改内核参数，也可以是数组的方式\n    sysctls:\n      net.core.somaxconn: 1024\n      net.ipv4.tcp_syncookies: 0\n    ### 指定容器的 ulimits 限制值，例如 ，\n    ulimits:\n      ### 指定最大进程数为 65535\n      nproc: 65535\n      ### 指定文件句柄数为\n      nofile:\n        ### 软限制 200000（软限制，应用可以随时修改，不能超过硬限制）\n        soft: 20000\n        ### 硬限制（系统硬限制，只能root用户提高）\n        hard: 40000\n\n\n  myaccount-service:\n    build:\n      context: ./frontend\n      dockerfile: myaccount/dockerfile\n    image: boboweike/myaccount-spa\n    networks:\n      - internal_access\n\n\nnetworks:\n  internal_access:\n    internal: true\n  external_access:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n\n\n\n# compose 指令\n\n对于 compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到影响。\n\ndocker-compose [-f=<arg>...] [options] [command] [args...]\n\n\n1\n\n\n\n# 命令选项\n\n * -f -> --file file 指定使用的 compose 模板把文件，默认为 docker-compose.yml，可以多次指定。\n * -p -> --project-name name 指定项目名称，默认将使用所在目录名称作为项目名\n * --x-networking 使用 docker 可插拔网络后端特性\n * --verbose 输出更多调试信息。\n * -v -> --version 打印版本并退出。\n\n\n# 命令使用说明\n\n# up\n\ndocker-compose up [options] [service...]\n\n\n1\n\n * 该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。\n * 连接的服务都将会被自动启动，除非已经处于运行状态\n * 大部分的时候都可以直接通过该命令来启动一个项目。\n * 默认情况，docker-compose up 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。\n * 当通过 ctrl-c 停止命令时，所有容器将会停止\n * 如果使用 docker-compose up -d，将会再后台启动并运行所有的容器，一般推荐生产环境下使用该选项。\n * 默认情况，如果服务容器已经存在，docker-compose up 将会尝试停止容器，然后重新创建（保持使用 volumes-from 挂载的卷），以保证新启动的服务匹配 docker-compose.yml 文件的最新内容。\n\n# down\n\ndocker-compose down\n\n\n1\n\n\n此命令将会停止 up 命令所启动的容器，并移除网络\n\n# exec\n\ndocker-compose exec 服务名\n\n\n1\n\n\n进入指定的容器\n\n# ps\n\ndocker-compose ps [options] [service...]\n\n\n1\n\n\n列出项目中目前的所有容器。\n\n * -q ，可以以打印容器的 id 信息\n\n# restart\n\ndocker-compose restart [options] [service...]\n\n\n1\n\n\n重启项目中的服务，选项 -t 指定重启前停止容的超时时间（默认 10s）\n\n# rm\n\ndocker-compose rm [options] [service...]\n\n\n1\n\n\n删除所有（停止状态的）服务容器。推荐先执行 docker-compose stop 命令来停止容器。\n\n * -f 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。\n * -v 删除容器所挂载的数据卷。\n\n# start\n\ndocker-compose start [service...]\n\n\n1\n\n\n启动已经存在的服务容器\n\n# stop\n\ndocker-compose stop [options] [service...]\n\n\n1\n\n\n停止已经处于运行状态的容器，但不删除它。通过 docker-compose start 可以再次启动这些容器\n\n * -t 停止容器的超时时间（默认为 10s）\n\n# top\n\ndocker-compose top\n\n\n1\n\n\n查看各个服务容器内运行的进程。\n\n# pause,unpause\n\ndocker-compose pause [service...]\n\n\n1\n\n\n暂停处于运行中的服务。\n\ndocker-compose unpause [service...]\n\n\n1\n\n\n恢复处于暂停状态中的服务。\n\n# logs\n\ndocker-compose logs [service...]\n\n\n1\n\n\n查看某个服务的日志',charsets:{cjk:!0}},{title:"介绍及使用",frontmatter:{title:"介绍及使用",date:"2023-06-25T09:22:36.000Z",permalink:"/easy-security/2100",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/06.%E4%BD%9C%E5%93%81/2100.Easy-Security/2100.index.html",relativePath:"06.作品/2100.Easy-Security/2100.index.md",key:"v-9d7b0978",path:"/easy-security/2100/",lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:null,content:"easy-security 基于过滤器实现的一款配合 spring 快速开发的安全认证框架，思想是希望通过简单的配置，并且实现核心的方法达到认证和鉴权的目的，easy-security 天然支持微服务 无需额外配置。\n\neasy-security 不限制存取 token 方式，无论是保存到服务端还是使用 JWT 等都可以，因为这部分是由开发者自己来定义的，只需要告诉 easy-security 该如何获取用户信息即可。\n\n如果你使用了 easy-security 自身所带的 Req 请求封装，那么所有的接口请求均以 POST 方式，Req 会把认证后的用户所携带在每次请求中，当需要获取用户的时候可以通过 Req 直接获取，解耦开发者获取认证用户。\n\neasy-security 结合了 Yapi 的使用，如果你使用 Yapi 需要在自己的项目中描述规则。\n\n具体内容见官网介绍",normalizedContent:"easy-security 基于过滤器实现的一款配合 spring 快速开发的安全认证框架，思想是希望通过简单的配置，并且实现核心的方法达到认证和鉴权的目的，easy-security 天然支持微服务 无需额外配置。\n\neasy-security 不限制存取 token 方式，无论是保存到服务端还是使用 jwt 等都可以，因为这部分是由开发者自己来定义的，只需要告诉 easy-security 该如何获取用户信息即可。\n\n如果你使用了 easy-security 自身所带的 req 请求封装，那么所有的接口请求均以 post 方式，req 会把认证后的用户所携带在每次请求中，当需要获取用户的时候可以通过 req 直接获取，解耦开发者获取认证用户。\n\neasy-security 结合了 yapi 的使用，如果你使用 yapi 需要在自己的项目中描述规则。\n\n具体内容见官网介绍",charsets:{cjk:!0}},{title:"介绍及安装",frontmatter:{title:"介绍及安装",date:"2023-06-25T09:22:36.000Z",permalink:"/easy-manager-tool/2200",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/06.%E4%BD%9C%E5%93%81/2200.Easy-Manager-Tool/2200.%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85.html",relativePath:"06.作品/2200.Easy-Manager-Tool/2200.介绍及安装.md",key:"v-068ae18c",path:"/easy-manager-tool/2200/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:187},{level:2,title:"交流",slug:"交流",normalizedTitle:"交流",charIndex:737}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"简介 安装 交流",content:'# 简介\n\nEasy-Manager-Tool 是一个程序员使用的开发管理工具，在日常开发中使用的工具在这里都可以找到并使用，通常我们在开发的时候既需要 ssh 连接工具，还需要 sftp 连接工具以及监控工具，数据库连接工具等，Easy-Manager-Tool 就是要把这些工具通过最简单的，最有效的方式集成到一起，并形成联动，为开发者减少工具的下载与管理工作\n\n\n# 安装\n\n我们提供了最简单的 docker 安装方式\n\n注意\n\n这里端口目前只能是 8081 所以端口不需要改；\nconfig.database.url 需要改成你自己的数据库连接地址，数据库以及表会自动创建；\n--config.file.ip 这个地址需要改成你宿主机的 IP 地址\n\n# 拉取镜像\ndocker pull 875730567/easy-manager-tool:latest\n\n# 运行容器\ndocker run -d -p 8081:8081 \\\n--name easy-manager-tool \\\n-e JAVA_ARGS="--config.database.url=127.0.0.1:3306/easy-manager-tool\n--config.database.name=root\n--config.database.password=Dev@root2021\n--config.file.ip=127.0.0.1" \\\n875730567/easy-manager-tool\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n运行成功后访问需要在端口后面加 /easy 才能访问成功\n\nhttp://127.0.0.1:8081/easy\n\n\n1\n\n\n\n# 交流\n\n\n',normalizedContent:'# 简介\n\neasy-manager-tool 是一个程序员使用的开发管理工具，在日常开发中使用的工具在这里都可以找到并使用，通常我们在开发的时候既需要 ssh 连接工具，还需要 sftp 连接工具以及监控工具，数据库连接工具等，easy-manager-tool 就是要把这些工具通过最简单的，最有效的方式集成到一起，并形成联动，为开发者减少工具的下载与管理工作\n\n\n# 安装\n\n我们提供了最简单的 docker 安装方式\n\n注意\n\n这里端口目前只能是 8081 所以端口不需要改；\nconfig.database.url 需要改成你自己的数据库连接地址，数据库以及表会自动创建；\n--config.file.ip 这个地址需要改成你宿主机的 ip 地址\n\n# 拉取镜像\ndocker pull 875730567/easy-manager-tool:latest\n\n# 运行容器\ndocker run -d -p 8081:8081 \\\n--name easy-manager-tool \\\n-e java_args="--config.database.url=127.0.0.1:3306/easy-manager-tool\n--config.database.name=root\n--config.database.password=dev@root2021\n--config.file.ip=127.0.0.1" \\\n875730567/easy-manager-tool\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n运行成功后访问需要在端口后面加 /easy 才能访问成功\n\nhttp://127.0.0.1:8081/easy\n\n\n1\n\n\n\n# 交流\n\n\n',charsets:{cjk:!0}},{title:"功能演示",frontmatter:{title:"功能演示",date:"2023-06-25T09:22:36.000Z",permalink:"/easy-manager-tool/2201",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/06.%E4%BD%9C%E5%93%81/2200.Easy-Manager-Tool/2201.%E5%8A%9F%E8%83%BD%E6%BC%94%E7%A4%BA.html",relativePath:"06.作品/2200.Easy-Manager-Tool/2201.功能演示.md",key:"v-5526dc2f",path:"/easy-manager-tool/2201/",headers:[{level:2,title:"服务器管理",slug:"服务器管理",normalizedTitle:"服务器管理",charIndex:2},{level:2,title:"监控管理",slug:"监控管理",normalizedTitle:"监控管理",charIndex:339},{level:2,title:"Easy-Manager-Tool AI",slug:"easy-manager-tool-ai",normalizedTitle:"easy-manager-tool ai",charIndex:1182}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"服务器管理 监控管理 Easy-Manager-Tool AI",content:"# 服务器管理\n\n服务器管理可以帮助你管理你现有的服务器，并提供 ssh 以及 sftp 支持，包括 windows 也可以，但需要自己打开支持。\n\n首先我们先去配置一下 ' 服务器组 ', 可以在 ' 服务器设置 ' 中配置\n\n\n\n配置好后就可以在服务器管理里面添加自己的服务器\n\n提示\n\n安利一个小功能点，如果大家用过等保的话知道，服务器的密码需要三个月一换，这里提供了快速批量更换功能，只需要在编辑对远程的 IP 后面添加多个就行，如：\n127.0.0.1;127.0.0.2;127.0.0.3;127.0.0.4\n这样就达到了批量修改账号密码，不会改其他信息\n\n\n\n\n\n添加好服务器我们就可以开始远程连接\n\n\n\n连接后可以在操作日志中查看你上次操作的内容\n\n\n\n\n# 监控管理\n\n监控管理分为数据源管理，自定义监控，告警信息管理，需要使用以下功能首先需要配置数据源。\n\n\n\n\n\n提示\n\n数据源地址可以是 Prometheus 的每一个 agent，也可以是你自己项目里提供的一个 json 接口，他会一定时间内访问你的接口并采集到你的数据\n\n当点击测试连接的时候，可以看下是否解析正确，解析正确最终会以 Json 数据格式展示\n\n\n\n添加完数据源以后我们需要维护指标，指标就是我们需要监控 Json 里具体的那些指标，因为可能某些指标并不需要监控，或者像 Prometheus 提供的 metrics 指标太多，并还需要复杂的计算。\n\n我们在添加指标的时候，可以为每个指标设置告警阈值以及连续次数，当采集到的数据连续几次超过这个阈值，则会为你进行告警。\n\n\n\n具体的指标维护在指标设置中，它为你展示了你当前 JSON 采集的数据格式。当我需要添加一个指标，只需要在右侧填写我的指标名称，以及表达式即可，（表达式就是对 JSON 里的数据进行运算得到我想要的监控数据，如果是项目自己暴漏的接口，一般不需要在进行计算，直接添加）当表达式描述完毕后，可以尝试运行，查看结果是否正确，正确则添加即可，当一切完毕后点击保存，指标维护则结束。\n\n这里提示以下，你会看到指标在这里可以添加多个，这里面其中有一个组的概念，为了是比如我要添加磁盘指标，磁盘一般会有多个，且他的告警阈值一般也会是一样的，所以为了避免重复，我们多了一个组的概念。\n\n\n\n指标添加结束后接下来我们就可以自定义监控面板，相信聪明的你应该一玩就会，点击制作我们就开始进入自定义，自定义完成我们就可以监控了\n\n\n\n注意\n\n每种图形所表示的数据结构有所区别，但只要理解，构建自己的可视化轻而易举：\n折线图多用来表示时间轴的数据\n柱状图多用来表示不同项目间共同项对比数据\n饼状图多用来表示占比\n\n\n\n\n\n当告警后会在告警信息中展示，我们可以去处理这条告警并留下记录，以免相同问题又要百度\n\n\n\n\n\n\n# Easy-Manager-Tool AI\n\n在登陆系统后你就会发现右下角的小可爱，点击他就会展示我们的 AI 交互能力。\n\n\n\n\n\n但在进行交互前，先要确保你的 GPT 经过设置，你懂的，否则不能使用，我们可以在 AI 的左下角齿轮进行设置，目前我们只支持了 openAI，其他 AI 会陆续支持。\n\n是否代理打开，会让你进行设置服务器代理的 IP 和 端口，如果你又国外服务器，可以安装一个代理工具保留 IP 和端口进行转发。\n\n反向代理一般时 openAI 官网地址，但一些聪明的大佬能找到通过域名反向代理 openAI 官网，想了解可以咨询博主。接下来就是 key 这个 key 基本不花钱不可能。设置完城后就可以与 AI 进行交互了\n\n",normalizedContent:"# 服务器管理\n\n服务器管理可以帮助你管理你现有的服务器，并提供 ssh 以及 sftp 支持，包括 windows 也可以，但需要自己打开支持。\n\n首先我们先去配置一下 ' 服务器组 ', 可以在 ' 服务器设置 ' 中配置\n\n\n\n配置好后就可以在服务器管理里面添加自己的服务器\n\n提示\n\n安利一个小功能点，如果大家用过等保的话知道，服务器的密码需要三个月一换，这里提供了快速批量更换功能，只需要在编辑对远程的 ip 后面添加多个就行，如：\n127.0.0.1;127.0.0.2;127.0.0.3;127.0.0.4\n这样就达到了批量修改账号密码，不会改其他信息\n\n\n\n\n\n添加好服务器我们就可以开始远程连接\n\n\n\n连接后可以在操作日志中查看你上次操作的内容\n\n\n\n\n# 监控管理\n\n监控管理分为数据源管理，自定义监控，告警信息管理，需要使用以下功能首先需要配置数据源。\n\n\n\n\n\n提示\n\n数据源地址可以是 prometheus 的每一个 agent，也可以是你自己项目里提供的一个 json 接口，他会一定时间内访问你的接口并采集到你的数据\n\n当点击测试连接的时候，可以看下是否解析正确，解析正确最终会以 json 数据格式展示\n\n\n\n添加完数据源以后我们需要维护指标，指标就是我们需要监控 json 里具体的那些指标，因为可能某些指标并不需要监控，或者像 prometheus 提供的 metrics 指标太多，并还需要复杂的计算。\n\n我们在添加指标的时候，可以为每个指标设置告警阈值以及连续次数，当采集到的数据连续几次超过这个阈值，则会为你进行告警。\n\n\n\n具体的指标维护在指标设置中，它为你展示了你当前 json 采集的数据格式。当我需要添加一个指标，只需要在右侧填写我的指标名称，以及表达式即可，（表达式就是对 json 里的数据进行运算得到我想要的监控数据，如果是项目自己暴漏的接口，一般不需要在进行计算，直接添加）当表达式描述完毕后，可以尝试运行，查看结果是否正确，正确则添加即可，当一切完毕后点击保存，指标维护则结束。\n\n这里提示以下，你会看到指标在这里可以添加多个，这里面其中有一个组的概念，为了是比如我要添加磁盘指标，磁盘一般会有多个，且他的告警阈值一般也会是一样的，所以为了避免重复，我们多了一个组的概念。\n\n\n\n指标添加结束后接下来我们就可以自定义监控面板，相信聪明的你应该一玩就会，点击制作我们就开始进入自定义，自定义完成我们就可以监控了\n\n\n\n注意\n\n每种图形所表示的数据结构有所区别，但只要理解，构建自己的可视化轻而易举：\n折线图多用来表示时间轴的数据\n柱状图多用来表示不同项目间共同项对比数据\n饼状图多用来表示占比\n\n\n\n\n\n当告警后会在告警信息中展示，我们可以去处理这条告警并留下记录，以免相同问题又要百度\n\n\n\n\n\n\n# easy-manager-tool ai\n\n在登陆系统后你就会发现右下角的小可爱，点击他就会展示我们的 ai 交互能力。\n\n\n\n\n\n但在进行交互前，先要确保你的 gpt 经过设置，你懂的，否则不能使用，我们可以在 ai 的左下角齿轮进行设置，目前我们只支持了 openai，其他 ai 会陆续支持。\n\n是否代理打开，会让你进行设置服务器代理的 ip 和 端口，如果你又国外服务器，可以安装一个代理工具保留 ip 和端口进行转发。\n\n反向代理一般时 openai 官网地址，但一些聪明的大佬能找到通过域名反向代理 openai 官网，想了解可以咨询博主。接下来就是 key 这个 key 基本不花钱不可能。设置完城后就可以与 ai 进行交互了\n\n",charsets:{cjk:!0}},{title:"内容更新",frontmatter:{title:"内容更新",date:"2023-06-25T09:22:36.000Z",permalink:"/easy-manager-tool/2202",sidebar:!0,article:!1,comment:!1,editLink:!1},regularPath:"/06.%E4%BD%9C%E5%93%81/2200.Easy-Manager-Tool/2202.%E5%86%85%E5%AE%B9%E6%9B%B4%E6%96%B0.html",relativePath:"06.作品/2200.Easy-Manager-Tool/2202.内容更新.md",key:"v-05550a82",path:"/easy-manager-tool/2202/",headers:[{level:2,title:"2023.8.18",slug:"_2023-8-18",normalizedTitle:"2023.8.18",charIndex:2}],lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:"2023.8.18",content:"# 2023.8.18\n\n 1. 解决 ssh 复制内容失败问题\n 2. 解决 sftp 删除文件提示失败，但是文件已删除问题\n 3. 解决注册账号重复报错问题\n 4. 解决注册转登录 404 问题\n 5. 解决注册双重提示问题",normalizedContent:"# 2023.8.18\n\n 1. 解决 ssh 复制内容失败问题\n 2. 解决 sftp 删除文件提示失败，但是文件已删除问题\n 3. 解决注册账号重复报错问题\n 4. 解决注册转登录 404 问题\n 5. 解决注册双重提示问题",charsets:{cjk:!0}},{title:"Home",frontmatter:{home:!0,heroImage:"/assets/img/logo.png",heroText:"BigUncle技术博客",tagline:"靠技术怎么赚钱，除了打工，一直在研究",bannerBg:"none",features:[{title:"什么是全栈",details:"看右上方就知道，都有但都不精通，别学我"},{title:"自己的项目",details:"开源项目 easy-security，收费项目 easy-manager-tool"},{title:"理想就是赚钱",details:"学那么多有什么用，赚钱才是硬道理，感兴趣加我研究"}],postList:"none",simplePostListLength:0,hideRightBar:!0},regularPath:"/",relativePath:"index.md",key:"v-59de6d20",path:"/",lastUpdated:"8/21/2023, 9:59:17 AM",lastUpdatedTimestamp:1692583157e3,headersStr:null,content:"",normalizedContent:"",charsets:{}}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"Java",items:[{text:"Java",link:"/java/100/"},{text:"Spring",link:"/spring/200/"},{text:"Mybatis",link:"/mybatis/300/"},{text:"Maven",link:"/maven/2300/"}]},{text:"运维",items:[{text:"Docker",link:"/docker/400/"},{text:"Jenkins",link:"/jenkins/500/"},{text:"Kubernetes",link:"/kubernetes/600/"}]},{text:"大数据",items:[{text:"Hadoop",link:"/hadoop/700/"},{text:"ClickHouse",link:"/clickhouse/800/"},{text:"Hbase",link:"/hbase/900/"},{text:"Hive",link:"/hive/1000/"},{text:"Flume",link:"/flume/1100/"},{text:"Flink",link:"/flink/1200/"}]},{text:"数据库",items:[{text:"MySQL",link:"/mysql/1300/"},{text:"MongoDB",link:"/mongodb/1800/"}]},{text:"中间件",items:[{text:"KAFKA",link:"/kafka/1400/"},{text:"RabbitMQ",link:"/rabbitmq/1500/"},{text:"Redis",link:"/redis/1600/"},{text:"Nginx",link:"/nginx/1700/"}]},{text:"前端",items:[{text:"VUE3",link:"/vue3/1900/"},{text:"微信小程序",link:"/wx/2000/"}]},{text:"作品",items:[{text:"Easy-Security",link:"/easy-security/2100/"},{text:"Easy-Manager-Tool",link:"/easy-manager-tool/2200/"}]}],sidebarDepth:2,logo:"/assets/img/logo.png",repo:"landashu?tab=repositories",searchMaxSuggestions:10,lastUpdated:"上次更新",docsDir:"docs",editLinks:!1,editLinkText:"编辑",pageStyle:"line",category:!1,tag:!1,archive:!1,sidebarOpen:!0,sidebar:{"/00.java/":[{title:"java",collapsable:!1,children:[["10.java/100.java1.md","JVM","/java/100/"]]},{title:"Spring",collapsable:!1,children:[["20.Spring/200.核心功能拆解 IOC.md","核心功能拆解 IOC","/spring/200/"],["20.Spring/201.核心功能拆解 AOP.md","核心功能拆解 AOP","/spring/201/"],["20.Spring/202.核心功能拆解 事件通知.md","核心功能拆解 事件通知","/spring/202/"],["20.Spring/203.核心功能拆解 三级缓存.md","核心功能拆解 三级缓存","/spring/203/"],["20.Spring/204.核心功能拆解 FactoryBean.md","核心功能拆解 FactoryBean","/spring/204/"],["20.Spring/205.注解替代Spring生命周期实现类.md","注解替代Spring生命周期实现类","/spring/205/"]]},{title:"Mybatis",collapsable:!1,children:[["30.Mybatis/300.核心功能拆解 工作流程.md","核心功能拆解 工作流程","/mybatis/300/"],["30.Mybatis/301.核心功能拆解 Plugin插件功能实现.md","核心功能拆解 Plugin插件功能实现","/mybatis/301/"],["30.Mybatis/302.核心功能拆解 一二级缓存原理.md","核心功能拆解 一二级缓存原理","/mybatis/302/"],["30.Mybatis/303.MyBatis Plus+Spring Boot 实现一二级缓存以及自定义缓存.md","MyBatis Plus+Spring Boot 实现一二级缓存以及自定义缓存","/mybatis/303/"]]},{title:"maven",collapsable:!1,children:[["2300.maven/2300.pom 文件介绍及 parent、properties 标签详解.md","pom 文件介绍及 parent、properties 标签详解","/maven/2300/"],["2300.maven/2301.dependencies 标签详解.md","dependencies 标签详解","/maven/2301/"],["2300.maven/2302.使用 Nexus3.x 搭建私服.md","使用 Nexus3.x 搭建私服","/maven/2302/"]]}],catalogue:{},"/01.运维/":[{title:"Docker",collapsable:!1,children:[["40.Docker/400.Docker 概念、命令及Dockerfile介绍.md","Docker 概念、命令及Dockerfile介绍","/docker/400"],["40.Docker/401.Docker-Compose 命令及基本使用.md","Docker-Compose 命令及基本使用","/docker/401"]]}],"/06.作品/":[{title:"Easy-Security",collapsable:!1,children:[["2100.Easy-Security/2100.index.md","介绍及使用","/easy-security/2100"]]},{title:"Easy-Manager-Tool",collapsable:!1,children:[["2200.Easy-Manager-Tool/2200.介绍及安装.md","介绍及安装","/easy-manager-tool/2200"],["2200.Easy-Manager-Tool/2201.功能演示.md","功能演示","/easy-manager-tool/2201"],["2200.Easy-Manager-Tool/2202.内容更新.md","内容更新","/easy-manager-tool/2202"]]}]},extendFrontmatter:{article:!1},updateBar:{showToArticle:!1,moreArticle:"/archives"},social:{icons:[{iconClass:"icon-gitee",title:"gitee",link:"https://gitee.com/dashboard"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/landashu?tab=repositories"},{iconClass:"icon-youjian",title:"发邮件",link:"mailto:875730567@qq.com"}]},footer:{createYear:2023,copyrightInfo:"\n\x3c!--      <a href='https://doc.xugaoyi.com/' target='_blank'>Theme by Vdoing</a> | <a href='http://doc.aizuda.com/' rel='external nofollow' target='_blank'>Copyright © 2022-2023 AiZuDa</a>--\x3e\n\x3c!--      <br>--\x3e\n\x3c!--      <a href=\"http://beian.miit.gov.cn/\" target=\"_blank\">鲁ICP备2021041554号-1</a>--\x3e\n    "}}},Js=(t(116),t(213),t(111),t(223)),Qs=t(224),Ys=(t(377),t(158),t(52));var Zs={computed:{$filterPosts:function(){return this.$site.pages.filter((function(n){var e=n.frontmatter,t=e.pageComponent,r=e.article,a=e.home;return!(t||!1===r||!0===a)}))},$sortPosts:function(){return(n=this.$filterPosts).sort((function(n,e){var t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(Ys.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(Ys.a)(n,e)})),n;var n},$sortPostsByDate:function(){return(n=this.$filterPosts).sort((function(n,e){return Object(Ys.a)(n,e)})),n;var n},$groupPosts:function(){return function(n){for(var e={},t={},r=function(r,a){var o=n[r].frontmatter,i=o.categories,s=o.tags;"array"===Object(Ys.n)(i)&&i.forEach((function(t){t&&(e[t]||(e[t]=[]),e[t].push(n[r]))})),"array"===Object(Ys.n)(s)&&s.forEach((function(e){e&&(t[e]||(t[e]=[]),t[e].push(n[r]))}))},a=0,o=n.length;a<o;a++)r(a);return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags:function(){return function(n){var e=[],t=[];for(var r in n.categories)e.push({key:r,length:n.categories[r].length});for(var a in n.tags)t.push({key:a,length:n.tags[a].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Ia.component(Js.default),Ia.component(Qs.default);function nc(n){return n.toString().padStart(2,"0")}t(381);Ia.component("Badge",(function(){return Promise.all([t.e(1),t.e(12)]).then(t.bind(null,512))})),Ia.component("CodeBlock",(function(){return Promise.resolve().then(t.bind(null,223))})),Ia.component("CodeGroup",(function(){return Promise.resolve().then(t.bind(null,224))}));t(382);var ec=Ia.extend({props:{bvid:{type:String,default:{page:1,danmaku:!0,allowfullscreen:"allowfullscreen",sandbox:"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups",width:"100%",height:[.5625,70]}.bvid,required:!0},danmaku:{type:Boolean,default:!0,required:!1},page:{type:Number,default:1,required:!1},sandbox:{type:String,default:"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups",required:!1},allowfullscreen:{type:[String,Boolean],default:"allowfullscreen",required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return[.5625,70]},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("iframe",{ref:"sbplayer",style:"width: ".concat(this.width),attrs:{src:"//player.bilibili.com/player.html?bvid=".concat(this.bvid,"&page=").concat(this.page,"&danmaku=").concat(this.danmaku),allowfullscreen:(this.allowfullscreen,!0),scrolling:"no",frameborder:"0",sandbox:this.sandbox}})])},mounted:function(){var n=this;this.$nextTick((function(){var e=n.$refs.sbplayer;e.style.height="".concat(e.scrollWidth*n.height[0]+n.height[1],"px")}))}}),tc=Ia.extend({props:{xid:{type:String,default:null,required:!0},id:{type:String,default:null,required:!1},autoplay:{type:Boolean,default:!1,required:!1},startTime:{type:Number,default:0,required:!1},sandbox:{type:String,default:"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups",required:!1},allowfullscreen:{type:[String,Boolean],default:"allowfullscreen",required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return[.5625,0]},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("iframe",{ref:"sbplayer",style:"width: ".concat(this.width),attrs:{src:"//www.ixigua.com/iframe/".concat(this.xid,"?").concat(this.id?"id="+this.id+"&":"","autoplay=").concat(this.autoplay?1:0,"&startTime=").concat(this.startTime),allowfullscreen:(this.allowfullscreen,!0),scrolling:"no",frameborder:"0",sandbox:this.sandbox}})])},mounted:function(){var n=this;this.$nextTick((function(){var e=n.$refs.sbplayer;e.style.height="".concat(e.scrollWidth*n.height[0]+n.height[1],"px")}))}}),rc=t(23),ac=t(17),oc=(t(106),t(151),function(){function n(e){ls(this,n),Object(ac.a)(this,"src",void 0),Object(ac.a)(this,"player",void 0),e&&(this.src=e)}var e;return ps(n,[{key:"InitPlayer",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!this.src){n.next=4;break}return n.next=3,t.e(6).then(t.t.bind(null,475,7)).then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(r){var a,o,i,s,c,l,u,p,d,f,m,h,v,g,b,y,x,w,k,j,S,O,C,E,A,_,B,P,T,I,M;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(f=r.default,m=!1,h=!1,v=!1,g=!1,b=!1,e.src.video.customType=(null===(a=e.src)||void 0===a||null===(o=a.video)||void 0===o?void 0:o.customType)||{},null!==(i=e.src)&&void 0!==i&&null!==(s=i.video)&&void 0!==s&&s.type||(null!==(y=e.src)&&void 0!==y&&null!==(x=y.video)&&void 0!==x&&x.url.toLowerCase().endsWith(".m3u8")?e.src.video.type="hls":null!==(w=e.src)&&void 0!==w&&null!==(k=w.video)&&void 0!==k&&k.url.toLowerCase().endsWith(".flv")?e.src.video.type="flv":null!==(j=e.src)&&void 0!==j&&null!==(S=j.video)&&void 0!==S&&S.url.toLowerCase().endsWith(".mpd")&&(e.src.video.type="shakaDash")),null===(c=e.src)||void 0===c||null===(l=c.video)||void 0===l||!l.type||"string"!=typeof e.src.video.type){n.next=27;break}n.t0=e.src.video.type.toLowerCase(),n.next="hls"===n.t0||"m3u8"===n.t0?12:"flv"===n.t0?15:"dash"===n.t0?18:"shakadash"===n.t0||"shaka"===n.t0||"shaka-dash"===n.t0?21:"webtorrent"===n.t0?24:27;break;case 12:return e.src.video.type="smplayerDplayerHls",m=!0,n.abrupt("break",27);case 15:return e.src.video.type="smplayerDplayerFlv",h=!0,n.abrupt("break",27);case 18:return e.src.video.type="smplayerDplayerDash",v=!0,n.abrupt("break",27);case 21:return e.src.video.type="smplayerDplayerShakaDash",g=!0,n.abrupt("break",27);case 24:return e.src.video.type="smplayerDplayerWebtorrent",b=!0,n.abrupt("break",27);case 27:if(null!=(null===(u=e.src)||void 0===u||null===(p=u.video)||void 0===p?void 0:p.quality)&&e.src.video.quality.length>0&&e.src.video.quality.forEach((function(n){if(null==n.type&&(n.url.toLowerCase().endsWith(".m3u8")?n.type="m3u8":n.url.toLowerCase().endsWith(".flv")?n.type="flv":n.url.toLowerCase().endsWith(".mpd")&&(n.type="shakaDash")),null!=n.type&&"string"==typeof n.type)switch(n.type.toLowerCase()){case"hls":case"m3u8":n.type="smplayerDplayerHls",m=!0;break;case"flv":n.type="smplayerDplayerFlv",h=!0;break;case"dash":n.type="smplayerDplayerDash",v=!0;break;case"shakadash":case"shaka":case"shaka-dash":n.type="smplayerDplayerShakaDash",g=!0;break;case"webtorrent":n.type="smplayerDplayerWebtorrent",b=!0}})),m&&Object.assign(null===(O=e.src)||void 0===O||null===(C=O.video)||void 0===C?void 0:C.customType,{smplayerDplayerHls:function(n,e){t.e(7).then(t.t.bind(null,476,7)).then((function(t){var r=t.default,a=n.src,o=new r;o.attachMedia(n),o.on(r.Events.MEDIA_ATTACHED,(function(){o.loadSource(a)})),e.on("destroy",(function(){o.destroy()}))}))}}),h&&Object.assign(null===(E=e.src)||void 0===E||null===(A=E.video)||void 0===A?void 0:A.customType,{smplayerDplayerFlv:function(n,e){t.e(8).then(t.t.bind(null,477,7)).then((function(t){var r=t.default.createPlayer({type:"flv",url:n.src});r.attachMediaElement(n),r.load(),e.on("destroy",(function(){r.destroy()}))}))}}),v&&Object.assign(null===(_=e.src)||void 0===_||null===(B=_.video)||void 0===B?void 0:B.customType,{smplayerDplayerDash:function(n,e){t.e(5).then(t.t.bind(null,478,7)).then((function(t){var r=t.default.MediaPlayer().create();r.initialize(n,n.src,!1),e.on("destroy",(function(){r.reset()}))}))}}),g&&Object.assign(null===(P=e.src)||void 0===P||null===(T=P.video)||void 0===T?void 0:T.customType,{smplayerDplayerShakaDash:function(n,e){t.e(9).then(t.t.bind(null,479,7)).then((function(t){var r=new t.default.Player(n);r.load(n.src).then((function(){e.on("destroy",(function(){r.destroy()}))}))}))}}),b&&Object.assign(null===(I=e.src)||void 0===I||null===(M=I.video)||void 0===M?void 0:M.customType,{smplayerDplayerWebtorrent:function(n,e){t.e(10).then(t.t.bind(null,480,7)).then((function(t){var r=new(0,t.default);r.add(n.src,(function(t){t.files.find((function(n){return n.name.endsWith(".mp4")})).renderTo(n),e.on("destroy",(function(){r.destroy()}))}))}))}}),null===(d=e.src)||void 0===d||!d.customInit){n.next=39;break}return n.next=36,e.src.customInit(f,e.src).then((function(n){return e.player=n,e.player}));case 36:n.t1=n.sent,n.next=40;break;case 39:n.t1=new f(e.src);case 40:return e.player=n.t1,n.abrupt("return",e.player);case 42:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 3:return n.abrupt("return",n.sent);case 4:case"end":return n.stop()}}),n,this)}))),function(){return e.apply(this,arguments)})},{key:"DestroyPlayer",value:function(){var n;null===(n=this.player)||void 0===n||n.destroy()}},{key:"AddOnEvent",value:function(n){var e=this;n&&this.player&&Object.keys(n).forEach((function(t){e.player.on(t,(function(){return n[t](e.player,e.src)}))}))}}]),n}()),ic=t(24),sc=t.n(ic),cc=Ia.extend({props:{src:{type:Object,required:!0},on:{type:Object,default:function(){return{}},required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return{src:{container:null},width:"100%",on:{}}.height},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer",style:"width: ".concat(this.width)})])},data:function(){return{player:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=sc()({},n.on),r=Object(rc.a)(Object(rc.a)({},sc()({container:null},n.src)),{},{container:n.$refs.sbplayer}),n.player=new oc(r),e.next=5,n.player.InitPlayer();case 5:n.player.AddOnEvent(t);case 6:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.player)||void 0===n||n.DestroyPlayer()}}),lc=(t(107),function(){function n(e){ls(this,n),Object(ac.a)(this,"src",void 0),Object(ac.a)(this,"player",void 0),e&&(this.src=e)}var e;return ps(n,[{key:"InitPlayer",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!this.src){n.next=4;break}return n.next=3,Promise.all([Promise.all([t.e(1),t.e(3)]).then(t.t.bind(null,481,7)),Promise.all([t.e(1),t.e(3)]).then(t.t.bind(null,482,7))]).then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(r){var a,o,i,s,c,l,u,p;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(c=Object(Ki.a)(r,1),l=c[0].default,e.src.customAudioType=(null===(a=e.src)||void 0===a?void 0:a.customAudioType)||{},u=!1,null===(o=e.src)||void 0===o||null===(i=o.audio)||void 0===i||i.forEach((function(n){if(n.type||n.url.toLowerCase().endsWith(".m3u8")&&(n.type="hls"),n.type&&"string"==typeof n.type)switch(n.type.toLowerCase()){case"hls":case"m3u8":n.type="smplayerAplayerHls",u=!0}})),u&&Object.assign(null===(p=e.src)||void 0===p?void 0:p.customAudioType,{smplayerAplayerHls:function(n,e,r){t.e(7).then(t.t.bind(null,476,7)).then((function(t){var a=t.default,o=!1===r.audio.paused;if(n.canPlayType("application/x-mpegURL")||n.canPlayType("application/vnd.apple.mpegURL"))n.src=e.url;else if(a.isSupported()){var i=new a;i.attachMedia(n),i.on(a.Events.MEDIA_ATTACHED,(function(){i.loadSource(e.url)})),r.on("destroy",(function(){i.destroy()}))}else r.notice("Error: HLS is not supported.");o&&r.play()}))}}),null===(s=e.src)||void 0===s||!s.customInit){n.next=11;break}return n.next=8,e.src.customInit(l,e.src).then((function(n){return e.player=n,e.player}));case 8:n.t0=n.sent,n.next=12;break;case 11:n.t0=new l(e.src);case 12:return e.player=n.t0,n.abrupt("return",e.player);case 14:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 3:return n.abrupt("return",n.sent);case 4:case"end":return n.stop()}}),n,this)}))),function(){return e.apply(this,arguments)})},{key:"DestroyPlayer",value:function(){var n;!this.player||null!==(n=this.src)&&void 0!==n&&n.fixed||this.player.destroy()}},{key:"AddOnEvent",value:function(n){var e=this;n&&this.player&&Object.keys(n).forEach((function(t){e.player.on(t,(function(){return n[t](e.player,e.src)}))}))}}]),n}()),uc=Ia.extend({props:{src:{type:Object,required:!0},on:{type:Object,default:function(){return{}},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer"})])},data:function(){return{player:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=sc()({},n.on),r=Object(rc.a)(Object(rc.a)({},sc()({lrcType:3},n.src)),{},{container:n.$refs.sbplayer}),n.player=new lc(r),e.next=5,n.player.InitPlayer();case 5:n.player.AddOnEvent(t),n.$nextTick((function(){if(n.src.fixed){var e=document.querySelector("#app");null==e||e.append(n.$el)}}));case 7:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.player)||void 0===n||n.DestroyPlayer()}}),pc=function(){function n(e){ls(this,n),Object(ac.a)(this,"src",void 0),Object(ac.a)(this,"player",void 0),e&&(this.src=e)}var e;return ps(n,[{key:"InitPlayer",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!this.src){n.next=4;break}return n.next=3,t.e(4).then(t.t.bind(null,483,7)).then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(r){var a,o,i,s,c,l,u,p,d,f,m,h,v,g,b,y,x,w,k,j,S,O;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(l=r.default,u=!1,p=!1,d=!1,f=!1,m=!1,e.src.customType=(null===(a=e.src)||void 0===a?void 0:a.customType)||{},null!==(o=e.src)&&void 0!==o&&o.type||(null!==(h=e.src)&&void 0!==h&&null!==(v=h.url)&&void 0!==v&&v.toLowerCase().endsWith(".m3u8")?e.src.type="hls":null!==(g=e.src)&&void 0!==g&&null!==(b=g.url)&&void 0!==b&&b.toLowerCase().endsWith(".flv")?e.src.type="flv":null!==(y=e.src)&&void 0!==y&&null!==(x=y.url)&&void 0!==x&&x.toLowerCase().endsWith(".mpd")&&(e.src.type="shakaDash")),null===(i=e.src)||void 0===i||!i.type||"string"!=typeof e.src.type){n.next=27;break}n.t0=e.src.type.toLowerCase(),n.next="hls"===n.t0||"m3u8"===n.t0?12:"flv"===n.t0?15:"dash"===n.t0?18:"shakadash"===n.t0||"shaka"===n.t0||"shaka-dash"===n.t0?21:"webtorrent"===n.t0?24:27;break;case 12:return e.src.type="smplayerArtplayerHls",u=!0,n.abrupt("break",27);case 15:return e.src.type="smplayerArtplayerFlv",p=!0,n.abrupt("break",27);case 18:return e.src.type="smplayerArtplayerDash",d=!0,n.abrupt("break",27);case 21:return e.src.type="smplayerArtplayerShakaDash",f=!0,n.abrupt("break",27);case 24:return e.src.type="smplayerArtplayerWebtorrent",m=!0,n.abrupt("break",27);case 27:if(null!=(null===(s=e.src)||void 0===s?void 0:s.quality)&&e.src.quality.length>0&&e.src.quality.forEach((function(n){if(null==n.type&&(n.url.toLowerCase().endsWith(".m3u8")?n.type="m3u8":n.url.toLowerCase().endsWith(".flv")?n.type="flv":n.url.toLowerCase().endsWith(".mpd")&&(n.type="shakaDash")),null!=n.type&&"string"==typeof n.type)switch(n.type.toLowerCase()){case"hls":case"m3u8":n.type="smplayerArtplayerHls",u=!0;break;case"flv":n.type="smplayerArtplayerFlv",p=!0;break;case"dash":n.type="smplayerArtplayerDash",d=!0;break;case"shakadash":case"shaka":case"shaka-dash":n.type="smplayerArtplayerShakaDash",f=!0;break;case"webtorrent":n.type="smplayerArtplayerWebtorrent",m=!0}})),u&&Object.assign(null===(w=e.src)||void 0===w?void 0:w.customType,{smplayerArtplayerHls:function(n,e,r){t.e(7).then(t.t.bind(null,476,7)).then((function(t){var a=t.default,o=new a;o.attachMedia(n),o.on(a.Events.MEDIA_ATTACHED,(function(){o.loadSource(e)})),r.on("destroy",(function(){o.destroy()}))}))}}),p&&Object.assign(null===(k=e.src)||void 0===k?void 0:k.customType,{smplayerArtplayerFlv:function(n,e,r){t.e(8).then(t.t.bind(null,477,7)).then((function(t){var a=t.default.createPlayer({type:"flv",url:e});a.attachMediaElement(n),a.load(),r.on("destroy",(function(){a.destroy()}))}))}}),d&&Object.assign(null===(j=e.src)||void 0===j?void 0:j.customType,{smplayerArtplayerDash:function(n,e,r){t.e(5).then(t.t.bind(null,478,7)).then((function(t){var a=t.default.MediaPlayer().create();a.initialize(n,e,!1),r.on("destroy",(function(){a.reset()}))}))}}),f&&Object.assign(null===(S=e.src)||void 0===S?void 0:S.customType,{smplayerArtplayerShakaDash:function(n,e,r){t.e(9).then(t.t.bind(null,479,7)).then((function(t){var a=new t.default.Player(n);a.load(e).then((function(){r.on("destroy",(function(){a.destroy()}))}))}))}}),m&&Object.assign(null===(O=e.src)||void 0===O?void 0:O.customType,{smplayerArtplayerWebtorrent:function(n,e,r){t.e(10).then(t.t.bind(null,480,7)).then((function(t){var a=new(0,t.default);a.add(e,(function(e){e.files.find((function(n){return n.name.endsWith(".mp4")})).renderTo(n),r.on("destroy",(function(){a.destroy()}))}))}))}}),null===(c=e.src)||void 0===c||!c.customInit){n.next=39;break}return n.next=36,e.src.customInit(l,e.src).then((function(n){return e.player=n,e.player}));case 36:n.t1=n.sent,n.next=40;break;case 39:n.t1=new l(e.src);case 40:return e.player=n.t1,n.abrupt("return",e.player);case 42:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 3:return n.abrupt("return",n.sent);case 4:case"end":return n.stop()}}),n,this)}))),function(){return e.apply(this,arguments)})},{key:"DestroyPlayer",value:function(){var n;null===(n=this.player)||void 0===n||n.destroy()}},{key:"AddOnEvent",value:function(n){var e=this;n&&this.player&&Object.keys(n).forEach((function(t){e.player.on(t,(function(){return n[t](e.player,e.src)}))}))}}]),n}(),dc=Ia.extend({props:{src:{type:Object,required:!0},on:{type:Object,default:function(){return{}},required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return[.5625,0]},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer",style:"width: ".concat(this.width)})])},data:function(){return{player:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t,r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.$refs.sbplayer,r=sc()({},n.on),a=Object(rc.a)(Object(rc.a)({},sc()({url:"",fullscreen:!0,autoSize:!0,setting:!0,playbackRate:!0,whitelist:["*"],moreVideoAttr:{preload:"auto"}},n.src)),{},{container:t}),n.player=new pc(a),e.next=6,n.player.InitPlayer();case 6:n.player.AddOnEvent(r),t.style.height=t.scrollWidth*n.height[0]+n.height[1]+"px";case 8:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.player)||void 0===n||n.DestroyPlayer()}});t(216);function fc(n,e){return(fc=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}function mc(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&fc(n,e)}t(217),t(218);function hc(n){return(hc=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function vc(n,e){if(e&&("object"===Ci(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n)}function gc(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var t,r=hc(n);if(e){var a=hc(this).constructor;t=Reflect.construct(r,arguments,a)}else t=r.apply(this,arguments);return vc(this,t)}}t(238),t(239);var bc=function(n){mc(a,n);var e,t=gc(a);function a(){return ls(this,a),t.call(this)}return ps(a,[{key:"InitMeting",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e,t,a,o,i,s,c=this,l=arguments;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return e=l.length>0&&void 0!==l[0]?l[0]:{},t=l.length>1?l[1]:void 0,a=[],o=e.audio||[],i=e.list||[],(e.id||e.auto)&&(i=[{id:e.id,server:e.server,type:e.type,auth:e.auth,auto:e.auto}].concat(i.map((function(n){return{id:n.id,server:n.server,type:n.type,auth:n.auth,auto:n.auto}})))),i&&i.length>0&&i.map((function(n){if(n.id||n.auto){var t=c.ParseMeting({id:n.id,server:n.server,type:n.type,auth:n.auth,auto:n.auto},e.api);t&&a.push(t)}})),s=a.map(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,fetch(e);case 2:return n.abrupt("return",n.sent.json());case 3:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()),n.next=10,Promise.all(s).then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(r){var a;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r.map((function(n){o=o.concat(n.map((function(n){return{name:(null==n?void 0:n.name)||(null==n?void 0:n.title)||"Audio name",artist:(null==n?void 0:n.artist)||(null==n?void 0:n.author)||"Audio artist",url:null==n?void 0:n.url,cover:(null==n?void 0:n.cover)||(null==n?void 0:n.pic),lrc:(null==n?void 0:n.lrc)||(null==n?void 0:n.lyric)||"",type:(null==n?void 0:n.type)||"auto"}})))})),a={container:t,audio:o,fixed:e.fixed,mini:e.mini,autoplay:e.autoplay,loop:e.loop,order:e.order,preload:e.preload,volume:e.volume,mutex:e.mutex,lrcType:e.lrcType,listFolded:e.listFolded,listMaxHeight:e.listMaxHeight,storageName:e.storageName},c.src=a,n.abrupt("return",c.InitPlayer());case 4:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 10:return n.abrupt("return",n.sent);case 11:case"end":return n.stop()}}),n)}))),function(){return e.apply(this,arguments)})},{key:"ParseMeting",value:function(n,e){return n&&n.auto&&(n=this.ParseLink(n.auto)),n&&n.server&&n.type&&n.id?e.replace(":server",n.server).replace(":type",n.type).replace(":id",n.id).replace(":auth",n.auth).replace(":r",Math.random().toString()):""}},{key:"ParseLink",value:function(n){for(var e=0,t=[["music.163.com.*song.*id=(\\d+)","netease","song"],["music.163.com.*album.*id=(\\d+)","netease","album"],["music.163.com.*artist.*id=(\\d+)","netease","artist"],["music.163.com.*playlist.*id=(\\d+)","netease","playlist"],["music.163.com.*discover/toplist.*id=(\\d+)","netease","playlist"],["y.qq.com.*song/(\\w+).html","tencent","song"],["y.qq.com.*songDetail/(\\w+)","tencent","song"],["y.qq.com.*album/(\\w+).html","tencent","album"],["y.qq.com.*singer/(\\w+).html","tencent","artist"],["y.qq.com.*playsquare/(\\w+).html","tencent","playlist"],["y.qq.com.*playlist/(\\w+).html","tencent","playlist"],["xiami.com.*song/(\\w+)","xiami","song"],["xiami.com.*album/(\\w+)","xiami","album"],["xiami.com.*artist/(\\w+)","xiami","artist"],["xiami.com.*collect/(\\w+)","xiami","playlist"]];e<t.length;e++){var r=t[e],a=new RegExp(r[0]).exec(n);if(a)return{server:r[1],type:r[2],id:a[1]}}return console.error("无法解析的链接: ".concat(n,"，请检查链接是否书写正确")),{}}}]),a}(lc),yc=Ia.extend({props:{id:{required:!1,type:String,default:""},server:{required:!1,type:String,default:"tencent"},type:{required:!1,type:String,default:"song"},auto:{required:!1,type:String,default:""},fixed:{required:!1,type:Boolean,default:!1},mini:{required:!1,type:Boolean,default:!1},autoplay:{required:!1,type:Boolean,default:!1},theme:{required:!1,type:String,default:"#2980b9"},loop:{required:!1,type:String,default:"all"},order:{required:!1,type:String,default:"list"},preload:{required:!1,type:String,default:"auto"},volume:{required:!1,type:Number,default:.7},mutex:{required:!1,type:Boolean,default:!0},lrcType:{required:!1,type:Number,default:3},listFolded:{required:!1,type:Boolean,default:!1},listMaxHeight:{required:!1,type:String,default:"340px"},storageName:{required:!1,type:String,default:"vuepress-plugin-smplayer"},api:{required:!1,type:String,default:"https://api.i-meto.com/meting/api?server=:server&type=:type&id=:id&r=:r"},audio:{required:!1,type:Array},list:{required:!1,type:Array}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer"})])},data:function(){return{meting:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.$props,n.meting=new bc,e.next=4,n.meting.InitMeting(t,n.$refs.sbplayer);case 4:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.meting)||void 0===n||n.DestroyPlayer()}}),xc=function(){function n(e){ls(this,n),Object(ac.a)(this,"src",void 0),Object(ac.a)(this,"player",void 0),e&&(this.src=e)}var e;return ps(n,[{key:"InitPlayer",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e,a,o,i,s,c=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!this.src){n.next=24;break}if(null!==(e=this.src)&&void 0!==e&&e.type||"string"!=typeof(null===(a=this.src)||void 0===a?void 0:a.url)||(this.src.url.toLowerCase().endsWith(".m3u8")?this.src.type="hls":this.src.url.toLowerCase().endsWith(".flv")?this.src.type="flv":this.src.url.toLowerCase().endsWith(".mpd")&&(this.src.type="shaka")),s=t.e(0).then(t.t.bind(null,389,7)),null===(o=this.src)||void 0===o||!o.type||"string"!=typeof this.src.type){n.next=20;break}n.t0=this.src.type.toLowerCase(),n.next="hls"===n.t0||"m3u8"===n.t0?7:"flv"===n.t0?9:"dash"===n.t0?11:"shakadash"===n.t0||"shaka"===n.t0||"shaka-dash"===n.t0?13:"music"===n.t0?15:17;break;case 7:return i=Promise.all([Promise.all([t.e(0),t.e(37)]).then(t.t.bind(null,484,7)),s]),n.abrupt("break",18);case 9:return i=Promise.all([Promise.all([t.e(0),t.e(36)]).then(t.t.bind(null,485,7)),s]),n.abrupt("break",18);case 11:return i=Promise.all([Promise.all([t.e(0),t.e(35)]).then(t.t.bind(null,486,7)),s]),n.abrupt("break",18);case 13:return i=Promise.all([Promise.all([t.e(0),t.e(39)]).then(t.t.bind(null,487,7)),s]),n.abrupt("break",18);case 15:return i=Promise.all([Promise.all([t.e(0),t.e(38)]).then(t.t.bind(null,488,7)),s]),n.abrupt("break",18);case 17:i=t.e(0).then(t.t.bind(null,389,7));case 18:n.next=21;break;case 20:i=Promise.all([s]);case 21:return n.next=23,i.then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){var t,r,a;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(r=Object(Ki.a)(e,1),a=r[0].default,null===(t=c.src)||void 0===t||!t.customInit){n.next=7;break}return n.next=4,c.src.customInit(a,c.src).then((function(n){return n}));case 4:n.t0=n.sent,n.next=8;break;case 7:n.t0=new a(c.src);case 8:return c.player=n.t0,n.abrupt("return",c.player);case 10:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 23:return n.abrupt("return",n.sent);case 24:case"end":return n.stop()}}),n,this)}))),function(){return e.apply(this,arguments)})},{key:"DestroyPlayer",value:function(){var n;null===(n=this.player)||void 0===n||n.destroy()}},{key:"AddOnEvent",value:function(n){var e=this;n&&this.player&&Object.keys(n).forEach((function(t){e.player.on(t,(function(){return n[t](e.player,e.src)}))}))}}]),n}(),wc=Ia.extend({props:{src:{type:Object,required:!0},on:{type:Object,default:function(){return{}},required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return{src:{url:"",fluid:!0,fitVideoSize:"auto"},width:"100%",on:{}}.height},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer",style:"width: ".concat(this.width)})])},data:function(){return{player:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=sc()({},n.on),r=Object(rc.a)(Object(rc.a)({},sc()({url:"",fluid:!0,fitVideoSize:"auto"},n.src)),{},{el:n.$refs.sbplayer}),n.player=new xc(r),e.next=5,n.player.InitPlayer();case 5:n.player.AddOnEvent(t);case 6:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.player)||void 0===n||n.DestroyPlayer()}}),kc=[function(n){var e=n.Vue,t=(n.options,n.router,n.siteData);t.pages.map((function(n){var e=n.frontmatter,r=e.date,a=e.author;"string"==typeof r&&"Z"===r.charAt(r.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return"".concat(n.getUTCFullYear(),"-").concat(nc(n.getUTCMonth()+1),"-").concat(nc(n.getUTCDate())," ").concat(nc(n.getUTCHours()),":").concat(nc(n.getUTCMinutes()),":").concat(nc(n.getUTCSeconds()))}(r)),a?n.author=a:t.themeConfig.author&&(n.author=t.themeConfig.author)})),e.mixin(Zs)},{},function(n){n.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{},function(n){var e=n.Vue;e.component("Bilibili",ec),e.component("Xigua",tc),e.component("DPlayer",cc),e.component("APlayer",uc),e.component("Artplayer",dc),e.component("Meting",yc),e.component("metingJs",yc),e.component("Xgplayer",wc)}],jc=[];t(148);var Sc=function(n){mc(t,n);var e=gc(t);function t(){return ls(this,t),e.apply(this,arguments)}return ps(t)}(function(){function n(){ls(this,n),this.store=new Ia({data:{state:{}}})}return ps(n,[{key:"$get",value:function(n){return this.store.state[n]}},{key:"$set",value:function(n,e){Ia.set(this.store.state,n,e)}},{key:"$emit",value:function(){var n;(n=this.store).$emit.apply(n,arguments)}},{key:"$on",value:function(){var n;(n=this.store).$on.apply(n,arguments)}}]),n}());Object.assign(Sc.prototype,{getPageAsyncComponent:Fi,getLayoutAsyncComponent:Ui,getAsyncComponent:Vi,getVueComponent:Hi});var Oc={install:function(n){var e=new Sc;n.$vuepress=e,n.prototype.$vuepress=e}};function Cc(n){n.beforeEach((function(e,t,r){if(Ec(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){var a=e.path.replace(/\/$/,"")+".html";Ec(n,a)?r(a):r()}else r();else{var o=e.path+"/",i=e.path+".html";Ec(n,i)?r(i):Ec(n,o)?r(o):r()}}))}function Ec(n,e){var t=e.toLowerCase();return n.options.routes.some((function(n){return n.path.toLowerCase()===t}))}var Ac={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(n){var e=this.pageKey||this.$parent.$page.key;return Gi("pageKey",e),Ia.component(e)||Ia.component(e,Fi(e)),Ia.component(e)?n(e):n("")}},_c={functional:!0,props:{slotKey:String,required:!0},render:function(n,e){var t=e.props,r=e.slots;return n("div",{class:["content__".concat(t.slotKey)]},r()[t.slotKey])}},Bc={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Pc=(t(386),t(387),Object(Ws.a)(Bc,(function(){var n=this.$createElement,e=this._self._c||n;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function Tc(){return(Tc=Object(r.a)(regeneratorRuntime.mark((function n(e){var t,r,a,o;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:Xs.routerBase||Xs.base,Cc(r=new Si({base:t,mode:"history",fallback:!1,routes:Ks,scrollBehavior:function(n,e,t){return t||(n.hash?!Ia.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})}})),a={},n.prev=4,n.next=7,Promise.all(kc.filter((function(n){return"function"==typeof n})).map((function(n){return n({Vue:Ia,options:a,router:r,siteData:Xs,isServer:e})})));case 7:n.next=12;break;case 9:n.prev=9,n.t0=n.catch(4),console.error(n.t0);case 12:return o=new Ia(Object.assign(a,{router:r,render:function(n){return n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},jc.map((function(e){return n(e)})))])}})),n.abrupt("return",{app:o,router:r});case 14:case"end":return n.stop()}}),n,null,[[4,9]])})))).apply(this,arguments)}Ia.config.productionTip=!1,Ia.use(Si),Ia.use(Oc),Ia.mixin(function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ia;Oi(e),t.$vuepress.$set("siteData",e);var r=n(t.$vuepress.$get("siteData")),a=new r,o=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(a)),i={};return Object.keys(o).reduce((function(n,e){return e.startsWith("$")&&(n[e]=o[e].get),n}),i),{computed:i}}((function(n){return function(){function e(){ls(this,e)}return ps(e,[{key:"setPage",value:function(n){this.__page=n}},{key:"$site",get:function(){return n}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var n,e,t=this.$site.locales,r=void 0===t?{}:t;for(var a in r)"/"===a?e=r[a]:0===this.$page.path.indexOf(a)&&(n=r[a]);return n||e||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var n=this.$page.frontmatter.canonicalUrl;return"string"==typeof n&&n}},{key:"$title",get:function(){var n=this.$page,e=this.$page.frontmatter.metaTitle;if("string"==typeof e)return e;var t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}},{key:"$description",get:function(){var n=function(n){if(n){var e=n.filter((function(n){return"description"===n.name}))[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(n,e){for(var t=0;t<n.length;t++){var r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),e}()}),Xs)),Ia.component("Content",Ac),Ia.component("ContentSlotsDistributor",_c),Ia.component("OutboundLink",Pc),Ia.component("ClientOnly",{functional:!0,render:function(n,e){var t=e.parent,r=e.children;if(t._isMounted)return r;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),Ia.component("Layout",Ui("Layout")),Ia.component("NotFound",Ui("NotFound")),Ia.prototype.$withBase=function(n){var e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.7",hash:"25fc7f3"},function(n){return Tc.apply(this,arguments)}(!1).then((function(n){var e=n.app;n.router.onReady((function(){e.$mount("#app")}))}))}]);