(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{494:function(s,e,n){"use strict";n.r(e);var t=n(41),r=Object(t.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"aop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[s._v("#")]),s._v(" AOP")]),s._v(" "),n("p",[s._v("AOP 的诞生可以追溯到上世纪 90 年代初期，它最早由 Gregor Kiczales 等人提出，并在 1997 年发表了经典的论文 Aspect-Oriented Programming。后来，AspectJ 成为了 Java 生态中使用最广泛的 AOP 框架之一。")]),s._v(" "),n("p",[s._v("AOP 的目的是为了解决在 OOP（面向对象编程）中难以处理的横切关注点问题，即将系统业务逻辑代码与其他非业务功能（如日志记录、性能统计、安全控制等）分离开来。AOP 通过把这些非业务功能独立出来，在需要时动态地植入到系统中，从而实现对业务逻辑的无侵入式增强。")]),s._v(" "),n("p",[s._v("AOP 的核心在于其能够将业务逻辑与非业务功能分离开来，从而降低了代码的耦合度，并且支持在运行时动态地植入和移除切面。这样一来，就可以实现更加灵活、可维护和可扩展的系统。")]),s._v(" "),n("p",[s._v("AOP 的具体表现包括切面（Aspect）、连接点（Join Point）、通知（Advice）、切点（Pointcut）和引入（Introduction）等概念。其中，切面是指横跨多个对象的通用功能，连接点是程序执行过程中能够插入切面的点，通知则是定义了切面在连接点处所执行的操作，切点则是一个谓词表达式，用于匹配连接点，引入则是为某个对象添加新的接口实现。具体如下代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    public void test_proxy_method() {\n        // 目标对象(可以替换成任何的目标对象)\n        Object targetObj = new UserService();\n        // AOP 代理\n        IUserService proxy = (IUserService) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), targetObj.getClass().getInterfaces(), new InvocationHandler() {\n            // 方法匹配器\n            MethodMatcher methodMatcher = new AspectJExpressionPointcut("execution(* cn.bugstack.springframework.test.bean.IUserService.*(..))");\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                if (methodMatcher.matches(method, targetObj.getClass())) {\n                    // 方法拦截器\n                    MethodInterceptor methodInterceptor = invocation -> {\n                        long start = System.currentTimeMillis();\n                        try {\n                            return invocation.proceed();\n                        } finally {\n                            System.out.println("监控 - Begin By AOP");\n                            System.out.println("方法名称：" + invocation.getMethod().getName());\n                            System.out.println("方法耗时：" + (System.currentTimeMillis() - start) + "ms");\n                            System.out.println("监控 - End\\r\\n");\n                        }\n                    };\n                    // 反射调用\n                    return methodInterceptor.invoke(new ReflectiveMethodInvocation(targetObj, method, args));\n                }\n                return method.invoke(targetObj, args);\n            }\n        });\n        String result = proxy.queryUserInfo();\n        System.out.println("测试结果：" + result);\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])]),n("p",[s._v("这段代码使用了 JDK 动态代理实现 AOP 的功能，没有使用 Spring 提供的方法、类和注解等。")]),s._v(" "),n("ul",[n("li",[s._v("连接点：连接点是在目标对象上匹配的特定点，这里的连接点是 IUserService 接口中的所有方法，由于使用了 targetObj.getClass ().getInterfaces () 获取目标对象所实现的接口，因此只拦截了 IUserService 接口中的方法。")]),s._v(" "),n("li",[s._v("切面：切面是一个模块化的横切关注点，在这里我们可以视为没有显式定义的切面。而是直接在 InvocationHandler.invoke () 中实现了拦截和增强逻辑，包括方法匹配器、方法拦截器和反射调用等。")]),s._v(" "),n("li",[s._v('切点：切点是一种谓词表达式，用于匹配连接点。这里使用了 AspectJ 表达式 "execution (* cn.bugstack.springframework.test.bean.IUserService.*(..))"，它匹配了 IUserService 接口中的所有方法。')]),s._v(" "),n("li",[s._v("通知：通知类型包括前置通知、后置通知、环绕通知、抛出通知和最终通知。在这里使用了环绕通知，即在方法执行之前和之后添加了监控逻辑。")]),s._v(" "),n("li",[s._v("引入：引介通常是一个特殊的通知类型，它允许在运行时为类动态地添加新接口实现。这里没有使用引介。")])]),s._v(" "),n("h3",{attrs:{id:"封装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[s._v("#")]),s._v(" 封装")]),s._v(" "),n("p",[s._v("在 Spring 中，核心逻辑是离不开上面的代理例子的，只是相对应做了些封装，我们先用类图来简单说明下封装关系：")]),s._v(" "),n("p",[n("img",{attrs:{src:"/assets/img/spring/201/img.png",alt:""}})]),s._v(" "),n("p",[s._v("用测试例子来说明每步的核心")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    /**\n     * 切点表达式，来验证切点\n     * @throws NoSuchMethodException\n     */\n    @Test\n    public void test_aop() throws NoSuchMethodException {\n        AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut("execution(* cn.bugstack.springframework.test.bean.UserService.*(..))");\n        Class<UserService> clazz = UserService.class;\n        Method method = clazz.getDeclaredMethod("queryUserInfo");\n        System.out.println("切点是否包含该类：" + pointcut.matches(clazz));\n        System.out.println("切点是否包含该类该方法：" + pointcut.matches(method, clazz));\n    }\n\n    /**\n     * 切面 和 动态代理\n     */\n    @Test\n    public void test_dynamic() {\n        // 目标对象\n        IUserService userService = new UserService();\n        // 组装代理信息，切面\n        AdvisedSupport advisedSupport = new AdvisedSupport();\n        // 设置代理目标对象\n        advisedSupport.setTargetSource(new TargetSource(userService));\n        // 设置拦截器\n        advisedSupport.setMethodInterceptor(new UserServiceInterceptor());\n        // 匹配代理对象\n        advisedSupport.setMethodMatcher(new AspectJExpressionPointcut("execution(* cn.bugstack.springframework.test.bean.IUserService.*(..))"));\n        // 代理对象(JdkDynamicAopProxy)\n        IUserService proxy_jdk = (IUserService) new JdkDynamicAopProxy(advisedSupport).getProxy();\n        // 测试调用\n        System.out.println("测试结果：" + proxy_jdk.queryUserInfo());\n        // 代理对象(Cglib2AopProxy)\n        IUserService proxy_cglib = (IUserService) new Cglib2AopProxy(advisedSupport).getProxy();\n        // 测试调用\n        System.out.println("测试结果：" + proxy_cglib.register("花花"));\n    }\n\npublic class UserServiceInterceptor implements MethodInterceptor {\n    @Override\n    public Object invoke(MethodInvocation invocation) throws Throwable {\n        long start = System.currentTimeMillis();\n        try {\n            return invocation.proceed();\n        } finally {\n            System.out.println("监控 - Begin By AOP");\n            System.out.println("方法名称：" + invocation.getMethod());\n            System.out.println("方法耗时：" + (System.currentTimeMillis() - start) + "ms");\n            System.out.println("监控 - End\\r\\n");\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br")])]),n("h3",{attrs:{id:"把封装的融入到-spring-中"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#把封装的融入到-spring-中"}},[s._v("#")]),s._v(" 把封装的融入到 Spring 中")]),s._v(" "),n("p",[s._v("右侧部分就是描述了整个融合到 Spring 中的类，会在 Bean 创建的过程中 "),n("strong",[s._v("初始化方法之后")]),s._v(" 这个生命周期内先找到是否提供了 DefaultAdvisorAutoProxyCreator 类的支持，因为他描述了具体代理类的过程。")]),s._v(" "),n("blockquote",[n("p",[s._v("为什么会在初始化方法之后才进行代理，是因为代理类也需要的属性也需要被填充，所以等填充完毕后在代理")])]),s._v(" "),n("p",[n("img",{attrs:{src:"/assets/img/spring/201/img_1.jpg",alt:""}})]),s._v(" "),n("p",[s._v("核心方法，描述了整个类被代理的过程")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    protected Object wrapIfNecessary(Object bean, String beanName) {\n        // 判断Bean是否是Advice，Pointcut，Advisor的子类或者两类相同可以相互转（类层面），用户定义的类都是 false\n        if (isInfrastructureClass(bean.getClass())) return bean;\n        // 得到注册的AspectJExpressionPointcutAdvisor\n        Collection<AspectJExpressionPointcutAdvisor> advisors = beanFactory.getBeansOfType(AspectJExpressionPointcutAdvisor.class).values();\n        for (AspectJExpressionPointcutAdvisor advisor : advisors) {\n            ClassFilter classFilter = advisor.getPointcut().getClassFilter();\n            // 用表达式 过滤匹配类\n            if (!classFilter.matches(bean.getClass())) continue;\n            // 封装\n            AdvisedSupport advisedSupport = new AdvisedSupport();\n            TargetSource targetSource = new TargetSource(bean);\n            advisedSupport.setTargetSource(targetSource);\n            advisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());\n            advisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());\n            advisedSupport.setProxyTargetClass(true);\n            // 返回代理对象\n            return new ProxyFactory(advisedSupport).getProxy();\n        }\n        return bean;\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<beans>\n    \x3c!-- 目标类 --\x3e\n    <bean id="userService" class="cn.bugstack.springframework.test.bean.UserService"/>\n    \x3c!-- 代理类 --\x3e\n    <bean id="beforeAdvice" class="cn.bugstack.springframework.test.bean.UserServiceBeforeAdvice"/>\n    \x3c!-- 组件类，至关重要 --\x3e\n    <bean class="cn.bugstack.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>\n    \x3c!-- \n        这里是  advisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice()); 设置拦截器，\n        可以是前置拦截，后置拦截，或者环绕拦截\n     --\x3e\n    <bean id="methodInterceptor" class="cn.bugstack.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor">\n        <property name="advice" ref="beforeAdvice"/>\n    </bean>\n    \x3c!-- 切面表达式 --\x3e\n    <bean id="pointcutAdvisor" class="cn.bugstack.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor">\n        <property name="expression" value="execution(* cn.bugstack.springframework.test.bean.IUserService.*(..))"/>\n        <property name="advice" ref="methodInterceptor"/>\n    </bean>\n</beans>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])])])}),[],!1,null,null,null);e.default=r.exports}}]);