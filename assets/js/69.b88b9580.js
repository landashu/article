(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{545:function(a,e,t){"use strict";t.r(e);var s=t(41),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),t("ol",[t("li",[a._v("Kafka 并没有完全遵照 JMS 范，它另辟蹊径，探索出了一条独有的道路")]),a._v(" "),t("li",[a._v("kafka 是把消息写到页缓存中，然后由操作系统自行决定什么时候把页缓存中的数据写回磁盘上，这样的设计有 3 个主要优势：")])]),a._v(" "),t("ul",[t("li",[a._v("操作系统页缓存是在内存中分配的，所以消息写入的速度非常快。")]),a._v(" "),t("li",[a._v("Kafka 不必直接与底层的文件系统打交道。所有烦琐的 1/0 操作都交由操作系统来处理")]),a._v(" "),t("li",[a._v("Kafka 写入操作采用追加写入（ append ）的方式，避免了磁盘随机写操作，且不允许修改己写入的消息，因此它属于典型的磁盘顺序访问型操作。普通的磁盘顺序写入 跟 内存随机写入有过之而无不及。")])]),a._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[a._v("Kafka 就是依靠下列 4 点达到了高吞吐量、低延时的设计目标的。")])]),a._v(" "),t("ul",[t("li",[a._v("大量使用操作系统页缓存，内存操作速度快且命中率高。")]),a._v(" "),t("li",[a._v("Kafka 不直接参与物理 1/0 操作，而是交由最擅长此事的操作系统来完成。")]),a._v(" "),t("li",[a._v("采用追加写入方式，摒弃了缓慢的磁盘随机读／写操作。")]),a._v(" "),t("li",[a._v("使用以 sendfile 为代表的零拷贝技术加强网络间的数据传输效率。严格来说是通过 Java 的 FileChannel.transferTo 方法实现的。")])]),a._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[a._v("Kafka 中的 topic 通常都会被多个消费者订阅，因此出于性能的考量， Kafka 并不是 topicmessage 的两级结构，而是采用了 topic-partition-message 的三级结构来分散负载。")]),a._v(" "),t("li",[a._v("topic partition 下的每条消息都被分配一个位移值。实际上 Kafka 消费者端也有位移（ offset ）的概念，但注意这两个 offset 属于不同的概念。每条消息在某个 partition 位移是固定的，但消费该 partition 的消费者的位移会随着消费进度 (前提要提交 offset) 不断前移。")]),a._v(" "),t("li",[a._v("对于每条待发迭的消息，如果该消息指定了 key ，那么该 partitioner 会根据 key 的哈希值来选择目标分区：若这条消息没有指定 key ，则 partitioner 使用轮询的方式确认目标分区一一这样可以最大限度地确保消息在所有分区上的均匀性")]),a._v(" "),t("li",[a._v("消费者的 offset 没有提交的话，下次启动会从没提交的地方开始读")]),a._v(" "),t("li",[a._v("kafka 的广播模式，一个 topic 可以被多个组的一个消费者进行消费，这样就实现了广播模式。也就是组与组之间共享数据，但组内的消费者竞争消费。")]),a._v(" "),t("li",[a._v("kafka 消费过的数据依旧会保留在文件，可以通过两种方式删除旧数据。两种方式都可以通过修改 vim KAFKA_HOME/config/server.properties 的配置文件来设置。")])]),a._v(" "),t("ul",[t("li",[a._v("可以基于时间配置，让 kafka 删除一周前的数据。")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("# 单位小时\nlog.retention.hours=168\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("ul",[t("li",[a._v("也可以在 Partition 文件超过 1GB 时删除旧数据")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("# 单位字节\nlog.segment.bytes=1073741824\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("h2",{attrs:{id:"kafka-副本分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kafka-副本分区"}},[a._v("#")]),a._v(" kafka 副本分区")]),a._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/kafka/1400/img.png",alt:""}})]),a._v(" "),t("p",[a._v("kafka 的分区，在集群模式下，会均匀分布到每个集群节点。")]),a._v(" "),t("p",[a._v("kafka 的副本指的是分区的副本。副本数量不能超过 集群节点 的数量")]),a._v(" "),t("p",[a._v("kafka 集群是没有 leader 一说的，但对于 分区副本 是有 leader 的。既然有 leader 那么肯定有选举机制，kafka 会在集群中的随机一个 broker (节点) 开启一个 controller 进程，用来进行 leader 的选举。")]),a._v(" "),t("h2",{attrs:{id:"kafka生产"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kafka生产"}},[a._v("#")]),a._v(" kafka 生产")]),a._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/kafka/1400/img_1.png",alt:""}})]),a._v(" "),t("ol",[t("li",[a._v("producer 先从 zookeeper 的 */brokers/.../state 节点找到改 partition 的 Leader")]),a._v(" "),t("li",[a._v("producer 将消息发送给 Leader")]),a._v(" "),t("li",[a._v("leader 将消息写到本地 log")]),a._v(" "),t("li",[a._v("follower 从 leader 批量拉取消息，写入本地 log，成功向 leader 发送 ACK")]),a._v(" "),t("li",[a._v("leader 收到所有 replica 的 ACK 后，增加 HW (high watemark，最后 commit 的 offset) 并向 producer 发送 ACK。"),t("br"),a._v("\n期间有 ISR 机制，ISR 是指：比如有三个分布①②③，其中②是 leader，①③是 follower。假设在数据同步过程中，①跟上 leader，但是③出现故障没有同步，则①②是一个 ISR，而③不是 ISR 成员。后期在 Leader 选举时，会用到 ISR 机制，优先从 ISR 中选择 Leader。")])]),a._v(" "),t("h3",{attrs:{id:"kafka-leader-选举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kafka-leader-选举"}},[a._v("#")]),a._v(" kafka Leader 选举")]),a._v(" "),t("p",[a._v("这里所谓的 HA 指得就是对 partition 的 HA，只有 partition 有 Leader 和 follower 机制，所以 Leader  挂了之后要重新选举 Leader。在选举新 Leader 时，一个基本原则是，新的 Leader 必须拥有旧的 Leader commit 过的所有消息。")]),a._v(" "),t("p",[a._v("由写入流程可知 ISR 里面的所有 replication 都跟上了 Leader，只有 ISR 里面的成员才能选为 Leader。对于 f+1 个 replication，一个 partition 可以容忍 f 个 replication 失效的情况下保证消息不丢失。比如一个分区 5 个副本，挂了 4 个，还有一个，依然可以工作。")]),a._v(" "),t("p",[a._v("当所有 replication 都不工作时，有两种可行的方案："),t("strong",[a._v("kafka0.8* 以后默认使用第二种")])]),a._v(" "),t("ol",[t("li",[a._v("等待 ISR 中的任一个 replication 活过来，并选它做为 Leader。可保障数据不丢失，但时间可能相对较长。")]),a._v(" "),t("li",[a._v("选择第一个活过来的 replication（不一定是 ISR 成员）作为 Leader。无法保障数据不丢失，但相对不可用时间较短。")])]),a._v(" "),t("h1",{attrs:{id:"kafka-消费模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kafka-消费模式"}},[a._v("#")]),a._v(" kafka 消费模式")]),a._v(" "),t("p",[a._v("首先明确一点，kafka 使用的是 pull（拉取） 模式。")]),a._v(" "),t("p",[a._v("Kafka 最初考虑的问题是，customer 应该从 brokes 拉取消息还是 brokers 将消息推送到 consumer，也就是 pull 还 push。在这方面，Kafka 遵循了一种大部分消息系统共同的传统的设计：producer 将消息推送到 broker，consumer 从 broker 拉取消息。")]),a._v(" "),t("p",[a._v("一些消息系统比如 Scribe 和 Apache Flume 采用了 push 模式，将消息推送到下游的 consumer。这样做有好处也有坏处：由 broker 决定消息推送的速率，对于不同消费速率的 consumer 就不太好处理了。消息系统都致力于让 consumer 以最大的速率最快速的消费消息，但不幸的是，push 模式下，当 broker 推送的速率远大于 consumer 消费的速率时，consumer 恐怕就要崩溃了。最终 Kafka 还是选取了传统的 pull 模式。Pull 模式的另外一个好处是 consumer 可以自主决定是否批量的从 broker 拉取数据。Push 模式必须在不知道下游 consumer 消费能力和消费策略的情况下决定是立即推送每条消息还是缓存之后批量推送。如果为了避免 consumer 崩溃而采用较低的推送速率，将可能导致一次只推送较少的消息而造成浪费。Pull 模式下，consumer 就可以根据自己的消费能力去决定这些策略。Pull 有个缺点是，如果 broker 没有可供消费的消息，将导致 consumer 不断在循环中轮询，直到新消息到达。为了避免这点，Kafka 有个参数可以让 consumer 阻塞知道新消息到达 (当然也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发送消息。")]),a._v(" "),t("h3",{attrs:{id:"offset机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#offset机制"}},[a._v("#")]),a._v(" offset 机制")]),a._v(" "),t("p",[a._v("Consumer 在从 kafka 读取消息后，可以选择 commit，该操作会在 kafka 中保存该 Consumer 在该 partition 中读取的消息的 offset。该 Consumer 下一次再读该 partition 时会从下一条开始读取。通过这一特性可以保证同一消费者从 kafka 中不会重复消费数据。")]),a._v(" "),t("p",[a._v("kafka 再启动以后会在配置文件中 log.dirs 设置的路径下生成 50 个 offset 文件，如果是集群启动会，会均分这 50 个 offst 文件。")]),a._v(" "),t("p",[a._v("Kafka 对于 offset 的处理有两种提交方式：(1) 自动提交 (默认的提交方式)   (2) 手动提交 (可以灵活地控制 offset)")]),a._v(" "),t("ul",[t("li",[a._v("自动提交偏移量:"),t("br"),a._v("\nKafka 中偏移量的自动提交是由参数 enable_auto_commit 和 auto_commit_interval_ms 控制的，当 enable_auto_commit=true 时，Kafka 在消费的过程中会以频率为 auto_commit_interval_ms 向 Kafka 自带的 topic (__consumer_offsets) 进行偏移量提交，具体提交到哪个 Partation 是以算法："),t("strong",[a._v("Math.abs(groupId.hasCode())%50")]),a._v(" 来计算的。group_id 的获取方式可以通过如下命令查看")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("./kafka-consumer-groups.sh --bootstrap-server ip:port --list --topic_name\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("最后调用 consumer.close () 时候也会触发自动提交，因为它默认 autocommit=True")]),a._v(" "),t("ul",[t("li",[a._v("手动提交偏移量"),t("br"),a._v("\n对于手动提交 offset 主要有 3 种方式：1. 同步提交  2. 异步提交  3. 异步 + 同步 组合的方式提交")])]),a._v(" "),t("h2",{attrs:{id:"kafka-索引机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kafka-索引机制"}},[a._v("#")]),a._v(" kafka 索引机制")]),a._v(" "),t("p",[a._v("kafka 解决查询效率的手段直一是将数据文件分段，可以配置每个数据文件的最大值，每一个 log 文件的大小默认是 1GB。每段放在一个单独的数据文件里面，数据文件以该字段中最小的 offset 命名，其他位置用 0 填充。最初始的文件是 00000000000000000000.log 命名的，但下一个 log 文件生成时的第一条消息的 offset 是 18987，则该 log 文件的命名是 00000000000000018987.log，并且每生成一个 log 文件就会对应产生一个 index 文件，是和 log 文件的命名相同的。这样在进行消息检索的时候可以快速利用二分的方法进行查找，定位到某一个分段文件中。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/kafka/1400/img_2.png",alt:""}})]),a._v(" "),t("p",[a._v("稀疏索引 + 二分查找，可以加快查找速度"),t("br"),a._v("\n index 文件中并没有为数据文件中的每条 message 建立索引，而是采用了稀疏存储的方式，每隔一定字节的数据建立一条索引。这样避免了索引文件占用过多的空间，从而可以将索引文件保留在内存中。从而需要做一次顺序扫描，但是这场戏顺序扫描的范围就很小了。")]),a._v(" "),t("p",[a._v("索引文件被映射到内存中，所以查找的速度还是很快的。")]),a._v(" "),t("h2",{attrs:{id:"kafka的消息系统语义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kafka的消息系统语义"}},[a._v("#")]),a._v(" kafka 的消息系统语义")]),a._v(" "),t("p",[a._v("在一个分布式发布订阅系统中，组成系统的计算机总会由于各自的故障而不能工作。在 kafka 中，一个单独的 broker，可能会在生产者发送消息到一个 topic 的时候宕机，或者出现网络故障，从而导致生产者发送消息失败。根据生产者如何处理这样的失败，产生了不同的语义。")]),a._v(" "),t("h3",{attrs:{id:"至少一次语义-at-least-once-semantics-all-或-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#至少一次语义-at-least-once-semantics-all-或-1"}},[a._v("#")]),a._v(" 至少一次语义（at least once semantics）all 或 -1")]),a._v(" "),t("h4",{attrs:{id:"生产"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生产"}},[a._v("#")]),a._v(" 生产")]),a._v(" "),t("p",[a._v("如果生产者收到了 Kafka broker 的确认（acknowledgement，ack），并且生产者的 acks 配置项设置为 all（或 - 1），这就意味着消息已经被精确一次写入 Kafka topic 了。然而，如果生产者接收 ack 超时或者收到了错误，它就会认为消息没有写入 Kafka topic 而尝试重新发送消息。如果 broker 恰好在消息已经成功写入 Kafka topic 后，发送 ack 前，出了故障，生产者的重试机制就会导致这条消息被写入 Kafka 两次，从而导致同样的消息会被消费者消费不止一次。kafka 默认是该语义")]),a._v(" "),t("h4",{attrs:{id:"消费"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消费"}},[a._v("#")]),a._v(" 消费")]),a._v(" "),t("p",[a._v("关闭自动提交，改为手动提交，但是在程序处理的过程中，已经报数据存储数据库中，但在提交 offset 的时候报错，下次会继续消费这条数据，导致数据重复。")]),a._v(" "),t("h3",{attrs:{id:"至多一次语义-at-most-once-semantics-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#至多一次语义-at-most-once-semantics-0"}},[a._v("#")]),a._v(" 至多一次语义（at most once semantics）0")]),a._v(" "),t("h4",{attrs:{id:"生产-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生产-2"}},[a._v("#")]),a._v(" 生产")]),a._v(" "),t("p",[a._v("如果生产者在 ack 超时或者返回错误的时候不重试发送消息，那么消息有可能最终并没有写入 Kafka topic 中，因此也就不会被消费者消费到。但是为了避免重复处理的可能性，我们接受有些消息可能被遗漏处理。")]),a._v(" "),t("h4",{attrs:{id:"消费-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消费-2"}},[a._v("#")]),a._v(" 消费")]),a._v(" "),t("p",[a._v("自动提交机机制会引发这个问题，当消费者拿到数据后，就会立马提交 offset 偏移量，但是数据并没有处理，如果发生处理失败，则下次接收的则是下一个数据。")]),a._v(" "),t("h3",{attrs:{id:"精确一次语义-exactly-once-semantics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#精确一次语义-exactly-once-semantics"}},[a._v("#")]),a._v(" 精确一次语义（Exactly once semantics）")]),a._v(" "),t("h4",{attrs:{id:"生产-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生产-3"}},[a._v("#")]),a._v(" 生产")]),a._v(" "),t("p",[a._v("在基于 至少一次语义（at least once semantics）上改进，生产者生成消息的时候，分配一个全局递增的 ID。broker 接收消息的时候，判断当前消息的 ID 是否和已存储的最新的消息 ID 相差 > 1，如果 <= 1，则说明此消费已处理过。如果> 1，证明中间还有数据未到达。")]),a._v(" "),t("div",{staticClass:"language-properties line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#代码中要设置")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("acks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[a._v("all")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 必须设置enable.idempotence=true 才有效精确一次")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("enable.idempotence")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[a._v("true")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h4",{attrs:{id:"消费-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消费-3"}},[a._v("#")]),a._v(" 消费")]),a._v(" "),t("p",[a._v("精确一次必须配置 生产者的精确一次配置，并加如如下")]),a._v(" "),t("div",{staticClass:"language-properties line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("processing.guarantee")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[a._v("exact_once")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("这样在消费者端，通过消息的 ID 实现精确消费。")])])}),[],!1,null,null,null);e.default=r.exports}}]);