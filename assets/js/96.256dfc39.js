(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{573:function(s,e,t){"use strict";t.r(e);var r=t(41),a=Object(r.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"explain-用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explain-用法"}},[s._v("#")]),s._v(" Explain 用法")]),s._v(" "),t("p",[s._v("模拟 Mysql 优化器是如何执行 SQL 查询语句的，从而知道 Mysql 是如何处理你的 SQL 语句的。分析你的查询语句或是表结构的性能瓶颈。"),t("br"),s._v("\n语法：Explain + SQL 语句；"),t("br"),s._v("\n 如：Explain select * from user; 会生成如下 SQL 分析结果，下面详细对每个字段进行详解")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/mysql/3/img.png",alt:""}})]),s._v(" "),t("h2",{attrs:{id:"id"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#id"}},[s._v("#")]),s._v(" id")]),s._v(" "),t("p",[s._v("是一组数字，代表多个表之间的查询顺序，或者包含子句查询语句中的顺序，id 总共分为三种情况，依次详解")]),s._v(" "),t("p",[s._v("id 相同，执行顺序由上至下"),t("br"),s._v("\n id 不同，如果是子查询，id 号会递增，id 值越大优先级越高，越先被执行"),t("br"),s._v("\n id 相同和不同的情况同时存在")]),s._v(" "),t("h2",{attrs:{id:"select-type"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#select-type"}},[s._v("#")]),s._v(" select_type")]),s._v(" "),t("p",[s._v("select_type 包含以下几种值：")]),s._v(" "),t("ul",[t("li",[s._v("simple"),t("br"),s._v("\n 简单的 select 查询，查询中不包含子查询或者 union 查询")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/mysql/3/img_1.png",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("primary"),t("br"),s._v("\n 如果 SQL 语句中包含任何子查询，那么子查询的最外层会被标记为 primary")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/mysql/3/img_2.png",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("subquery"),t("br"),s._v("\n 在 select 或者 where 里包含了子查询，那么子查询就会被标记为 subQquery，同三。二同时出现")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/mysql/3/img_3.png",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("derived"),t("br"),s._v("\n 在 from 中包含的子查询，会被标记为衍生查询，会把查询结果放到一个临时表中")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/mysql/3/img_4.png",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("union / union result"),t("br"),s._v("\n 如果有两个 select 查询语句，他们之间用 union 连起来查询，那么第二个 select 会被标记为 union，union 的结果被标记为 union result。它的 id 是为 null 的")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/mysql/3/img_5.png",alt:""}})]),s._v(" "),t("h2",{attrs:{id:"table"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table"}},[s._v("#")]),s._v(" table")]),s._v(" "),t("p",[s._v("表示这一行的数据是哪张表的数据")]),s._v(" "),t("h2",{attrs:{id:"type"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[s._v("#")]),s._v(" type")]),s._v(" "),t("p",[s._v("type 是代表 MySQL 使用了哪种索引类型，不同的索引类型的查询效率也是不一样的，常用的类型有： ALL、index、range、 ref、eq_ref、const、system、NULL（从上到下，性能从差到好）")]),s._v(" "),t("ul",[t("li",[s._v("ALL"),t("br"),s._v("\nFull Table Scan， MySQL 将遍历全表以找到匹配的行")]),s._v(" "),t("li",[s._v("index"),t("br"),s._v("\nFull Index Scan，index 与 ALL 区别为 index 类型只遍历索引树")]),s._v(" "),t("li",[s._v("range"),t("br"),s._v("\n 只检索给定范围的行，使用一个索引来选择行")]),s._v(" "),t("li",[s._v("ref"),t("br"),s._v("\n 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值")]),s._v(" "),t("li",[s._v("eq_ref"),t("br"),s._v("\n 类似 ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用 primary key 或者 unique key 作为关联条件")]),s._v(" "),t("li",[s._v("const、system"),t("br"),s._v("\n 当 MySQL 对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于 where 列表中，MySQL 就能将该查询转换为一个常量，system 是 const 类型的特例，当查询的表只有一行的情况下，使用 system")]),s._v(" "),t("li",[s._v("NULL"),t("br"),s._v("\nMySQL 在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。")])]),s._v(" "),t("h2",{attrs:{id:"possible-keys"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#possible-keys"}},[s._v("#")]),s._v(" possible_keys")]),s._v(" "),t("p",[s._v("此次查询中涉及字段上若存在索引，则会被列出来，表示可能会用到的索引，但并不是实际上一定会用到的索引")]),s._v(" "),t("h2",{attrs:{id:"key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#key"}},[s._v("#")]),s._v(" Key")]),s._v(" "),t("p",[s._v("key 列显示 MySQL 实际决定使用的键（索引），必然包含在 possible_keys 中"),t("br"),s._v("\n如果没有选择索引，键是 NULL。要想强制 MySQL 使用或忽视 possible_keys 列中的索引，在查询中使用 FORCE INDEX、USE INDEX 或者 IGNORE INDEX。")]),s._v(" "),t("h2",{attrs:{id:"key-len"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#key-len"}},[s._v("#")]),s._v(" key_len")]),s._v(" "),t("p",[s._v("表示索引中使用的字节数，通过该属性可以知道在查询中使用的索引长度，注意：这个长度是最大可能长度，并非实际使用长度，在不损失精确性的情况下，长度越短查询效率越高")]),s._v(" "),t("h2",{attrs:{id:"ref"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[s._v("#")]),s._v(" ref")]),s._v(" "),t("p",[s._v("显示关联的字段。如果使用常数等值查询，则显示 const，如果是连接查询，则会显示关联的字段。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/mysql/3/img_6.png",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("tb_emp 表为非唯一性索引扫描，实际使用的索引列为 idx_name，由于 tb_emp.name='rose' 为一个常量，所以 ref=const。")]),s._v(" "),t("li",[s._v("tb_dept 为唯一索引扫描，从 sql 语句可以看出，实际使用了 PRIMARY 主键索引，ref=db01.tb_emp.deptid 表示关联了 db01 数据库中 tb_emp 表的 deptid 字段。")])]),s._v(" "),t("h2",{attrs:{id:"rows"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rows"}},[s._v("#")]),s._v(" rows")]),s._v(" "),t("p",[s._v("根据表信息统计以及索引的使用情况，大致估算说要找到所需记录需要读取的行数，rows 越小越好")]),s._v(" "),t("h2",{attrs:{id:"extra"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extra"}},[s._v("#")]),s._v(" extra")]),s._v(" "),t("p",[s._v("不适合在其他列显示出来，但在优化时十分重要的信息")]),s._v(" "),t("h3",{attrs:{id:"using-filesort-重点优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-filesort-重点优化"}},[s._v("#")]),s._v(" using fileSort（重点优化）")]),s._v(" "),t("p",[s._v('俗称 "文件排序" ，在数据量大的时候几乎是 “九死一生”，在 order by 或者在 group by 排序的过程中，order by 的字段不是索引字段，或者 select 查询字段存在不是索引字段，或者 select 查询字段都是索引字段，但是 order by 字段和 select 索引字段的顺序不一致，都会导致 fileSort')]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/mysql/3/img_7.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"using-temporary-重点优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-temporary-重点优化"}},[s._v("#")]),s._v(" using temporary（重点优化）")]),s._v(" "),t("p",[s._v("使用了临时表保存中间结果，常见于 order by 和 group by 中。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/mysql/3/img_8.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"using-index-重点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-index-重点"}},[s._v("#")]),s._v(" USING index（重点）")]),s._v(" "),t("p",[s._v("表示相应的 select 操作中使用了覆盖索引（Coveing Index）, 避免访问了表的数据行，效率不错！ 如果同时出现 using where，表明索引被用来执行索引键值的查找；如果没有同时出现 using where，表面索引用来读取数据而非执行查找动作。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/mysql/3/img_9.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"using-wher"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-wher"}},[s._v("#")]),s._v(" Using wher")]),s._v(" "),t("p",[s._v("表明使用了 where 过滤")]),s._v(" "),t("h3",{attrs:{id:"using-join-buffer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-join-buffer"}},[s._v("#")]),s._v(" using join buffer")]),s._v(" "),t("p",[s._v("使用了连接缓存")]),s._v(" "),t("h3",{attrs:{id:"impossible-where"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#impossible-where"}},[s._v("#")]),s._v(" impossible where")]),s._v(" "),t("p",[s._v("where 子句的值总是 false，不能用来获取任何元组")]),s._v(" "),t("h3",{attrs:{id:"select-tables-optimized-away"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#select-tables-optimized-away"}},[s._v("#")]),s._v(" select tables optimized away")]),s._v(" "),t("p",[s._v("在没有 GROUPBY 子句的情况下，基于索引优化 MIN/MAX 操作或者 对于 MyISAM 存储引擎优化 COUNT (*) 操作，不必等到执行阶段再进行计算， 查询执行计划生成的阶段即完成优化。")]),s._v(" "),t("h3",{attrs:{id:"distinct"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#distinct"}},[s._v("#")]),s._v(" distinct")]),s._v(" "),t("p",[s._v("优化 distinct，在找到第一匹配的元组后即停止找同样值的工作")])])}),[],!1,null,null,null);e.default=a.exports}}]);