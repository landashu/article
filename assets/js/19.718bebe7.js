(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{495:function(n,e,t){"use strict";t.r(e);var s=t(41),i=Object(s.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("在 Spring 框架中，Event 代表着一个应用程序中的事件。这些事件可以是任何类型的状态变化，如用户操作、数据更新和系统错误等等。我们可以使用 Event 来实现应用程序内部的通信和协作。通过观察者模式，我们可以让不同的组件在特定的事件发生时做出响应，从而实现松耦合的设计。")]),n._v(" "),t("p",[n._v("Spring 提供了一个简单而强大的机制来处理 Event，即 ApplicationEvent 和 ApplicationListener 接口。ApplicationEvent 是一个基本的事件类，它可以被继承以实现各种类型的事件。ApplicationListener 接口则定义了一个监听器，在某个事件发生时触发回调方法。以下提供了基本的类图关系，其中 AbstractApplicationContext 是执行 Spring 所有核心方法的集成类：")]),n._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/spring/202/img.jpg",alt:""}})]),n._v(" "),t("p",[n._v("Spring 提供了许多不同类型的 Event，每种 Event 都有其特定的作用和用途。下面是 Spring 生命周期中提供的 Event 及其作用：")]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("ContextRefreshedEvent")]),n._v("：表示 ApplicationContext 已经初始化并且准备好接受请求。通常情况下，我们可以利用该事件来进行一些初始化操作。")]),n._v(" "),t("li",[t("strong",[n._v("ContextStartedEvent")]),n._v("：表示 ApplicationContext 正在启动。当应用程序中有需要在启动时执行的操作时，可以使用该事件进行处理。")]),n._v(" "),t("li",[t("strong",[n._v("ContextStoppedEvent")]),n._v("：表示 ApplicationContext 已停止。当需要在应用程序停止前执行某些操作时，可以使用该事件。")]),n._v(" "),t("li",[t("strong",[n._v("ContextClosedEvent")]),n._v("：表示 ApplicationContext 已经关闭。与 ContextStoppedEvent 不同，ContextClosedEvent 是在 ApplicationContext 关闭之后发送的，它允许我们对资源进行完全释放。")]),n._v(" "),t("li",[t("strong",[n._v("RequestHandledEvent")]),n._v("：表示一个 HTTP 请求已经被处理完毕。该事件通常用于记录或统计请求处理的性能数据。")])]),n._v(" "),t("p",[n._v("在 Spring 中，我们可以通过实现 ApplicationListener 接口或使用 @EventListener 注解来监听这些事件。以监听 ContextRefreshedEvent 为例，我们可以编写如下代码：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@Component\npublic class MyListener implements ApplicationListener<ContextRefreshedEvent> {\n    @Override\n    public void onApplicationEvent(ContextRefreshedEvent event) {\n        // 在此处编写需要执行的逻辑\n    }\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("p",[n._v("除了实现 ApplicationListener 接口外，我们还可以使用 @EventListener 注解来监听事件。例如，我们可以在 Spring 组件中添加如下方法：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@EventListener\npublic void handleContextRefreshedEvent(ContextRefreshedEvent event) {\n    // 在此处编写需要执行的逻辑\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br")])]),t("p",[n._v("要使用 Spring 提供的类自定义一个事件发布和监听，首先，我们需要定义一个自定义事件。可以创建一个继承自 ApplicationEvent 的类，并在其中添加自定义字段和方法")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public class MyCustomEvent extends ApplicationEvent {\n    private String message;\n    public MyCustomEvent(Object source, String message) {\n        super(source);\n        this.message = message;\n    }\n    public String getMessage() {\n        return message;\n    }\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br")])]),t("p",[n._v("发布事件 一旦定义了自定义事件，我们就可以使用 ApplicationContext 的 publishEvent 方法来发布事件")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('@Autowired\nprivate ApplicationContext applicationContext;\n\npublic void doSomethingAndPublishEvent() {\n    // 在此处执行业务逻辑\n    MyCustomEvent event = new MyCustomEvent(this, "Hello, world!");\n    applicationContext.publishEvent(event);\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br")])]),t("p",[n._v("监听事件 最后，我们需要创建一个事件监听器，以便处理自定义事件。可以创建一个实现 ApplicationListener 接口的类，并在其 onApplicationEvent 方法中添加处理逻辑")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('@Component\npublic class MyCustomEventListener implements ApplicationListener<MyCustomEvent> {\n    @Override\n    public void onApplicationEvent(MyCustomEvent event) {\n        System.out.println("Received custom event - " + event.getMessage());\n    }\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("p",[n._v("这样，当 MyCustomEvent 事件被发布时，MyCustomEventListener 就会收到该事件并调用其 onApplicationEvent 方法进行处理。")])])}),[],!1,null,null,null);e.default=i.exports}}]);