(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{512:function(e,a,t){"use strict";t.r(a);var s=t(41),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("MyBatis 是一个 Java 的 ORM 框架，它使用 XML 或注解来配置和映射 SQL 语句，同时提供了增删改查等常用操作的 API。Mybatis 还提供了许多高级映射和查询功能，例如延迟加载、缓存和批量操作，这使得开发人员可以轻松地编写出高性能、可维护的数据访问层。")]),e._v(" "),t("p",[e._v("关于 MyBatis 我们主要要了解他的工作流程，特性，和部分重要的知识点，就像 Spring，我们主要是了解他的生命周期，可扩展项等，所谓生命周期，也是 Spring 的工作流程。")]),e._v(" "),t("p",[e._v("以下是整个 MyBatis 的工作流程图，对应图中会讲解每个节点重要的知识点。这里要记住 MyBatis 主要的工作模式就是解析、准备和执行，所谓解析就是得到 XML 的信息，维护到一个叫  "),t("code",[e._v("Configuration")]),e._v("  的配置类中；准备就是 "),t("code",[e._v("opensession")]),e._v("  部分，他会得到 "),t("code",[e._v("Configuration")]),e._v("  中的信息，根据执行部分所使用的执行器，数据源，事务等进行实例化和关系映射；使用就是当我们去进行查询或新增等操作，从资源和信息中拿取已被缓存的对象或执行器等，执行对应的方法。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/mybatis/300/img_1.png",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析"}},[e._v("#")]),e._v(" 解析")]),e._v(" "),t("p",[e._v("解析部分对应图中  "),t("code",[e._v("加载&解析XML")]),e._v("  至  "),t("code",[e._v("XMLConfigBuilder#mapperElement")]),e._v("  这里，可以说是读取 XML 到维护各类对象关系和信息的核心。下面我们分解讲解每个步骤都做了哪些事情以及核心部分解析得到了什么。")]),e._v(" "),t("h3",{attrs:{id:"加载-解析xml"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载-解析xml"}},[e._v("#")]),e._v(" 加载 & 解析 XML")]),e._v(" "),t("p",[e._v("这部分主要是读取  "),t("code",[e._v("mybatis-config-datasource.xml")]),e._v("  文件，该文件主要维护了一些公共资源信息，包括环境信息（数据库连接信息），对应的 mapper 文件信息，设置信息等。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-config.dtd">\n<configuration>\n    \x3c!-- 设置信息 --\x3e\n    <settings>\n        \x3c!-- 全局缓存：true/false 管理一级缓存和二级缓存的是否使用 --\x3e\n        <setting name="cacheEnabled" value="true"/>\n        \x3c!--缓存级别：SESSION/STATEMENT--\x3e\n        <setting name="localCacheScope" value="STATEMENT"/>\n    </settings>\n    \x3c!-- 环境信息 --\x3e\n    <environments default="development">\n        <environment id="development">\n            <transactionManager type="JDBC"/>\n            <dataSource type="POOLED">\n                <property name="driver" value="com.mysql.jdbc.Driver"/>\n                <property name="url" value="jdbc:mysql://10.240.30.93:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false"/>\n                <property name="username" value="root"/>\n                <property name="password" value="Dev@root2021"/>\n            </dataSource>\n        </environment>\n    </environments>\n    \x3c!-- 维护所有mapper --\x3e\n    <mappers>\n        \x3c!-- XML 配置 --\x3e\n        <mapper resource="mapper/Activity_Mapper.xml"/>\n    </mappers>\n</configuration>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br")])]),t("p",[e._v("读取到文件后调用  "),t("code",[e._v("XMLConfigBuilder#parse")]),e._v("  进行解析，解析内容如下。")]),e._v(" "),t("h4",{attrs:{id:"configuration-初始化配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration-初始化配置"}},[e._v("#")]),e._v(" Configuration 初始化配置")]),e._v(" "),t("p",[e._v("在整个文件解析之前，MyBatis 会先把一些信息进行提前初始化，也就是上图中  "),t("code",[e._v("new Configuration（）")]),e._v(" 阶段，该类最终会被多个 MyBatis 的类所引用并贯穿整个 MyBatis 工作流程，由于被引用的类太多，这里就不一一列举，我们只要知道他贯穿整个流程即可。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/mybatis/300/img.png",alt:""}})]),e._v(" "),t("p",[e._v("Configuration 被初始化时包含了大量的信息，这些信息就是在解析 xml 文件时维护的，逐一讲解下每个配置的具体作用：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("environment")]),e._v("：缓存了环境 ID（可设置默认环境，环境包括：开发环境、测试环境等），事务工厂，数据源（有池或无池或其他连接池）等")]),e._v(" "),t("li",[t("strong",[e._v("mapperRegistry")]),e._v("：映射注册机，缓存每个接口（ "),t("code",[e._v("接口对象Class做为key")]),e._v(" ）所对应的  "),t("code",[e._v("MapperProxyFactory")]),e._v(" ，提供添加映射代理类和获取代理类")]),e._v(" "),t("li",[t("strong",[e._v("mappedStatements")]),e._v("：缓存 SQL 语句的拆解信息。XML 的 "),t("code",[e._v("namespace.标签ID做为（key）")]),e._v(" ，value 为 MappedStatement，信息包括： "),t("code",[e._v("mapper路径")]),e._v(" ， "),t("code",[e._v("SQL类型（SELECT|INSERT等）")]),e._v(" ， "),t("code",[e._v("SQL语句")]),e._v(" ， "),t("code",[e._v("条件")]),e._v(" ， "),t("code",[e._v("该条语句的缓存信息")]),e._v(" ， "),t("code",[e._v("返回结果对象")]),e._v(" ， "),t("code",[e._v("是否缓存标志")]),e._v(" 等。")]),e._v(" "),t("li",[t("strong",[e._v("resultMaps")]),e._v("：缓存 resultMap 标签的拆解信息。XML 的 "),t("code",[e._v("namespace.resultMap做为（key）")]),e._v(" ，然后对应 value 存放  "),t("code",[e._v("SQL字段，映射对象字段，字段JAVA数据类型，类型对应的执行器")]),e._v(" 等")]),e._v(" "),t("li",[t("strong",[e._v("interceptorChain")]),e._v("：缓存 plugins 标签的拆解信息。会在执行 "),t("code",[e._v("newParameterHandler，newResultSetHandler，newStatementHandler，newExecutor")]),e._v("  进行拦截。")]),e._v(" "),t("li",[t("strong",[e._v("typeAliasRegistry")]),e._v("：缓存了每个 java 基本类型的封装类，以及 "),t("code",[e._v("JdbcTransactionFactory，DruidDataSourceFactory，UnpooledDataSourceFactory，PooledDataSourceFactory，PerpetualCache，FifoCache")]),e._v("  等 Mybatis 提供的已知类，用于快速解析 XML 描述的值，便于快速得到 Class 信息并获取实例。")]),e._v(" "),t("li",[t("strong",[e._v("typeHandlerRegistry")]),e._v("：存放对应数据类型的处理策略，比如 JAVA 类型，对应 SQL 类型的处理策略，或 JAVA 类型对应的处理策略。用于设置 SQL 语句参数和获取查询结果的数据类型转换策略。")]),e._v(" "),t("li",[t("strong",[e._v("objectFactory")]),e._v("：对象工厂，用于创建对象实例，使用反射。")]),e._v(" "),t("li",[t("strong",[e._v("objectWrapperFactory")]),e._v("：对象包装器，放着，被解析对象的实例，以及对应的 set，get，构造器，类型等信息。 "),t("code",[e._v("objectFactory")]),e._v("  与  "),t("code",[e._v("objectWrapperFactory")]),e._v("  是为  "),t("code",[e._v("MetaObject")]),e._v("  提供支持的，以解析对象信息进行，然后获取对象某个特定属性的数据，缓存是为了加快获取速度，如果属性也是一个对象则会递归缓存，获取值也会递归获取。")]),e._v(" "),t("li",[t("strong",[e._v("loadedResources")]),e._v("：存放已被加载的  "),t("code",[e._v("mapper.xml")]),e._v("  文件，以防止重复加载")]),e._v(" "),t("li",[t("strong",[e._v("languageRegistry")]),e._v("：存放默认的语言解析驱动器，比如存放了 "),t("code",[e._v("XMLLanguageDriver")]),e._v(" ，提供快速获取这个解析器，然后提供 SQL 解析。")]),e._v(" "),t("li",[t("strong",[e._v("cacheEnabled")]),e._v("：解析是否启用缓存，该配置对于二级缓存生效，一次缓存是默认缓存。")]),e._v(" "),t("li",[t("strong",[e._v("localCacheScope")]),e._v("：一级缓存，缓存策略默认是永久缓存，缓存方式分为  "),t("code",[e._v("SESSION")]),e._v("  和  "),t("code",[e._v("STATEMENT")]),e._v(" ， "),t("code",[e._v("SESSION")]),e._v("  在该会话中命中相同 sql 语句和条件，若在该  "),t("code",[e._v("SESSION")]),e._v("  中发生 "),t("code",[e._v("insert/update/delete/commit/rollback/close")]),e._v("  则会清除缓存，但是，并不会影响其它会话中的缓存； "),t("code",[e._v("STATEMENT")]),e._v("  ，只针对当前会话执行的这一语句有效，执行完毕查询会立即清除缓存。")]),e._v(" "),t("li",[t("strong",[e._v("caches")]),e._v("：二级缓存，基于  "),t("code",[e._v("namespace")]),e._v("  的缓存，可提供第三方其他方式实现。")])]),e._v(" "),t("h4",{attrs:{id:"environments-环境解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#environments-环境解析"}},[e._v("#")]),e._v(" environments 环境解析")]),e._v(" "),t("p",[e._v("在环境解析过程中会得到下面几个重要的属性：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("ID")]),e._v("：表明使用哪一个环境做为主要环境配置，解析 XML 中的 "),t("code",[e._v("<environment >")]),e._v("  标签")]),e._v(" "),t("li",[t("strong",[e._v("TransactionFactory")]),e._v("：解析 XML 中的 "),t("code",[e._v("<transactionManager>")]),e._v("  的 type 属性，如果是 "),t("code",[e._v("JDBC")]),e._v("  则就是 "),t("code",[e._v("JdbcTransactionFactory")]),e._v(" ，也可以自行设置，需要自己注册到  "),t("code",[e._v("typeAliasRegistry")]),e._v("  中")]),e._v(" "),t("li",[t("strong",[e._v("DataSourceFactory")]),e._v("：解析 XML 中 "),t("code",[e._v("<dataSource>")]),e._v("  的 type 属性，如果是 "),t("code",[e._v("POOLED")]),e._v(" ，则对应 "),t("code",[e._v("PooledDataSourceFactory")]),e._v(" ， "),t("code",[e._v("UNPOOLED")]),e._v("  对应  "),t("code",[e._v("UnpooledDataSourceFactory")]),e._v(" ， "),t("code",[e._v("DRUID")]),e._v("  对应  "),t("code",[e._v("DruidDataSourceFactory")])]),e._v(" "),t("li",[t("strong",[e._v("DataSource")]),e._v("：解析 XML 中 "),t("code",[e._v("<property>")]),e._v("  得到具体的连接信息，从  "),t("code",[e._v("DataSourceFactory")]),e._v("  中获取  "),t("code",[e._v("DataSource")])])]),e._v(" "),t("p",[e._v("当以上的信息组件完毕后会封装到  "),t("code",[e._v("Environment")]),e._v("  中，然后添加到  "),t("code",[e._v("configuration")])]),e._v(" "),t("h4",{attrs:{id:"mapper-解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mapper-解析"}},[e._v("#")]),e._v(" mapper 解析")]),e._v(" "),t("p",[e._v("在 mapper 解析中有两种不同的解析，一个是我们常见的 XML 解析，一种是注解，如 @select，这里只讲 XML 解析，有关 @select 等注解解析，放在后续专开一章。那解析首先会读取所到所有的 mapper，在分别解析每个 mapper")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    <mappers>\n        \x3c!-- XML 配置 --\x3e\n        <mapper resource="mapper/Activity_Mapper.xml"/>\n    </mappers>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("一个完整的 Mapper 大致包含如下信息，所以内部会有多个解析分别解析，如 cache 解析，resultMap 解析，select 解析，insert 解析等，我们这里说下重要的解析对象和作用即可。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<mapper namespace="cn.bugstack.mybatis.test.dao.IActivityDao">\n    <cache eviction="FIFO" flushInterval="600000" size="512" readOnly="true"/>\n    <resultMap id="activityMap" type="cn.bugstack.mybatis.test.po.Activity">\n        <id column="id" property="id"/>\n        <result column="activity_id" property="activityId"/>\n        <result column="activity_name" property="activityName"/>\n        <result column="activity_desc" property="activityDesc"/>\n        <result column="create_time" property="createTime"/>\n        <result column="update_time" property="updateTime"/>\n    </resultMap>\n    <select id="queryActivityById" parameterType="cn.bugstack.mybatis.test.po.Activity" resultMap="activityMap" flushCache="false" useCache="true">\n        SELECT activity_id, activity_name, activity_desc, create_time, update_time\n        FROM activity\n        <trim prefix="where" prefixOverrides="AND | OR" suffixOverrides="and">\n            <if test="null != activityId">\n                activity_id = #{activityId}\n            </if>\n        </trim>\n    </select>\n</mapper>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br")])]),t("p",[t("code",[e._v("<cache >")]),e._v("  标签配置于二级缓存，对于缓存也会有单独的一章讲解，这里只讲解析得到的重要类及作用，通过标签会封装一个  "),t("code",[e._v("Cache")]),e._v("  对象，该对象以  "),t("code",[e._v("namespace")]),e._v("  做为  "),t("code",[e._v("cache")]),e._v("  的  "),t("code",[e._v("Id")]),e._v(" ，并把  "),t("code",[e._v("Cache")]),e._v("  对象添加到  "),t("code",[e._v("configuration")]),e._v("  中")]),e._v(" "),t("p",[t("code",[e._v("<resultMap>")]),e._v("  标签配置一个  "),t("code",[e._v("<select >")]),e._v("  标签的 resultMap 属性返回结果对象的关系映射，他会得到对象以及得到描述的各 java 属性类型和对应的  "),t("code",[e._v("TypeHandler")]),e._v("  类型处理器，在返回的时候使用类型处理器，处理查询返回结果的数据类型对应 java 的映射。 "),t("code",[e._v("<resultMap>")]),e._v("  标签可以有多个，所以会添加到集合中，然后维护到  "),t("code",[e._v("configuration")]),e._v("  中")]),e._v(" "),t("p",[t("code",[e._v("<select> or <insert>")]),e._v("  这里最主要的部分就是在解析完成后会把  "),t("code",[e._v("namespace.id")]),e._v("  做为  "),t("code",[e._v("key")]),e._v(" ，把解析的信息  "),t("code",[e._v("MappedStatement")]),e._v("  做为  "),t("code",[e._v("value")]),e._v(" ，维护到  "),t("code",[e._v("configuration")]),e._v("  中，以便 Mybatis 在被代理类调用方法的时候快速找到，该方法对应的 SQL 信息等")]),e._v(" "),t("h4",{attrs:{id:"plugins-插件解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugins-插件解析"}},[e._v("#")]),e._v(" plugins 插件解析")]),e._v(" "),t("h4",{attrs:{id:"settings-设置解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#settings-设置解析"}},[e._v("#")]),e._v(" settings 设置解析")]),e._v(" "),t("h2",{attrs:{id:"准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备"}},[e._v("#")]),e._v(" 准备")]),e._v(" "),t("h2",{attrs:{id:"执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行"}},[e._v("#")]),e._v(" 执行")])])}),[],!1,null,null,null);a.default=n.exports}}]);